
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00003840  000038d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022d  0080016c  0080016c  00003940  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00003940  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007d8  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002508  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c6e  00000000  00000000  00006740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001fe9  00000000  00000000  000073ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e0  00000000  00000000  00009398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000871  00000000  00000000  00009878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000227d  00000000  00000000  0000a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000278  00000000  00000000  0000c366  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__ctors_end>
       4:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      10:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      14:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      18:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      1c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      20:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      24:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      28:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      2c:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_11>
      30:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      34:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      38:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      3c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      40:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      44:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      48:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      4c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      50:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      54:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      58:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      5c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      60:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      64:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>

00000068 <Font5x7>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
      f8:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     188:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     198:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     1d8:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000248 <bmp_oslogo>:
	...
     278:	00 00 00 80 80 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     288:	e0 e0 e0 e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00     ................
	...
     2f0:	00 80 c0 e0 f0 f8 fc fc fe ff ff ff ff ff ff ff     ................
     300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     310:	ff ff ff ff ff fe fc fc f8 f0 e0 c0 80 00 00 00     ................
	...
     36c:	00 80 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
     37c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39c:	ff fe fc f0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     3ec:	fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3fc:	ff ff ff 1f 07 03 01 01 00 00 00 00 00 00 00 01     ................
     40c:	03 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     41c:	ff ff ff ff ff fc 00 00 00 00 00 00 00 00 00 00     ................
	...
     46c:	1f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     47c:	ff ff ff fc f0 e0 c0 80 80 00 00 00 00 00 80 c0     ................
     48c:	c0 f0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     49c:	ff ff ff ff ff 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
	...
     4ec:	00 01 07 1f 7f ff ff ff ff ff ff ff ff ff ff ff     ................
     4fc:	ff ff ff ff ff ff 7f 0f 03 00 00 00 00 01 0f 3f     ...............?
     50c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     51c:	ff 7f 1f 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     570:	00 00 01 03 07 0f 1f 3f 3f 7f ff ff ff ff ff 7f     .......??.......
     580:	0f 03 00 00 00 00 00 00 00 00 00 00 01 0f 3f ff     ..............?.
     590:	ff ff ff ff 7f 7f 3f 1f 0f 07 03 01 00 00 00 00     ......?.........
	...
     5fc:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     60c:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...

00000648 <font_Earthbound_12x19_48to57>:
     648:	00 e0 f0 38 0c 0c 0c 0c 38 f8 c0 00 00 1f 7f e0     ...8....8.......
     658:	80 80 80 80 e0 ff 1f 00 00 00 00 01 01 01 01 01     ................
     668:	00 00 00 00 00 10 18 18 fc fc 00 00 00 00 00 00     ................
     678:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
     688:	01 01 00 00 00 00 00 00 00 08 1c 0c 0c 0c 0c 8c     ................
     698:	f8 f0 00 00 00 f0 f8 9c 8c 86 86 83 83 80 00 00     ................
     6a8:	00 01 01 01 01 01 01 01 01 01 00 00 00 08 1c 0c     ................
     6b8:	0c 0c 0c 8c f8 f0 00 00 00 80 c0 80 81 83 83 c7     ................
     6c8:	ff 7c 00 00 00 00 01 01 01 01 01 01 00 00 00 00     .|..............
     6d8:	00 00 00 80 c0 70 38 fc fc 00 00 00 00 1c 1e 1b     .....p8.........
     6e8:	11 18 10 ff ff 10 18 00 00 00 00 00 00 00 00 01     ................
     6f8:	01 00 00 00 00 00 f4 fc 1c 0c 0c 0c 0c 00 00 00     ................
     708:	00 80 c3 83 83 83 83 c7 fe 78 00 00 00 00 00 01     .........x......
     718:	01 01 01 01 00 00 00 00 00 c0 f0 78 1c 0c 0c 0c     ...........x....
     728:	08 00 00 00 00 3f ff c3 83 83 83 c3 fe 7c 00 00     .....?.......|..
     738:	00 00 00 01 01 01 01 01 00 00 00 00 00 0c 0c 0c     ................
     748:	0c 8c cc 7c 3c 0c 00 00 00 00 80 f0 7c 0f 03 00     ...|<.......|...
     758:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
     768:	00 f0 f8 1c 0c 0c 0c 0c f8 f0 00 00 00 f8 ff 8f     ................
     778:	07 06 06 8f ff f8 00 00 00 00 01 03 03 03 03 01     ................
     788:	01 00 00 00 00 f0 f8 1c 0c 0c 0c 1c f8 e0 00 00     ................
     798:	00 01 87 8e 8c 8c 8c ee 7f 1f 00 00 00 00 01 01     ................
     7a8:	01 01 01 00 00 00 00 00                             ........

000007b0 <Font5x7>:
     7b0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     7c0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     7d0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     7e0:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     7f0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     800:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     810:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     820:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     830:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     840:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     850:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     860:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     870:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     880:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     890:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     8a0:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     8b0:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     8c0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     8d0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     8e0:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     8f0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     900:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     910:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     920:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     930:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     940:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     950:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     960:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     970:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     980:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000990 <Liberation_Sans15x21_Numbers>:
     990:	06 00 00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f     ................
     9a0:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9bc:	00 00 07 00 00 1e 00 e0 1f 00 ff 1f f8 ff 03 ff     ................
     9cc:	1f 00 ff 01 00 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
     9ec:	0e 00 00 00 c0 7f 00 f8 ff 01 fc ff 07 fc ff 07     ................
     9fc:	3e 80 0f 0e 00 0e 0e 00 0e 0e 00 0e 1e 80 0f fc     >...............
     a0c:	ff 07 fc ff 07 f8 ff 01 c0 7f 00 00 00 00 0e 00     ................
     a1c:	00 00 70 00 0e 38 00 0e 38 00 0e 1c 00 0e 0e 00     ..p..8..8.......
     a2c:	0e fe ff 0f fe ff 0f fe ff 0f fe ff 0f 00 00 0e     ................
     a3c:	00 00 0e 00 00 0e 00 00 0e 00 00 00 0e 00 00 00     ................
     a4c:	60 00 0f 78 80 0f 7c c0 0f 7c e0 0f 1e f0 0f 0e     `..x..|..|......
     a5c:	f8 0e 0e 7c 0e 0e 3e 0e 1e 1f 0e fe 0f 0e fc 07     ...|..>.........
     a6c:	0e f8 03 0e f0 01 0e 00 00 00 0e 00 00 00 30 80     ..............0.
     a7c:	01 38 80 03 3c 80 07 3c 80 0f 1e 00 0f 0e 0e 0e     .8..<..<........
     a8c:	0e 0e 0e 0e 0e 0e 1e 1f 0f fe ff 0f fc fb 07 fc     ................
     a9c:	f9 03 f0 e0 01 00 00 00 0f 00 00 00 00 f0 00 00     ................
     aac:	f8 00 00 fe 00 80 ef 00 c0 e7 00 f0 e1 00 7c e0     ..............|.
     abc:	00 3e e0 00 fe ff 0f fe ff 0f fe ff 0f fe ff 0f     .>..............
     acc:	00 e0 00 00 e0 00 0e 00 00 00 00 80 01 f8 87 03     ................
     adc:	fe 87 07 fe 87 0f fe 07 0f 0e 03 0e 8e 03 0e 8e     ................
     aec:	03 0e 8e 07 0f 8e ff 07 0e ff 07 0e fe 03 00 fc     ................
     afc:	00 00 00 00 0e 00 00 00 c0 7f 00 f0 ff 01 f8 ff     ................
     b0c:	07 fc ff 07 3e 0e 0f 0e 07 0e 0e 07 0e 0e 07 0e     ....>...........
     b1c:	1e 0f 0f 3e ff 0f 3c fe 07 38 fe 03 30 f8 01 00     ...>..<..8..0...
     b2c:	00 00 0e 00 00 00 0e 00 00 0e 00 00 0e 00 00 0e     ................
     b3c:	00 0f 0e e0 0f 0e f8 0f 0e fe 0f 8e ff 00 ce 0f     ................
     b4c:	00 fe 03 00 fe 00 00 3e 00 00 1e 00 00 00 00 00     .......>........
     b5c:	0e 00 00 00 f0 e0 01 f8 fb 03 fc fb 07 fe ff 0f     ................
     b6c:	1e 1f 0f 0e 0e 0e 0e 0e 0e 0e 0e 0e 1e 1f 0f fe     ................
     b7c:	ff 0f fc fb 07 fc fb 03 f0 e0 01 00 00 00 0e 00     ................
     b8c:	00 00 f0 83 01 f8 87 03 fc 8f 07 fe 9f 0f 1e 1e     ................
     b9c:	0f 0e 1c 0e 0e 1c 0e 0e 1c 0e 1e 8e 0f fc ff 07     ................
     bac:	fc ff 03 f8 ff 01 c0 7f 00 00 00 00                 ............

00000bb8 <__ctors_end>:
     bb8:	11 24       	eor	r1, r1
     bba:	1f be       	out	0x3f, r1	; 63
     bbc:	cf ef       	ldi	r28, 0xFF	; 255
     bbe:	d8 e0       	ldi	r29, 0x08	; 8
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	cd bf       	out	0x3d, r28	; 61

00000bc4 <__do_copy_data>:
     bc4:	11 e0       	ldi	r17, 0x01	; 1
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b1 e0       	ldi	r27, 0x01	; 1
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f8 e3       	ldi	r31, 0x38	; 56
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <.do_copy_data_start>

00000bd0 <.do_copy_data_loop>:
     bd0:	05 90       	lpm	r0, Z+
     bd2:	0d 92       	st	X+, r0

00000bd4 <.do_copy_data_start>:
     bd4:	ac 36       	cpi	r26, 0x6C	; 108
     bd6:	b1 07       	cpc	r27, r17
     bd8:	d9 f7       	brne	.-10     	; 0xbd0 <.do_copy_data_loop>

00000bda <__do_clear_bss>:
     bda:	13 e0       	ldi	r17, 0x03	; 3
     bdc:	ac e6       	ldi	r26, 0x6C	; 108
     bde:	b1 e0       	ldi	r27, 0x01	; 1
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <.do_clear_bss_start>

00000be2 <.do_clear_bss_loop>:
     be2:	1d 92       	st	X+, r1

00000be4 <.do_clear_bss_start>:
     be4:	a9 39       	cpi	r26, 0x99	; 153
     be6:	b1 07       	cpc	r27, r17
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <.do_clear_bss_loop>
     bea:	0e 94 c2 07 	call	0xf84	; 0xf84 <main>
     bee:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <_exit>

00000bf2 <__bad_interrupt>:
     bf2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bf6 <__vector_11>:
}

uint8_t ms, ms10,ms100,sec,min,entprell, state;

ISR (TIMER1_COMPA_vect)
{
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
	ms10++;
     c04:	90 91 75 01 	lds	r25, 0x0175
     c08:	9f 5f       	subi	r25, 0xFF	; 255
     c0a:	90 93 75 01 	sts	0x0175, r25
	if(entprell != 0)entprell--;
     c0e:	80 91 76 01 	lds	r24, 0x0176
     c12:	88 23       	and	r24, r24
     c14:	19 f0       	breq	.+6      	; 0xc1c <__vector_11+0x26>
     c16:	81 50       	subi	r24, 0x01	; 1
     c18:	80 93 76 01 	sts	0x0176, r24
	if(ms10==10)	//10ms
     c1c:	9a 30       	cpi	r25, 0x0A	; 10
     c1e:	39 f4       	brne	.+14     	; 0xc2e <__vector_11+0x38>
	{
		ms10=0;
     c20:	10 92 75 01 	sts	0x0175, r1
		ms100++;
     c24:	80 91 78 01 	lds	r24, 0x0178
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	80 93 78 01 	sts	0x0178, r24
	}
    if(ms100==10)	//100ms
     c2e:	80 91 78 01 	lds	r24, 0x0178
     c32:	8a 30       	cpi	r24, 0x0A	; 10
     c34:	39 f4       	brne	.+14     	; 0xc44 <__vector_11+0x4e>
	{
		ms100=0;
     c36:	10 92 78 01 	sts	0x0178, r1
		sec++;
     c3a:	80 91 79 01 	lds	r24, 0x0179
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	80 93 79 01 	sts	0x0179, r24
	}
	if(sec==10)	//Minute
     c44:	90 91 79 01 	lds	r25, 0x0179
     c48:	9a 30       	cpi	r25, 0x0A	; 10
     c4a:	69 f4       	brne	.+26     	; 0xc66 <__vector_11+0x70>
	{
		sec=0;
     c4c:	10 92 79 01 	sts	0x0179, r1
		min++;
     c50:	80 91 77 01 	lds	r24, 0x0177
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	80 93 77 01 	sts	0x0177, r24
		if(state==11)state=10;
     c5a:	80 91 74 01 	lds	r24, 0x0174
     c5e:	8b 30       	cpi	r24, 0x0B	; 11
     c60:	11 f4       	brne	.+4      	; 0xc66 <__vector_11+0x70>
     c62:	90 93 74 01 	sts	0x0174, r25
	}
}
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <level>:
 
 void level()
 {
	unsigned char n;
	
	Level = (score / 5) + 1;
     c74:	80 91 6e 01 	lds	r24, 0x016E
     c78:	65 e0       	ldi	r22, 0x05	; 5
     c7a:	0e 94 4d 18 	call	0x309a	; 0x309a <__udivmodqi4>
     c7e:	28 2f       	mov	r18, r24
     c80:	8f 5f       	subi	r24, 0xFF	; 255
     c82:	80 93 8e 01 	sts	0x018E, r24
	
	if(Level <= 4){l = Level; laenge_rect = 15;}
     c86:	85 30       	cpi	r24, 0x05	; 5
     c88:	20 f4       	brcc	.+8      	; 0xc92 <level+0x1e>
     c8a:	80 93 72 01 	sts	0x0172, r24
     c8e:	8f e0       	ldi	r24, 0x0F	; 15
     c90:	06 c0       	rjmp	.+12     	; 0xc9e <level+0x2a>
	if(Level > 4) {n = (Level - 5); laenge_rect = ((Level - n)*2);}
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	24 50       	subi	r18, 0x04	; 4
     c96:	82 1b       	sub	r24, r18
     c98:	91 09       	sbc	r25, r1
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	80 93 91 01 	sts	0x0191, r24
     ca2:	08 95       	ret

00000ca4 <balli>:
 }
void balli()
{
     ca4:	4f 92       	push	r4
     ca6:	5f 92       	push	r5
     ca8:	6f 92       	push	r6
     caa:	7f 92       	push	r7
     cac:	8f 92       	push	r8
     cae:	9f 92       	push	r9
     cb0:	af 92       	push	r10
     cb2:	bf 92       	push	r11
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
	for(a=0;a<l;a++)
     cc4:	80 91 72 01 	lds	r24, 0x0172
     cc8:	68 2e       	mov	r6, r24
     cca:	77 24       	eor	r7, r7
	{
		//abprallen bei erreichen nullpunkt oder endpunkt der x-Achse
		if ((bale[a].x == (x2 - bale[a].radius)) || (bale[a].x == (x1 + bale[a].radius))) bale[a].dx*=-1;//Richtungsänderung y Achse
     ccc:	80 91 03 01 	lds	r24, 0x0103
     cd0:	88 2e       	mov	r8, r24
     cd2:	99 24       	eor	r9, r9
     cd4:	80 91 6f 01 	lds	r24, 0x016F
     cd8:	a8 2e       	mov	r10, r24
     cda:	bb 24       	eor	r11, r11
		
		//abprallen bei erreichen nullpunkt oder endpunkt der y-Achse
		if ((bale[a].y == (y2 - bale[a].radius)) || (bale[a].y == (y1 + bale[a].radius))) bale[a].dy*=-1;//Richtungsänderung x Achse
     cdc:	80 91 04 01 	lds	r24, 0x0104
     ce0:	c8 2e       	mov	r12, r24
     ce2:	dd 24       	eor	r13, r13
     ce4:	80 91 70 01 	lds	r24, 0x0170
     ce8:	e8 2e       	mov	r14, r24
     cea:	ff 24       	eor	r15, r15
		bale[a].x+=bale[a].dx;
		bale[a].y+=bale[a].dy;
		
		//abprallen bei erreichen des Balkens
		if(((bale[a].x >= z) && (bale[a].x <= (z +15))) && (bale[a].y == (y3 - bale[a].radius)))
     cec:	00 91 6d 01 	lds	r16, 0x016D
     cf0:	a0 2f       	mov	r26, r16
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	1f 96       	adiw	r26, 0x0f	; 15
     cf6:	80 91 05 01 	lds	r24, 0x0105
     cfa:	c8 2f       	mov	r28, r24
     cfc:	d0 e0       	ldi	r29, 0x00	; 0
     cfe:	10 91 6e 01 	lds	r17, 0x016E
     d02:	ea e7       	ldi	r30, 0x7A	; 122
     d04:	f1 e0       	ldi	r31, 0x01	; 1
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	45 c0       	rjmp	.+138    	; 0xd96 <balli+0xf2>
void balli()
{
	for(a=0;a<l;a++)
	{
		//abprallen bei erreichen nullpunkt oder endpunkt der x-Achse
		if ((bale[a].x == (x2 - bale[a].radius)) || (bale[a].x == (x1 + bale[a].radius))) bale[a].dx*=-1;//Richtungsänderung y Achse
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	84 81       	ldd	r24, Z+4	; 0x04
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	c4 01       	movw	r24, r8
     d1a:	82 1b       	sub	r24, r18
     d1c:	93 0b       	sbc	r25, r19
     d1e:	48 17       	cp	r20, r24
     d20:	59 07       	cpc	r21, r25
     d22:	29 f0       	breq	.+10     	; 0xd2e <balli+0x8a>
     d24:	2a 0d       	add	r18, r10
     d26:	3b 1d       	adc	r19, r11
     d28:	42 17       	cp	r20, r18
     d2a:	53 07       	cpc	r21, r19
     d2c:	19 f4       	brne	.+6      	; 0xd34 <balli+0x90>
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	81 95       	neg	r24
     d32:	82 83       	std	Z+2, r24	; 0x02
		
		//abprallen bei erreichen nullpunkt oder endpunkt der y-Achse
		if ((bale[a].y == (y2 - bale[a].radius)) || (bale[a].y == (y1 + bale[a].radius))) bale[a].dy*=-1;//Richtungsänderung x Achse
     d34:	81 81       	ldd	r24, Z+1	; 0x01
     d36:	48 2f       	mov	r20, r24
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	84 81       	ldd	r24, Z+4	; 0x04
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	c6 01       	movw	r24, r12
     d42:	82 1b       	sub	r24, r18
     d44:	93 0b       	sbc	r25, r19
     d46:	48 17       	cp	r20, r24
     d48:	59 07       	cpc	r21, r25
     d4a:	29 f0       	breq	.+10     	; 0xd56 <balli+0xb2>
     d4c:	2e 0d       	add	r18, r14
     d4e:	3f 1d       	adc	r19, r15
     d50:	42 17       	cp	r20, r18
     d52:	53 07       	cpc	r21, r19
     d54:	19 f4       	brne	.+6      	; 0xd5c <balli+0xb8>
     d56:	83 81       	ldd	r24, Z+3	; 0x03
     d58:	81 95       	neg	r24
     d5a:	83 83       	std	Z+3, r24	; 0x03
		bale[a].x+=bale[a].dx;
     d5c:	90 81       	ld	r25, Z
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	98 0f       	add	r25, r24
     d62:	90 83       	st	Z, r25
		bale[a].y+=bale[a].dy;
     d64:	43 81       	ldd	r20, Z+3	; 0x03
     d66:	21 81       	ldd	r18, Z+1	; 0x01
     d68:	24 0f       	add	r18, r20
     d6a:	21 83       	std	Z+1, r18	; 0x01
		
		//abprallen bei erreichen des Balkens
		if(((bale[a].x >= z) && (bale[a].x <= (z +15))) && (bale[a].y == (y3 - bale[a].radius)))
     d6c:	90 17       	cp	r25, r16
     d6e:	80 f0       	brcs	.+32     	; 0xd90 <balli+0xec>
     d70:	89 2f       	mov	r24, r25
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a8 17       	cp	r26, r24
     d76:	b9 07       	cpc	r27, r25
     d78:	5c f0       	brlt	.+22     	; 0xd90 <balli+0xec>
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	84 81       	ldd	r24, Z+4	; 0x04
     d7e:	2e 01       	movw	r4, r28
     d80:	48 1a       	sub	r4, r24
     d82:	51 08       	sbc	r5, r1
     d84:	24 15       	cp	r18, r4
     d86:	35 05       	cpc	r19, r5
     d88:	19 f4       	brne	.+6      	; 0xd90 <balli+0xec>
		{
			bale[a].dy*=-1;//richtungsanderung y achse
     d8a:	41 95       	neg	r20
     d8c:	43 83       	std	Z+3, r20	; 0x03
			score+=1;//1 Treffer
     d8e:	1f 5f       	subi	r17, 0xFF	; 255
     d90:	6f 5f       	subi	r22, 0xFF	; 255
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	35 96       	adiw	r30, 0x05	; 5
	if(Level <= 4){l = Level; laenge_rect = 15;}
	if(Level > 4) {n = (Level - 5); laenge_rect = ((Level - n)*2);}
 }
void balli()
{
	for(a=0;a<l;a++)
     d96:	66 15       	cp	r22, r6
     d98:	77 05       	cpc	r23, r7
     d9a:	0c f4       	brge	.+2      	; 0xd9e <balli+0xfa>
     d9c:	b7 cf       	rjmp	.-146    	; 0xd0c <balli+0x68>
     d9e:	10 93 6e 01 	sts	0x016E, r17
     da2:	70 93 90 01 	sts	0x0190, r23
     da6:	60 93 8f 01 	sts	0x018F, r22
		{
			bale[a].dy*=-1;//richtungsanderung y achse
			score+=1;//1 Treffer
		}
	}
} 
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	9f 90       	pop	r9
     dc0:	8f 90       	pop	r8
     dc2:	7f 90       	pop	r7
     dc4:	6f 90       	pop	r6
     dc6:	5f 90       	pop	r5
     dc8:	4f 90       	pop	r4
     dca:	08 95       	ret

00000dcc <schlaeger>:
void schlaeger()
{
     dcc:	20 91 6d 01 	lds	r18, 0x016D
     dd0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dd2:	40 e2       	ldi	r20, 0x20	; 32
     dd4:	5e e4       	ldi	r21, 0x4E	; 78
	unsigned char b;
	
	for( b= 0; b<7; b++)
	{
		if((!(PIND & (1<<PD5))) && (z < 69))z++;//Balnken nach rechts
     dd6:	4d 99       	sbic	0x09, 5	; 9
     dd8:	03 c0       	rjmp	.+6      	; 0xde0 <schlaeger+0x14>
     dda:	25 34       	cpi	r18, 0x45	; 69
     ddc:	08 f4       	brcc	.+2      	; 0xde0 <schlaeger+0x14>
     dde:	2f 5f       	subi	r18, 0xFF	; 255
		if((!(PIND & (1<<PD6))) && (z >  0))z--;//Balken nach links
     de0:	4e 99       	sbic	0x09, 6	; 9
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <schlaeger+0x1c>
     de4:	21 11       	cpse	r18, r1
     de6:	21 50       	subi	r18, 0x01	; 1
     de8:	ca 01       	movw	r24, r20
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <schlaeger+0x1e>
} 
void schlaeger()
{
	unsigned char b;
	
	for( b= 0; b<7; b++)
     dee:	3f 5f       	subi	r19, 0xFF	; 255
     df0:	37 30       	cpi	r19, 0x07	; 7
     df2:	89 f7       	brne	.-30     	; 0xdd6 <schlaeger+0xa>
     df4:	20 93 6d 01 	sts	0x016D, r18
	{
		if((!(PIND & (1<<PD5))) && (z < 69))z++;//Balnken nach rechts
		if((!(PIND & (1<<PD6))) && (z >  0))z--;//Balken nach links
		_delay_ms(5);
	}
}
     df8:	08 95       	ret

00000dfa <ausgabe>:

void ausgabe()
{
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <ausgabe+0xe>
     e08:	0f 92       	push	r0
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
	glcd_clear_buffer();//Display löschen
     e0e:	0e 94 ed 08 	call	0x11da	; 0x11da <glcd_clear_buffer>
	char string [3];
	
	//Schläger
	glcd_draw_rect(z, 45, laenge_rect, 3, 1);
     e12:	80 91 6d 01 	lds	r24, 0x016D
     e16:	6d e2       	ldi	r22, 0x2D	; 45
     e18:	40 91 91 01 	lds	r20, 0x0191
     e1c:	23 e0       	ldi	r18, 0x03	; 3
     e1e:	01 e0       	ldi	r16, 0x01	; 1
     e20:	0e 94 03 11 	call	0x2206	; 0x2206 <glcd_draw_rect>
	
	//Score
	sprintf(string, "%d", score);//Score in string speichern
     e24:	00 d0       	rcall	.+0      	; 0xe26 <ausgabe+0x2c>
     e26:	00 d0       	rcall	.+0      	; 0xe28 <ausgabe+0x2e>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <ausgabe+0x30>
     e2a:	ed b7       	in	r30, 0x3d	; 61
     e2c:	fe b7       	in	r31, 0x3e	; 62
     e2e:	31 96       	adiw	r30, 0x01	; 1
     e30:	8e 01       	movw	r16, r28
     e32:	0f 5f       	subi	r16, 0xFF	; 255
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	ad b7       	in	r26, 0x3d	; 61
     e38:	be b7       	in	r27, 0x3e	; 62
     e3a:	12 96       	adiw	r26, 0x02	; 2
     e3c:	1c 93       	st	X, r17
     e3e:	0e 93       	st	-X, r16
     e40:	11 97       	sbiw	r26, 0x01	; 1
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	e5 2e       	mov	r14, r21
     e46:	51 e0       	ldi	r21, 0x01	; 1
     e48:	f5 2e       	mov	r15, r21
     e4a:	f3 82       	std	Z+3, r15	; 0x03
     e4c:	e2 82       	std	Z+2, r14	; 0x02
     e4e:	80 91 6e 01 	lds	r24, 0x016E
     e52:	84 83       	std	Z+4, r24	; 0x04
     e54:	15 82       	std	Z+5, r1	; 0x05
     e56:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <sprintf>
	glcd_draw_string_xy(20, 0, string);//String ausgeben
     e5a:	8d b7       	in	r24, 0x3d	; 61
     e5c:	9e b7       	in	r25, 0x3e	; 62
     e5e:	06 96       	adiw	r24, 0x06	; 6
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	9e bf       	out	0x3e, r25	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	8d bf       	out	0x3d, r24	; 61
     e6a:	84 e1       	ldi	r24, 0x14	; 20
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	a8 01       	movw	r20, r16
     e70:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_draw_string_xy>
	
	//Level
	sprintf(string, "%d", Level);//Score in string speichern
     e74:	00 d0       	rcall	.+0      	; 0xe76 <ausgabe+0x7c>
     e76:	00 d0       	rcall	.+0      	; 0xe78 <ausgabe+0x7e>
     e78:	00 d0       	rcall	.+0      	; 0xe7a <ausgabe+0x80>
     e7a:	ed b7       	in	r30, 0x3d	; 61
     e7c:	fe b7       	in	r31, 0x3e	; 62
     e7e:	31 96       	adiw	r30, 0x01	; 1
     e80:	ad b7       	in	r26, 0x3d	; 61
     e82:	be b7       	in	r27, 0x3e	; 62
     e84:	12 96       	adiw	r26, 0x02	; 2
     e86:	1c 93       	st	X, r17
     e88:	0e 93       	st	-X, r16
     e8a:	11 97       	sbiw	r26, 0x01	; 1
     e8c:	f3 82       	std	Z+3, r15	; 0x03
     e8e:	e2 82       	std	Z+2, r14	; 0x02
     e90:	80 91 8e 01 	lds	r24, 0x018E
     e94:	84 83       	std	Z+4, r24	; 0x04
     e96:	15 82       	std	Z+5, r1	; 0x05
     e98:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <sprintf>
	glcd_draw_string_xy(0, 0, string);//String ausgeben
     e9c:	8d b7       	in	r24, 0x3d	; 61
     e9e:	9e b7       	in	r25, 0x3e	; 62
     ea0:	06 96       	adiw	r24, 0x06	; 6
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	9e bf       	out	0x3e, r25	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	8d bf       	out	0x3d, r24	; 61
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	a8 01       	movw	r20, r16
     eb2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_draw_string_xy>
	
	//laenge rect
	sprintf(string, "%d", laenge_rect);//Score in string speichern
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <ausgabe+0xbe>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <ausgabe+0xc0>
     eba:	00 d0       	rcall	.+0      	; 0xebc <ausgabe+0xc2>
     ebc:	ed b7       	in	r30, 0x3d	; 61
     ebe:	fe b7       	in	r31, 0x3e	; 62
     ec0:	31 96       	adiw	r30, 0x01	; 1
     ec2:	ad b7       	in	r26, 0x3d	; 61
     ec4:	be b7       	in	r27, 0x3e	; 62
     ec6:	12 96       	adiw	r26, 0x02	; 2
     ec8:	1c 93       	st	X, r17
     eca:	0e 93       	st	-X, r16
     ecc:	11 97       	sbiw	r26, 0x01	; 1
     ece:	f3 82       	std	Z+3, r15	; 0x03
     ed0:	e2 82       	std	Z+2, r14	; 0x02
     ed2:	80 91 91 01 	lds	r24, 0x0191
     ed6:	84 83       	std	Z+4, r24	; 0x04
     ed8:	15 82       	std	Z+5, r1	; 0x05
     eda:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <sprintf>
	glcd_draw_string_xy(60, 0, string);//String ausgeben
     ede:	8d b7       	in	r24, 0x3d	; 61
     ee0:	9e b7       	in	r25, 0x3e	; 62
     ee2:	06 96       	adiw	r24, 0x06	; 6
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	9e bf       	out	0x3e, r25	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	8d bf       	out	0x3d, r24	; 61
     eee:	8c e3       	ldi	r24, 0x3C	; 60
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	a8 01       	movw	r20, r16
     ef4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_draw_string_xy>
	
	//Kreis
	for(a=0;a<l;a++)
     ef8:	10 92 90 01 	sts	0x0190, r1
     efc:	10 92 8f 01 	sts	0x018F, r1
     f00:	2b c0       	rjmp	.+86     	; 0xf58 <ausgabe+0x15e>
	{
		glcd_draw_circle(bale[a].x, bale[a].y, bale[a].radius,1);//Kreis zeichnen
     f02:	f9 01       	movw	r30, r18
     f04:	ee 0f       	add	r30, r30
     f06:	ff 1f       	adc	r31, r31
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	e6 58       	subi	r30, 0x86	; 134
     f12:	fe 4f       	sbci	r31, 0xFE	; 254
     f14:	80 81       	ld	r24, Z
     f16:	61 81       	ldd	r22, Z+1	; 0x01
     f18:	44 81       	ldd	r20, Z+4	; 0x04
     f1a:	21 e0       	ldi	r18, 0x01	; 1
     f1c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <glcd_draw_circle>
		glcd_fill_circle(bale[a].x, bale[a].y, bale[a].radius,1);//Kreis füllen
     f20:	80 91 8f 01 	lds	r24, 0x018F
     f24:	90 91 90 01 	lds	r25, 0x0190
     f28:	fc 01       	movw	r30, r24
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	e8 0f       	add	r30, r24
     f34:	f9 1f       	adc	r31, r25
     f36:	e6 58       	subi	r30, 0x86	; 134
     f38:	fe 4f       	sbci	r31, 0xFE	; 254
     f3a:	80 81       	ld	r24, Z
     f3c:	61 81       	ldd	r22, Z+1	; 0x01
     f3e:	44 81       	ldd	r20, Z+4	; 0x04
     f40:	21 e0       	ldi	r18, 0x01	; 1
     f42:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <glcd_fill_circle>
	//laenge rect
	sprintf(string, "%d", laenge_rect);//Score in string speichern
	glcd_draw_string_xy(60, 0, string);//String ausgeben
	
	//Kreis
	for(a=0;a<l;a++)
     f46:	80 91 8f 01 	lds	r24, 0x018F
     f4a:	90 91 90 01 	lds	r25, 0x0190
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	90 93 90 01 	sts	0x0190, r25
     f54:	80 93 8f 01 	sts	0x018F, r24
     f58:	20 91 8f 01 	lds	r18, 0x018F
     f5c:	30 91 90 01 	lds	r19, 0x0190
     f60:	80 91 72 01 	lds	r24, 0x0172
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	5c f2       	brlt	.-106    	; 0xf02 <ausgabe+0x108>
	{
		glcd_draw_circle(bale[a].x, bale[a].y, bale[a].radius,1);//Kreis zeichnen
		glcd_fill_circle(bale[a].x, bale[a].y, bale[a].radius,1);//Kreis füllen
	}
	glcd_write();//Display schreiben
     f6c:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	08 95       	ret

00000f84 <main>:

int main(void)
{
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
	
	/* Backlight pin PL3, set as output, set high for 100% output */
	DDRB |= (1<<PB2);
     f8e:	22 9a       	sbi	0x04, 2	; 4
	//PORTB |= (1<<PB2);
	PORTB &= ~(1<<PB2);
     f90:	2a 98       	cbi	0x05, 2	; 5
	
	DDRC &= ~(1<<PC0); 	//Eingang Hallsensor
     f92:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1<<PC0);	//Pullup Hallsensor einschalten
     f94:	40 9a       	sbi	0x08, 0	; 8
	
	DDRC |=(1<<PC1); 	//Eingang Hallsensor
     f96:	39 9a       	sbi	0x07, 1	; 7
	PORTC |= (1<<PC1);	//Pullup Hallsensor einschalten
     f98:	41 9a       	sbi	0x08, 1	; 8
	
	
	DDRD &= ~((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//Taster 1-3
     f9a:	8a b1       	in	r24, 0x0a	; 10
     f9c:	8b 79       	andi	r24, 0x9B	; 155
     f9e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= ((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//PUllups für Taster einschalten
     fa0:	8b b1       	in	r24, 0x0b	; 11
     fa2:	84 66       	ori	r24, 0x64	; 100
     fa4:	8b b9       	out	0x0b, r24	; 11
	
	DDRD &= ~(1<<PD4); //T0 Counter Input
     fa6:	54 98       	cbi	0x0a, 4	; 10
	TCCR0B |= (1<<CS02) | (1<<CS01) | (1<<CS00);//Counter 0 enabled clock on rising edge
     fa8:	85 b5       	in	r24, 0x25	; 37
     faa:	87 60       	ori	r24, 0x07	; 7
     fac:	85 bd       	out	0x25, r24	; 37
	
	//Timer 1 Configuration
	OCR1A = 0x3D08;	//OCR1A = 0x3D08;==1sec
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	9d e3       	ldi	r25, 0x3D	; 61
     fb2:	90 93 89 00 	sts	0x0089, r25
     fb6:	80 93 88 00 	sts	0x0088, r24
	
    TCCR1B |= (1 << WGM12);
     fba:	80 91 81 00 	lds	r24, 0x0081
     fbe:	88 60       	ori	r24, 0x08	; 8
     fc0:	80 93 81 00 	sts	0x0081, r24
    // Mode 4, CTC on OCR1A

    TIMSK1 |= (1 << OCIE1A);
     fc4:	80 91 6f 00 	lds	r24, 0x006F
     fc8:	82 60       	ori	r24, 0x02	; 2
     fca:	80 93 6f 00 	sts	0x006F, r24
    //Set interrupt on compare match

    TCCR1B |= (1 << CS12) | (1 << CS10);
     fce:	80 91 81 00 	lds	r24, 0x0081
     fd2:	85 60       	ori	r24, 0x05	; 5
     fd4:	80 93 81 00 	sts	0x0081, r24
    // set prescaler to 1024 and start the timer

    sei();
     fd8:	78 94       	sei
static void setup(void);

static void setup(void)
{
	/* Set up glcd, also sets up SPI and relevent GPIO pins */
	glcd_init();
     fda:	0e 94 25 09 	call	0x124a	; 0x124a <glcd_init>
    sei();
    // enable interrupts
	
	setup();
	
	for(a=0;a<4;a++)
     fde:	10 92 90 01 	sts	0x0190, r1
     fe2:	10 92 8f 01 	sts	0x018F, r1
	{
		bale[a].radius = rand()/(RAND_MAX/10);
		bale[a].x= bale[a].radius+rand()/(RAND_MAX/(x2 - (2 * bale[a].radius)));
		bale[a].y= bale[a].radius+rand()/(RAND_MAX/(y2 - (2 * bale[a].radius)));
		
		bale[a].dx=-1;
     fe6:	ff 24       	eor	r15, r15
     fe8:	fa 94       	dec	r15
     fea:	5e c0       	rjmp	.+188    	; 0x10a8 <main+0x124>
	
	setup();
	
	for(a=0;a<4;a++)
	{
		bale[a].radius = rand()/(RAND_MAX/10);
     fec:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <rand>
     ff0:	fe 01       	movw	r30, r28
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	ec 0f       	add	r30, r28
     ffc:	fd 1f       	adc	r31, r29
     ffe:	e6 58       	subi	r30, 0x86	; 134
    1000:	fe 4f       	sbci	r31, 0xFE	; 254
    1002:	6c ec       	ldi	r22, 0xCC	; 204
    1004:	7c e0       	ldi	r23, 0x0C	; 12
    1006:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    100a:	64 83       	std	Z+4, r22	; 0x04
		bale[a].x= bale[a].radius+rand()/(RAND_MAX/(x2 - (2 * bale[a].radius)));
    100c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <rand>
    1010:	8c 01       	movw	r16, r24
    1012:	80 91 8f 01 	lds	r24, 0x018F
    1016:	90 91 90 01 	lds	r25, 0x0190
    101a:	fc 01       	movw	r30, r24
    101c:	ee 0f       	add	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	e8 0f       	add	r30, r24
    1026:	f9 1f       	adc	r31, r25
    1028:	e6 58       	subi	r30, 0x86	; 134
    102a:	fe 4f       	sbci	r31, 0xFE	; 254
    102c:	24 81       	ldd	r18, Z+4	; 0x04
    102e:	82 2f       	mov	r24, r18
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	60 91 03 01 	lds	r22, 0x0103
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	68 1b       	sub	r22, r24
    103e:	79 0b       	sbc	r23, r25
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	9f e7       	ldi	r25, 0x7F	; 127
    1044:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    1048:	c8 01       	movw	r24, r16
    104a:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    104e:	26 0f       	add	r18, r22
    1050:	20 83       	st	Z, r18
		bale[a].y= bale[a].radius+rand()/(RAND_MAX/(y2 - (2 * bale[a].radius)));
    1052:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <rand>
    1056:	8c 01       	movw	r16, r24
    1058:	20 91 8f 01 	lds	r18, 0x018F
    105c:	30 91 90 01 	lds	r19, 0x0190
    1060:	f9 01       	movw	r30, r18
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	ee 0f       	add	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	e2 0f       	add	r30, r18
    106c:	f3 1f       	adc	r31, r19
    106e:	e6 58       	subi	r30, 0x86	; 134
    1070:	fe 4f       	sbci	r31, 0xFE	; 254
    1072:	44 81       	ldd	r20, Z+4	; 0x04
    1074:	84 2f       	mov	r24, r20
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	60 91 04 01 	lds	r22, 0x0104
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	68 1b       	sub	r22, r24
    1084:	79 0b       	sbc	r23, r25
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	9f e7       	ldi	r25, 0x7F	; 127
    108a:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    108e:	c8 01       	movw	r24, r16
    1090:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    1094:	46 0f       	add	r20, r22
    1096:	41 83       	std	Z+1, r20	; 0x01
		
		bale[a].dx=-1;
    1098:	f2 82       	std	Z+2, r15	; 0x02
		bale[a].dy=-1;
    109a:	f3 82       	std	Z+3, r15	; 0x03
    sei();
    // enable interrupts
	
	setup();
	
	for(a=0;a<4;a++)
    109c:	2f 5f       	subi	r18, 0xFF	; 255
    109e:	3f 4f       	sbci	r19, 0xFF	; 255
    10a0:	30 93 90 01 	sts	0x0190, r19
    10a4:	20 93 8f 01 	sts	0x018F, r18
    10a8:	c0 91 8f 01 	lds	r28, 0x018F
    10ac:	d0 91 90 01 	lds	r29, 0x0190
    10b0:	c4 30       	cpi	r28, 0x04	; 4
    10b2:	d1 05       	cpc	r29, r1
    10b4:	0c f4       	brge	.+2      	; 0x10b8 <main+0x134>
    10b6:	9a cf       	rjmp	.-204    	; 0xfec <main+0x68>
		bale[a].dx=-1;
		bale[a].dy=-1;
		
	}//ende for
			
	glcd_tiny_set_font(Font5x7, 5, 7, 32, 127);
    10b8:	88 e6       	ldi	r24, 0x68	; 104
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	65 e0       	ldi	r22, 0x05	; 5
    10be:	47 e0       	ldi	r20, 0x07	; 7
    10c0:	20 e2       	ldi	r18, 0x20	; 32
    10c2:	0f e7       	ldi	r16, 0x7F	; 127
    10c4:	0e 94 6f 15 	call	0x2ade	; 0x2ade <glcd_tiny_set_font>
	
	while(1) 
	{
		
		
		PORTB = 0xFF;//Hintergrundlicht	
    10c8:	0f ef       	ldi	r16, 0xFF	; 255
    10ca:	05 b9       	out	0x05, r16	; 5
		level();
    10cc:	0e 94 3a 06 	call	0xc74	; 0xc74 <level>
		balli();
    10d0:	0e 94 52 06 	call	0xca4	; 0xca4 <balli>
		schlaeger();
    10d4:	0e 94 e6 06 	call	0xdcc	; 0xdcc <schlaeger>
		ausgabe();		
    10d8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <ausgabe>
    10dc:	f6 cf       	rjmp	.-20     	; 0x10ca <main+0x146>

000010de <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
    10de:	98 2f       	mov	r25, r24
    10e0:	84 35       	cpi	r24, 0x54	; 84
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <glcd_update_bbox+0x8>
    10e4:	93 e5       	ldi	r25, 0x53	; 83
    10e6:	44 35       	cpi	r20, 0x54	; 84
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <glcd_update_bbox+0xe>
    10ea:	43 e5       	ldi	r20, 0x53	; 83
    10ec:	60 33       	cpi	r22, 0x30	; 48
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <glcd_update_bbox+0x14>
    10f0:	6f e2       	ldi	r22, 0x2F	; 47
    10f2:	20 33       	cpi	r18, 0x30	; 48
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <glcd_update_bbox+0x1a>
    10f6:	2f e2       	ldi	r18, 0x2F	; 47
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
    10f8:	e0 91 90 03 	lds	r30, 0x0390
    10fc:	f0 91 91 03 	lds	r31, 0x0391
    1100:	80 81       	ld	r24, Z
    1102:	98 17       	cp	r25, r24
    1104:	08 f4       	brcc	.+2      	; 0x1108 <glcd_update_bbox+0x2a>
		glcd_bbox_selected->x_min = xmin;
    1106:	90 83       	st	Z, r25
	}		
	if (xmax > glcd_bbox_selected->x_max) {
    1108:	82 81       	ldd	r24, Z+2	; 0x02
    110a:	84 17       	cp	r24, r20
    110c:	08 f4       	brcc	.+2      	; 0x1110 <glcd_update_bbox+0x32>
		glcd_bbox_selected->x_max = xmax;
    110e:	42 83       	std	Z+2, r20	; 0x02
	}
	if (ymin < glcd_bbox_selected->y_min) {
    1110:	81 81       	ldd	r24, Z+1	; 0x01
    1112:	68 17       	cp	r22, r24
    1114:	08 f4       	brcc	.+2      	; 0x1118 <glcd_update_bbox+0x3a>
		glcd_bbox_selected->y_min = ymin;
    1116:	61 83       	std	Z+1, r22	; 0x01
	}		
	if (ymax > glcd_bbox_selected->y_max) {
    1118:	83 81       	ldd	r24, Z+3	; 0x03
    111a:	82 17       	cp	r24, r18
    111c:	08 f4       	brcc	.+2      	; 0x1120 <glcd_update_bbox+0x42>
		glcd_bbox_selected->y_max = ymax;
    111e:	23 83       	std	Z+3, r18	; 0x03
    1120:	08 95       	ret

00001122 <glcd_reset_bbox>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
    1122:	e0 91 90 03 	lds	r30, 0x0390
    1126:	f0 91 91 03 	lds	r31, 0x0391
    112a:	83 e5       	ldi	r24, 0x53	; 83
    112c:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
    112e:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
    1130:	8f e2       	ldi	r24, 0x2F	; 47
    1132:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
    1134:	13 82       	std	Z+3, r1	; 0x03
}
    1136:	08 95       	ret

00001138 <glcd_bbox_reset>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
    1138:	e0 91 90 03 	lds	r30, 0x0390
    113c:	f0 91 91 03 	lds	r31, 0x0391
    1140:	83 e5       	ldi	r24, 0x53	; 83
    1142:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
    1144:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
    1146:	8f e2       	ldi	r24, 0x2F	; 47
    1148:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
    114a:	13 82       	std	Z+3, r1	; 0x03
}

void glcd_bbox_reset() {
	glcd_reset_bbox();
}
    114c:	08 95       	ret

0000114e <glcd_bbox_refresh>:

void glcd_bbox_refresh() {
	/* Marks bounding box as entire screen, so on next glcd_write(), it writes the entire buffer to the LCD */
	glcd_bbox_selected->x_min = 0;
    114e:	e0 91 90 03 	lds	r30, 0x0390
    1152:	f0 91 91 03 	lds	r31, 0x0391
    1156:	10 82       	st	Z, r1
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
    1158:	83 e5       	ldi	r24, 0x53	; 83
    115a:	82 83       	std	Z+2, r24	; 0x02
	glcd_bbox_selected->y_min = 0;
    115c:	11 82       	std	Z+1, r1	; 0x01
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
    115e:	8f e2       	ldi	r24, 0x2F	; 47
    1160:	83 83       	std	Z+3, r24	; 0x03
}
    1162:	08 95       	ret

00001164 <glcd_select_screen>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
    1164:	90 93 8f 03 	sts	0x038F, r25
    1168:	80 93 8e 03 	sts	0x038E, r24
	glcd_bbox_selected = bbox;
    116c:	70 93 91 03 	sts	0x0391, r23
    1170:	60 93 90 03 	sts	0x0390, r22
}
    1174:	08 95       	ret

00001176 <glcd_scroll>:
		uint8_t x;
		for (x=0; x<GLCD_LCD_WIDTH; x++) {
			
		}
	}
}
    1176:	08 95       	ret

00001178 <glcd_scroll_line>:

void glcd_scroll_line(void)
{
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
		if (y < (number_of_rows - 1)) {
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
    1180:	64 e5       	ldi	r22, 0x54	; 84
    1182:	80 91 8e 03 	lds	r24, 0x038E
    1186:	90 91 8f 03 	lds	r25, 0x038F
void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
		if (y < (number_of_rows - 1)) {
    118a:	45 30       	cpi	r20, 0x05	; 5
    118c:	51 05       	cpc	r21, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <glcd_scroll_line+0x38>
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
    1190:	dc 01       	movw	r26, r24
    1192:	a2 0f       	add	r26, r18
    1194:	b3 1f       	adc	r27, r19
    1196:	2c 5a       	subi	r18, 0xAC	; 172
    1198:	3f 4f       	sbci	r19, 0xFF	; 255
    119a:	fc 01       	movw	r30, r24
    119c:	e2 0f       	add	r30, r18
    119e:	f3 1f       	adc	r31, r19
    11a0:	24 55       	subi	r18, 0x54	; 84
    11a2:	30 40       	sbci	r19, 0x00	; 0
    11a4:	84 e5       	ldi	r24, 0x54	; 84
    11a6:	01 90       	ld	r0, Z+
    11a8:	0d 92       	st	X+, r0
    11aa:	81 50       	subi	r24, 0x01	; 1
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <glcd_scroll_line+0x2e>
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <glcd_scroll_line+0x46>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
    11b0:	8c 55       	subi	r24, 0x5C	; 92
    11b2:	9e 4f       	sbci	r25, 0xFE	; 254
    11b4:	dc 01       	movw	r26, r24
    11b6:	86 2f       	mov	r24, r22
    11b8:	1d 92       	st	X+, r1
    11ba:	8a 95       	dec	r24
    11bc:	e9 f7       	brne	.-6      	; 0x11b8 <glcd_scroll_line+0x40>
    11be:	4f 5f       	subi	r20, 0xFF	; 255
    11c0:	5f 4f       	sbci	r21, 0xFF	; 255
    11c2:	2c 5a       	subi	r18, 0xAC	; 172
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255

void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
    11c6:	46 30       	cpi	r20, 0x06	; 6
    11c8:	51 05       	cpc	r21, r1
    11ca:	d9 f6       	brne	.-74     	; 0x1182 <glcd_scroll_line+0xa>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
		}
	}
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	43 e5       	ldi	r20, 0x53	; 83
    11d2:	2f e2       	ldi	r18, 0x2F	; 47
    11d4:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
}
    11d8:	08 95       	ret

000011da <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
    11da:	e0 91 8e 03 	lds	r30, 0x038E
    11de:	f0 91 8f 03 	lds	r31, 0x038F
    11e2:	88 ef       	ldi	r24, 0xF8	; 248
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	df 01       	movw	r26, r30
    11e8:	9c 01       	movw	r18, r24
    11ea:	1d 92       	st	X+, r1
    11ec:	21 50       	subi	r18, 0x01	; 1
    11ee:	30 40       	sbci	r19, 0x00	; 0
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <glcd_clear_buffer+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	43 e5       	ldi	r20, 0x53	; 83
    11f8:	2f e2       	ldi	r18, 0x2F	; 47
    11fa:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
}
    11fe:	08 95       	ret

00001200 <glcd_clear>:
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
    1200:	e0 91 8e 03 	lds	r30, 0x038E
    1204:	f0 91 8f 03 	lds	r31, 0x038F
    1208:	88 ef       	ldi	r24, 0xF8	; 248
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	df 01       	movw	r26, r30
    120e:	9c 01       	movw	r18, r24
    1210:	1d 92       	st	X+, r1
    1212:	21 50       	subi	r18, 0x01	; 1
    1214:	30 40       	sbci	r19, 0x00	; 0
    1216:	e1 f7       	brne	.-8      	; 0x1210 <glcd_clear+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	43 e5       	ldi	r20, 0x53	; 83
    121e:	2f e2       	ldi	r18, 0x2F	; 47
    1220:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
	glcd_write();
    1224:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
}
    1228:	08 95       	ret

0000122a <glcd_spi_write>:
	
}

void glcd_spi_write(uint8_t c)
{
	GLCD_SELECT();
    122a:	28 98       	cbi	0x05, 0	; 5
	SPDR = c;
    122c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); /* wait until transmission is complete */
    122e:	0d b4       	in	r0, 0x2d	; 45
    1230:	07 fe       	sbrs	r0, 7
    1232:	fd cf       	rjmp	.-6      	; 0x122e <glcd_spi_write+0x4>
	GLCD_DESELECT();	
    1234:	28 9a       	sbi	0x05, 0	; 5
}
    1236:	08 95       	ret

00001238 <glcd_reset>:

void glcd_reset(void)
{
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
    1238:	28 98       	cbi	0x05, 0	; 5
	GLCD_RESET_LOW();
    123a:	5f 98       	cbi	0x0b, 7	; 11
    123c:	80 ea       	ldi	r24, 0xA0	; 160
    123e:	9f e0       	ldi	r25, 0x0F	; 15
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <glcd_reset+0x8>
	delay_ms(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
    1244:	5f 9a       	sbi	0x0b, 7	; 11
	GLCD_DESELECT();	
    1246:	28 9a       	sbi	0x05, 0	; 5
}
    1248:	08 95       	ret

0000124a <glcd_init>:
	/*
	 * Set up SPI for AVR8
	 * Note: AVR's SS pin must be set to output, regardless of whether we
	 * actually use it. This is a requirement of SPI mster mode.
	 */
	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
    124a:	20 9a       	sbi	0x04, 0	; 4
	
	/*
	 *  Set MOSI, Master SS, SCK to output (otherwise SPI won't work)
	 *  Must be done even if native SS pin not used
	 */
	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
    124c:	23 9a       	sbi	0x04, 3	; 4
	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN);
    124e:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
    1250:	25 9a       	sbi	0x04, 5	; 4
		
	/* Set SS, DC and RST pins to output */
	sbi( DDR(CONTROLLER_SS_PORT), CONTROLLER_SS_PIN );
    1252:	20 9a       	sbi	0x04, 0	; 4
	sbi( DDR(CONTROLLER_DC_PORT), CONTROLLER_DC_PIN );
    1254:	21 9a       	sbi	0x04, 1	; 4
	sbi( DDR(CONTROLLER_RST_PORT), CONTROLLER_RST_PIN );
    1256:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Deselect LCD */
	GLCD_DESELECT();
    1258:	28 9a       	sbi	0x05, 0	; 5

	/*
	 * Max allowed SPI clock is 4 MHz from datasheet.
	 * Enable SPI, set master mode and clock rate to /4 (4MHz with F_CPU=8MHz)
	 */
	SPCR = (1<<SPE)|(1<<MSTR);
    125a:	80 e5       	ldi	r24, 0x50	; 80
    125c:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
    125e:	1d bc       	out	0x2d, r1	; 45
	
	glcd_PCD8544_init();
    1260:	0e 94 43 09 	call	0x1286	; 0x1286 <glcd_PCD8544_init>

	/* Select screen buffer */
	glcd_select_screen(glcd_buffer,&glcd_bbox);
    1264:	86 e9       	ldi	r24, 0x96	; 150
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	62 e9       	ldi	r22, 0x92	; 146
    126a:	71 e0       	ldi	r23, 0x01	; 1
    126c:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_select_screen>
	
	/* Clear screen, we are now ready to go */
	glcd_clear();
    1270:	0e 94 00 09 	call	0x1200	; 0x1200 <glcd_clear>
	
#else
	#error "Controller not supported"
#endif /* GLCD_CONTROLLER_* */
	
}
    1274:	08 95       	ret

00001276 <glcd_data>:
	glcd_spi_write(c);
}

void glcd_data(uint8_t c)
{
	GLCD_DC_HIGH();
    1276:	29 9a       	sbi	0x05, 1	; 5
	glcd_spi_write(c);
    1278:	0e 94 15 09 	call	0x122a	; 0x122a <glcd_spi_write>
}
    127c:	08 95       	ret

0000127e <glcd_command>:

#include "../glcd.h"

void glcd_command(uint8_t c)
{
	GLCD_DC_LOW();
    127e:	29 98       	cbi	0x05, 1	; 5
	glcd_spi_write(c);
    1280:	0e 94 15 09 	call	0x122a	; 0x122a <glcd_spi_write>
}
    1284:	08 95       	ret

00001286 <glcd_PCD8544_init>:

}

void glcd_PCD8544_init(void) {

	glcd_reset();
    1286:	0e 94 1c 09 	call	0x1238	; 0x1238 <glcd_reset>
	
	/* Get into the EXTENDED mode! */
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    128a:	81 e2       	ldi	r24, 0x21	; 33
    128c:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>

	/* LCD bias select (4 is optimal?) */
	glcd_command(PCD8544_SET_BIAS | 0x2);
    1290:	82 e1       	ldi	r24, 0x12	; 18
    1292:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>

	/* Set VOP (affects contrast) */
	glcd_command(PCD8544_SET_VOP | 60); /* Experimentally determined, play with this figure until contrast looks nice */
    1296:	8c eb       	ldi	r24, 0xBC	; 188
    1298:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>

	/* Back to standard instructions */
	glcd_command(PCD8544_FUNCTION_SET);
    129c:	80 e2       	ldi	r24, 0x20	; 32
    129e:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>

	/* Normal mode */
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    12a2:	8c e0       	ldi	r24, 0x0C	; 12
    12a4:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>
}
    12a8:	08 95       	ret

000012aa <glcd_write>:
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	00 e0       	ldi	r16, 0x00	; 0
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	c0 e0       	ldi	r28, 0x00	; 0
    12be:	d0 e0       	ldi	r29, 0x00	; 0

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    12c0:	e0 91 90 03 	lds	r30, 0x0390
    12c4:	f0 91 91 03 	lds	r31, 0x0391
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
    12c8:	88 e0       	ldi	r24, 0x08	; 8
    12ca:	e8 2e       	mov	r14, r24
    12cc:	f1 2c       	mov	r15, r1
    12ce:	e2 0e       	add	r14, r18
    12d0:	f3 1e       	adc	r15, r19

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    12d2:	81 81       	ldd	r24, Z+1	; 0x01
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	8e 15       	cp	r24, r14
    12d8:	9f 05       	cpc	r25, r15
    12da:	54 f5       	brge	.+84     	; 0x1330 <glcd_write+0x86>
			continue; /* Skip the entire bank */
		}

		if (glcd_bbox_selected->y_max < bank*8) {
    12dc:	83 81       	ldd	r24, Z+3	; 0x03
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	82 17       	cp	r24, r18
    12e2:	93 07       	cpc	r25, r19
    12e4:	64 f1       	brlt	.+88     	; 0x133e <glcd_write+0x94>
			break;    /* No more banks need updating */
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
    12e6:	80 2f       	mov	r24, r16
    12e8:	80 64       	ori	r24, 0x40	; 64
    12ea:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);
    12ee:	e0 91 90 03 	lds	r30, 0x0390
    12f2:	f0 91 91 03 	lds	r31, 0x0391
    12f6:	80 81       	ld	r24, Z
    12f8:	80 68       	ori	r24, 0x80	; 128
    12fa:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    12fe:	e0 91 90 03 	lds	r30, 0x0390
    1302:	f0 91 91 03 	lds	r31, 0x0391
    1306:	10 81       	ld	r17, Z
    1308:	0c c0       	rjmp	.+24     	; 0x1322 <glcd_write+0x78>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
    130a:	e0 91 8e 03 	lds	r30, 0x038E
    130e:	f0 91 8f 03 	lds	r31, 0x038F
    1312:	ec 0f       	add	r30, r28
    1314:	fd 1f       	adc	r31, r29
    1316:	e1 0f       	add	r30, r17
    1318:	f1 1d       	adc	r31, r1
    131a:	80 81       	ld	r24, Z
    131c:	0e 94 3b 09 	call	0x1276	; 0x1276 <glcd_data>
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    1320:	1f 5f       	subi	r17, 0xFF	; 255
    1322:	e0 91 90 03 	lds	r30, 0x0390
    1326:	f0 91 91 03 	lds	r31, 0x0391
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	81 17       	cp	r24, r17
    132e:	68 f7       	brcc	.-38     	; 0x130a <glcd_write+0x60>

void glcd_write()
{
	uint8_t bank;

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
    1330:	0f 5f       	subi	r16, 0xFF	; 255
    1332:	cc 5a       	subi	r28, 0xAC	; 172
    1334:	df 4f       	sbci	r29, 0xFF	; 255
    1336:	06 30       	cpi	r16, 0x06	; 6
    1338:	11 f0       	breq	.+4      	; 0x133e <glcd_write+0x94>
    133a:	97 01       	movw	r18, r14
    133c:	c1 cf       	rjmp	.-126    	; 0x12c0 <glcd_write+0x16>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
		}
	}

	glcd_reset_bbox();
    133e:	0e 94 91 08 	call	0x1122	; 0x1122 <glcd_reset_bbox>

}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	08 95       	ret

00001350 <glcd_set_x_address>:
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
}

void glcd_set_x_address(uint8_t x)
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
    1350:	80 68       	ori	r24, 0x80	; 128
    1352:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>
}
    1356:	08 95       	ret

00001358 <glcd_set_y_address>:
	glcd_command(PCD8544_FUNCTION_SET);
}

void glcd_set_y_address(uint8_t y)
{
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
    1358:	86 30       	cpi	r24, 0x06	; 6
    135a:	10 f0       	brcs	.+4      	; 0x1360 <glcd_set_y_address+0x8>
    135c:	85 e4       	ldi	r24, 0x45	; 69
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <glcd_set_y_address+0xa>
    1360:	80 64       	ori	r24, 0x40	; 64
    1362:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>
}
    1366:	08 95       	ret

00001368 <glcd_power_up>:
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
}

void glcd_power_up(void)
{
	glcd_command(PCD8544_FUNCTION_SET);
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>
}
    136e:	08 95       	ret

00001370 <glcd_power_down>:
}

void glcd_power_down(void)
{
	/* First, fill RAM with zeroes to ensure minimum specified current consumption */
	glcd_clear();
    1370:	0e 94 00 09 	call	0x1200	; 0x1200 <glcd_clear>

	/* Power down */
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
    1374:	84 e2       	ldi	r24, 0x24	; 36
    1376:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>
}
    137a:	08 95       	ret

0000137c <glcd_set_contrast>:
{
	GLCD_DC_HIGH();
	glcd_spi_write(c);
}

void glcd_set_contrast(uint8_t val) {
    137c:	1f 93       	push	r17
    137e:	18 2f       	mov	r17, r24
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    1380:	81 e2       	ldi	r24, 0x21	; 33
    1382:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>
	glcd_command(PCD8544_SET_VOP | (val&0x7f));
    1386:	81 2f       	mov	r24, r17
    1388:	80 68       	ori	r24, 0x80	; 128
    138a:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>
	glcd_command(PCD8544_FUNCTION_SET);
    138e:	80 e2       	ldi	r24, 0x20	; 32
    1390:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    1394:	8c e0       	ldi	r24, 0x0C	; 12
    1396:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_command>
}
    139a:	1f 91       	pop	r17
    139c:	08 95       	ret

0000139e <glcd_map>:
		delay_ms(delay);
	}
}

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x)
{
    139e:	28 2f       	mov	r18, r24
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	68 1b       	sub	r22, r24
    13a6:	71 09       	sbc	r23, r1
    13a8:	46 9f       	mul	r20, r22
    13aa:	c0 01       	movw	r24, r0
    13ac:	47 9f       	mul	r20, r23
    13ae:	90 0d       	add	r25, r0
    13b0:	56 9f       	mul	r21, r22
    13b2:	90 0d       	add	r25, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	6f ef       	ldi	r22, 0xFF	; 255
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
	return x1+(x2-x1)*x/255;	
}
    13be:	82 2f       	mov	r24, r18
    13c0:	86 0f       	add	r24, r22
    13c2:	08 95       	ret

000013c4 <glcd_scrolling_bar_graph>:
{
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_scrolling_bar_graph(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    13c4:	2f 92       	push	r2
    13c6:	3f 92       	push	r3
    13c8:	5f 92       	push	r5
    13ca:	6f 92       	push	r6
    13cc:	7f 92       	push	r7
    13ce:	8f 92       	push	r8
    13d0:	9f 92       	push	r9
    13d2:	af 92       	push	r10
    13d4:	bf 92       	push	r11
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	0f 92       	push	r0
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	88 2e       	mov	r8, r24
    13ee:	b6 2e       	mov	r11, r22
    13f0:	94 2e       	mov	r9, r20
    13f2:	c2 2e       	mov	r12, r18
    13f4:	50 2e       	mov	r5, r16
	uint8_t nx, ny;
	uint8_t color;
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
    13f6:	01 e0       	ldi	r16, 0x01	; 1
    13f8:	0e 94 03 11 	call	0x2206	; 0x2206 <glcd_draw_rect>
    13fc:	dd 24       	eor	r13, r13
    13fe:	d3 94       	inc	r13
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    1400:	0c 2d       	mov	r16, r12
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	38 01       	movw	r6, r16
    1406:	08 94       	sec
    1408:	61 08       	sbc	r6, r1
    140a:	71 08       	sbc	r7, r1
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    140c:	29 2c       	mov	r2, r9
    140e:	33 24       	eor	r3, r3
    1410:	08 94       	sec
    1412:	21 08       	sbc	r2, r1
    1414:	31 08       	sbc	r3, r1
    1416:	12 c0       	rjmp	.+36     	; 0x143c <glcd_scrolling_bar_graph+0x78>
			color = glcd_get_pixel(x+nx+1,y+ny);
    1418:	8f 2d       	mov	r24, r15
    141a:	8f 5f       	subi	r24, 0xFF	; 255
    141c:	6a 2d       	mov	r22, r10
    141e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <glcd_get_pixel>
    1422:	48 2f       	mov	r20, r24
			glcd_set_pixel(x+nx,y+ny,color);
    1424:	8f 2d       	mov	r24, r15
    1426:	6a 2d       	mov	r22, r10
    1428:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    142c:	e3 94       	inc	r14
    142e:	f3 94       	inc	r15
    1430:	8e 2d       	mov	r24, r14
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	82 15       	cp	r24, r2
    1436:	93 05       	cpc	r25, r3
    1438:	7c f3       	brlt	.-34     	; 0x1418 <glcd_scrolling_bar_graph+0x54>
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    143a:	d3 94       	inc	r13
    143c:	8d 2d       	mov	r24, r13
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	86 15       	cp	r24, r6
    1442:	97 05       	cpc	r25, r7
    1444:	34 f4       	brge	.+12     	; 0x1452 <glcd_scrolling_bar_graph+0x8e>
    1446:	f8 2c       	mov	r15, r8
    1448:	ee 24       	eor	r14, r14
    144a:	e3 94       	inc	r14
    144c:	ad 2c       	mov	r10, r13
    144e:	ab 0c       	add	r10, r11
    1450:	ee cf       	rjmp	.-36     	; 0x142e <glcd_scrolling_bar_graph+0x6a>
			color = glcd_get_pixel(x+nx+1,y+ny);
			glcd_set_pixel(x+nx,y+ny,color);
		}
	}
	
	val = val * (height-3) / 255;
    1452:	03 50       	subi	r16, 0x03	; 3
    1454:	10 40       	sbci	r17, 0x00	; 0
    1456:	85 2d       	mov	r24, r5
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9c 01       	movw	r18, r24
    145c:	02 9f       	mul	r16, r18
    145e:	c0 01       	movw	r24, r0
    1460:	03 9f       	mul	r16, r19
    1462:	90 0d       	add	r25, r0
    1464:	12 9f       	mul	r17, r18
    1466:	90 0d       	add	r25, r0
    1468:	11 24       	eor	r1, r1
    146a:	6f ef       	ldi	r22, 0xFF	; 255
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    1472:	26 2f       	mov	r18, r22
	
	/* Make sure we're not exceeding the size of box interior */
	if (val > (height-3)) {
    1474:	0f 5f       	subi	r16, 0xFF	; 255
    1476:	1f 4f       	sbci	r17, 0xFF	; 255
    1478:	86 2f       	mov	r24, r22
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	80 17       	cp	r24, r16
    147e:	91 07       	cpc	r25, r17
    1480:	14 f0       	brlt	.+4      	; 0x1486 <glcd_scrolling_bar_graph+0xc2>
		val = height - 3;
    1482:	2c 2d       	mov	r18, r12
    1484:	23 50       	subi	r18, 0x03	; 3
	}
	
	/* Draw new bar - both black and white portions*/
	glcd_draw_line(x+width-2,y+height-2,x+width-2,y+height-2-val,BLACK);
    1486:	6c 2d       	mov	r22, r12
    1488:	6b 0d       	add	r22, r11
    148a:	98 2d       	mov	r25, r8
    148c:	92 50       	subi	r25, 0x02	; 2
    148e:	99 0d       	add	r25, r9
    1490:	16 2f       	mov	r17, r22
    1492:	12 1b       	sub	r17, r18
    1494:	62 50       	subi	r22, 0x02	; 2
    1496:	12 50       	subi	r17, 0x02	; 2
    1498:	89 2f       	mov	r24, r25
    149a:	49 2f       	mov	r20, r25
    149c:	21 2f       	mov	r18, r17
    149e:	01 e0       	ldi	r16, 0x01	; 1
    14a0:	99 83       	std	Y+1, r25	; 0x01
    14a2:	0e 94 c7 11 	call	0x238e	; 0x238e <glcd_draw_line>
	glcd_draw_line(x+width-2,y+height-3-val,x+width-2,y+1,WHITE);
    14a6:	11 50       	subi	r17, 0x01	; 1
    14a8:	b3 94       	inc	r11
    14aa:	99 81       	ldd	r25, Y+1	; 0x01
    14ac:	89 2f       	mov	r24, r25
    14ae:	61 2f       	mov	r22, r17
    14b0:	49 2f       	mov	r20, r25
    14b2:	2b 2d       	mov	r18, r11
    14b4:	00 e0       	ldi	r16, 0x00	; 0
    14b6:	0e 94 c7 11 	call	0x238e	; 0x238e <glcd_draw_line>
	
	/* Write to display */
	glcd_write();
    14ba:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
}
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	bf 90       	pop	r11
    14d2:	af 90       	pop	r10
    14d4:	9f 90       	pop	r9
    14d6:	8f 90       	pop	r8
    14d8:	7f 90       	pop	r7
    14da:	6f 90       	pop	r6
    14dc:	5f 90       	pop	r5
    14de:	3f 90       	pop	r3
    14e0:	2f 90       	pop	r2
    14e2:	08 95       	ret

000014e4 <glcd_scrolling_bar_graph_timing>:

void glcd_scrolling_bar_graph_timing(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val, uint8_t line_width, uint16_t delay)
{
    14e4:	7f 92       	push	r7
    14e6:	8f 92       	push	r8
    14e8:	9f 92       	push	r9
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	78 2e       	mov	r7, r24
    14fc:	86 2e       	mov	r8, r22
    14fe:	94 2e       	mov	r9, r20
    1500:	a2 2e       	mov	r10, r18
    1502:	b0 2e       	mov	r11, r16
    1504:	fe 2c       	mov	r15, r14
	uint8_t n;
	if (line_width == 0) {
    1506:	ee 20       	and	r14, r14
    1508:	11 f4       	brne	.+4      	; 0x150e <glcd_scrolling_bar_graph_timing+0x2a>
    150a:	ff 24       	eor	r15, r15
    150c:	f3 94       	inc	r15
    150e:	10 e0       	ldi	r17, 0x00	; 0
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <glcd_scrolling_bar_graph_timing+0x3e>
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
		glcd_scrolling_bar_graph(x,y,width,height,val);
    1512:	87 2d       	mov	r24, r7
    1514:	68 2d       	mov	r22, r8
    1516:	49 2d       	mov	r20, r9
    1518:	2a 2d       	mov	r18, r10
    151a:	0b 2d       	mov	r16, r11
    151c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <glcd_scrolling_bar_graph>
		line_width = 1;
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
    1520:	1f 5f       	subi	r17, 0xFF	; 255
    1522:	1f 15       	cp	r17, r15
    1524:	b0 f3       	brcs	.-20     	; 0x1512 <glcd_scrolling_bar_graph_timing+0x2e>
		glcd_scrolling_bar_graph(x,y,width,height,val);
	}
	
	if (delay) {
    1526:	c1 14       	cp	r12, r1
    1528:	d1 04       	cpc	r13, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <glcd_scrolling_bar_graph_timing+0x4a>
    152c:	41 c0       	rjmp	.+130    	; 0x15b0 <glcd_scrolling_bar_graph_timing+0xcc>
		delay_ms(delay);
    152e:	b6 01       	movw	r22, r12
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__floatunsisf>
    1538:	5b 01       	movw	r10, r22
    153a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	4a e7       	ldi	r20, 0x7A	; 122
    1542:	55 e4       	ldi	r21, 0x45	; 69
    1544:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__mulsf3>
    1548:	7b 01       	movw	r14, r22
    154a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__cmpsf2>
    1558:	88 23       	and	r24, r24
    155a:	1c f4       	brge	.+6      	; 0x1562 <glcd_scrolling_bar_graph_timing+0x7e>
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	24 c0       	rjmp	.+72     	; 0x15aa <glcd_scrolling_bar_graph_timing+0xc6>
		__ticks = 1;
	else if (__tmp > 65535)
    1562:	c8 01       	movw	r24, r16
    1564:	b7 01       	movw	r22, r14
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	3f ef       	ldi	r19, 0xFF	; 255
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	57 e4       	ldi	r21, 0x47	; 71
    156e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__gesf2>
    1572:	18 16       	cp	r1, r24
    1574:	b4 f4       	brge	.+44     	; 0x15a2 <glcd_scrolling_bar_graph_timing+0xbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1576:	c6 01       	movw	r24, r12
    1578:	b5 01       	movw	r22, r10
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e2       	ldi	r20, 0x20	; 32
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__mulsf3>
    1586:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__fixunssfsi>
    158a:	80 e9       	ldi	r24, 0x90	; 144
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	05 c0       	rjmp	.+10     	; 0x159a <glcd_scrolling_bar_graph_timing+0xb6>
    1590:	fc 01       	movw	r30, r24
    1592:	31 97       	sbiw	r30, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <glcd_scrolling_bar_graph_timing+0xae>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1596:	61 50       	subi	r22, 0x01	; 1
    1598:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159a:	61 15       	cp	r22, r1
    159c:	71 05       	cpc	r23, r1
    159e:	c1 f7       	brne	.-16     	; 0x1590 <glcd_scrolling_bar_graph_timing+0xac>
    15a0:	07 c0       	rjmp	.+14     	; 0x15b0 <glcd_scrolling_bar_graph_timing+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a2:	c8 01       	movw	r24, r16
    15a4:	b7 01       	movw	r22, r14
    15a6:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__fixunssfsi>
    15aa:	cb 01       	movw	r24, r22
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <glcd_scrolling_bar_graph_timing+0xc8>
	}
}
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	ff 90       	pop	r15
    15b6:	ef 90       	pop	r14
    15b8:	df 90       	pop	r13
    15ba:	cf 90       	pop	r12
    15bc:	bf 90       	pop	r11
    15be:	af 90       	pop	r10
    15c0:	9f 90       	pop	r9
    15c2:	8f 90       	pop	r8
    15c4:	7f 90       	pop	r7
    15c6:	08 95       	ret

000015c8 <glcd_bar_graph_vertical_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_bar_graph_vertical_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	e8 2e       	mov	r14, r24
    15d4:	f6 2e       	mov	r15, r22
    15d6:	d4 2e       	mov	r13, r20
    15d8:	12 2f       	mov	r17, r18
    15da:	40 2f       	mov	r20, r16
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
    15dc:	62 2f       	mov	r22, r18
    15de:	62 50       	subi	r22, 0x02	; 2
    15e0:	40 95       	com	r20
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	0e 94 cf 09 	call	0x139e	; 0x139e <glcd_map>
    15e8:	f8 0e       	add	r15, r24
    15ea:	18 1b       	sub	r17, r24
    15ec:	12 50       	subi	r17, 0x02	; 2
    15ee:	8e 2d       	mov	r24, r14
    15f0:	6f 2d       	mov	r22, r15
    15f2:	4d 2d       	mov	r20, r13
    15f4:	21 2f       	mov	r18, r17
    15f6:	01 e0       	ldi	r16, 0x01	; 1
    15f8:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <glcd_fill_rect>
}
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	08 95       	ret

00001608 <glcd_bar_graph_vertical>:
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
}

void glcd_bar_graph_vertical(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1608:	cf 92       	push	r12
    160a:	df 92       	push	r13
    160c:	ef 92       	push	r14
    160e:	ff 92       	push	r15
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	c8 2e       	mov	r12, r24
    1616:	d6 2e       	mov	r13, r22
    1618:	e4 2e       	mov	r14, r20
    161a:	12 2f       	mov	r17, r18
    161c:	f0 2e       	mov	r15, r16
	glcd_draw_rect(x, y, width, height, BLACK);
    161e:	01 e0       	ldi	r16, 0x01	; 1
    1620:	0e 94 03 11 	call	0x2206	; 0x2206 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
    1624:	61 2f       	mov	r22, r17
    1626:	62 50       	subi	r22, 0x02	; 2
    1628:	f0 94       	com	r15
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	4f 2d       	mov	r20, r15
    162e:	0e 94 cf 09 	call	0x139e	; 0x139e <glcd_map>
    1632:	68 2f       	mov	r22, r24
    1634:	6f 5f       	subi	r22, 0xFF	; 255
    1636:	6d 0d       	add	r22, r13
    1638:	9e ef       	ldi	r25, 0xFE	; 254
    163a:	e9 0e       	add	r14, r25
    163c:	18 1b       	sub	r17, r24
    163e:	12 50       	subi	r17, 0x02	; 2
    1640:	8c 2d       	mov	r24, r12
    1642:	8f 5f       	subi	r24, 0xFF	; 255
    1644:	4e 2d       	mov	r20, r14
    1646:	21 2f       	mov	r18, r17
    1648:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <glcd_fill_rect>
}
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	df 90       	pop	r13
    1656:	cf 90       	pop	r12
    1658:	08 95       	ret

0000165a <glcd_bar_graph_horizontal_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
}

void glcd_bar_graph_horizontal_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    165a:	ef 92       	push	r14
    165c:	ff 92       	push	r15
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	f8 2e       	mov	r15, r24
    1664:	e6 2e       	mov	r14, r22
    1666:	12 2f       	mov	r17, r18
	if (height < 3) {
    1668:	23 30       	cpi	r18, 0x03	; 3
    166a:	60 f0       	brcs	.+24     	; 0x1684 <glcd_bar_graph_horizontal_no_border+0x2a>
		return;
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	64 2f       	mov	r22, r20
    1670:	40 2f       	mov	r20, r16
    1672:	0e 94 cf 09 	call	0x139e	; 0x139e <glcd_map>
    1676:	48 2f       	mov	r20, r24
    1678:	8f 2d       	mov	r24, r15
    167a:	6e 2d       	mov	r22, r14
    167c:	21 2f       	mov	r18, r17
    167e:	01 e0       	ldi	r16, 0x01	; 1
    1680:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <glcd_fill_rect>
}
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	08 95       	ret

0000168e <glcd_bar_graph_horizontal>:
#include "glcd.h"

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x);

void glcd_bar_graph_horizontal(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    168e:	cf 92       	push	r12
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	c8 2e       	mov	r12, r24
    169c:	e6 2e       	mov	r14, r22
    169e:	14 2f       	mov	r17, r20
    16a0:	f2 2e       	mov	r15, r18
    16a2:	d0 2e       	mov	r13, r16
	if (height < 3) {
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	82 17       	cp	r24, r18
    16a8:	a0 f4       	brcc	.+40     	; 0x16d2 <glcd_bar_graph_horizontal+0x44>
		return;
	}
	glcd_draw_rect(x, y, width, height, BLACK);
    16aa:	8c 2d       	mov	r24, r12
    16ac:	01 e0       	ldi	r16, 0x01	; 1
    16ae:	0e 94 03 11 	call	0x2206	; 0x2206 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
    16b2:	12 50       	subi	r17, 0x02	; 2
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	61 2f       	mov	r22, r17
    16b8:	4d 2d       	mov	r20, r13
    16ba:	0e 94 cf 09 	call	0x139e	; 0x139e <glcd_map>
    16be:	48 2f       	mov	r20, r24
    16c0:	e3 94       	inc	r14
    16c2:	8e ef       	ldi	r24, 0xFE	; 254
    16c4:	f8 0e       	add	r15, r24
    16c6:	8c 2d       	mov	r24, r12
    16c8:	8f 5f       	subi	r24, 0xFF	; 255
    16ca:	6e 2d       	mov	r22, r14
    16cc:	2f 2d       	mov	r18, r15
    16ce:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <glcd_fill_rect>
}
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	df 90       	pop	r13
    16dc:	cf 90       	pop	r12
    16de:	08 95       	ret

000016e0 <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    16e0:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    16e2:	90 93 93 03 	sts	0x0393, r25
    16e6:	80 93 92 03 	sts	0x0392, r24
	font_current.width = width;
    16ea:	60 93 94 03 	sts	0x0394, r22
	font_current.height = height;
    16ee:	40 93 95 03 	sts	0x0395, r20
	font_current.start_char = start_char;
    16f2:	20 93 96 03 	sts	0x0396, r18
	font_current.end_char = end_char;
    16f6:	00 93 97 03 	sts	0x0397, r16
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	80 93 98 03 	sts	0x0398, r24
}
    1700:	0f 91       	pop	r16
    1702:	08 95       	ret

00001704 <glcd_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#else
void glcd_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#endif
{
    1704:	ef 92       	push	r14
    1706:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    1708:	90 93 93 03 	sts	0x0393, r25
    170c:	80 93 92 03 	sts	0x0392, r24
	font_current.width = width;
    1710:	60 93 94 03 	sts	0x0394, r22
	font_current.height = height;
    1714:	40 93 95 03 	sts	0x0395, r20
	font_current.start_char = start_char;
    1718:	20 93 96 03 	sts	0x0396, r18
	font_current.end_char = end_char;
    171c:	00 93 97 03 	sts	0x0397, r16
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
    1720:	e0 92 98 03 	sts	0x0398, r14
}
    1724:	0f 91       	pop	r16
    1726:	ef 90       	pop	r14
    1728:	08 95       	ret

0000172a <glcd_draw_char_xy>:

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    172a:	2f 92       	push	r2
    172c:	3f 92       	push	r3
    172e:	4f 92       	push	r4
    1730:	5f 92       	push	r5
    1732:	6f 92       	push	r6
    1734:	7f 92       	push	r7
    1736:	8f 92       	push	r8
    1738:	9f 92       	push	r9
    173a:	af 92       	push	r10
    173c:	bf 92       	push	r11
    173e:	cf 92       	push	r12
    1740:	df 92       	push	r13
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	63 97       	sbiw	r28, 0x13	; 19
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	48 2e       	mov	r4, r24
    1760:	e6 2e       	mov	r14, r22
    1762:	34 2f       	mov	r19, r20
	if (c < font_current.start_char || c > font_current.end_char) {
    1764:	50 91 96 03 	lds	r21, 0x0396
    1768:	45 17       	cp	r20, r21
    176a:	20 f0       	brcs	.+8      	; 0x1774 <glcd_draw_char_xy+0x4a>
    176c:	80 91 97 03 	lds	r24, 0x0397
    1770:	84 17       	cp	r24, r20
    1772:	08 f4       	brcc	.+2      	; 0x1776 <glcd_draw_char_xy+0x4c>
    1774:	3e e2       	ldi	r19, 0x2E	; 46
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
    1776:	80 91 98 03 	lds	r24, 0x0398
    177a:	88 23       	and	r24, r24
    177c:	09 f0       	breq	.+2      	; 0x1780 <glcd_draw_char_xy+0x56>
    177e:	58 c0       	rjmp	.+176    	; 0x1830 <glcd_draw_char_xy+0x106>
    1780:	04 2d       	mov	r16, r4
    1782:	ff 24       	eor	r15, r15
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    1784:	43 2e       	mov	r4, r19
    1786:	55 24       	eor	r5, r5
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1788:	60 2e       	mov	r6, r16
    178a:	77 24       	eor	r7, r7
    178c:	8e 2c       	mov	r8, r14
    178e:	99 24       	eor	r9, r9
    1790:	49 c0       	rjmp	.+146    	; 0x1824 <glcd_draw_char_xy+0xfa>
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    1792:	4f 2d       	mov	r20, r15
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	80 91 96 03 	lds	r24, 0x0396
    179a:	92 01       	movw	r18, r4
    179c:	28 1b       	sub	r18, r24
    179e:	31 09       	sbc	r19, r1
    17a0:	89 2f       	mov	r24, r25
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	bc 01       	movw	r22, r24
    17a6:	26 9f       	mul	r18, r22
    17a8:	c0 01       	movw	r24, r0
    17aa:	27 9f       	mul	r18, r23
    17ac:	90 0d       	add	r25, r0
    17ae:	36 9f       	mul	r19, r22
    17b0:	90 0d       	add	r25, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	84 0f       	add	r24, r20
    17b6:	95 1f       	adc	r25, r21
    17b8:	e0 91 92 03 	lds	r30, 0x0392
    17bc:	f0 91 93 03 	lds	r31, 0x0393
    17c0:	e8 0f       	add	r30, r24
    17c2:	f9 1f       	adc	r31, r25
    17c4:	e4 91       	lpm	r30, Z+
    17c6:	1e 2d       	mov	r17, r14
    17c8:	22 24       	eor	r2, r2
    17ca:	33 24       	eor	r3, r3
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    17cc:	5a 01       	movw	r10, r20
    17ce:	a6 0c       	add	r10, r6
    17d0:	b7 1c       	adc	r11, r7
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    17d2:	ce 2e       	mov	r12, r30
    17d4:	dd 24       	eor	r13, r13
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    17d6:	74 e5       	ldi	r23, 0x54	; 84
    17d8:	a7 16       	cp	r10, r23
    17da:	b1 04       	cpc	r11, r1
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <glcd_draw_char_xy+0xb6>
    17de:	70 c1       	rjmp	.+736    	; 0x1ac0 <glcd_draw_char_xy+0x396>
    17e0:	c1 01       	movw	r24, r2
    17e2:	88 0d       	add	r24, r8
    17e4:	99 1d       	adc	r25, r9
    17e6:	c0 97       	sbiw	r24, 0x30	; 48
    17e8:	0c f0       	brlt	.+2      	; 0x17ec <glcd_draw_char_xy+0xc2>
    17ea:	6a c1       	rjmp	.+724    	; 0x1ac0 <glcd_draw_char_xy+0x396>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    17ec:	c6 01       	movw	r24, r12
    17ee:	02 2c       	mov	r0, r2
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <glcd_draw_char_xy+0xcc>
    17f2:	95 95       	asr	r25
    17f4:	87 95       	ror	r24
    17f6:	0a 94       	dec	r0
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <glcd_draw_char_xy+0xc8>
    17fa:	80 ff       	sbrs	r24, 0
    17fc:	04 c0       	rjmp	.+8      	; 0x1806 <glcd_draw_char_xy+0xdc>
					glcd_set_pixel(x+i,y+j,BLACK);
    17fe:	80 2f       	mov	r24, r16
    1800:	61 2f       	mov	r22, r17
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	03 c0       	rjmp	.+6      	; 0x180c <glcd_draw_char_xy+0xe2>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
    1806:	80 2f       	mov	r24, r16
    1808:	61 2f       	mov	r22, r17
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    1810:	08 94       	sec
    1812:	21 1c       	adc	r2, r1
    1814:	31 1c       	adc	r3, r1
    1816:	1f 5f       	subi	r17, 0xFF	; 255
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
    1818:	88 e0       	ldi	r24, 0x08	; 8
    181a:	28 16       	cp	r2, r24
    181c:	31 04       	cpc	r3, r1
    181e:	d9 f6       	brne	.-74     	; 0x17d6 <glcd_draw_char_xy+0xac>
	if (font_current.table_type == STANG) {
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
    1820:	f3 94       	inc	r15
    1822:	0f 5f       	subi	r16, 0xFF	; 255
    1824:	90 91 94 03 	lds	r25, 0x0394
    1828:	f9 16       	cp	r15, r25
    182a:	08 f4       	brcc	.+2      	; 0x182e <glcd_draw_char_xy+0x104>
    182c:	b2 cf       	rjmp	.-156    	; 0x1792 <glcd_draw_char_xy+0x68>
    182e:	49 c1       	rjmp	.+658    	; 0x1ac2 <glcd_draw_char_xy+0x398>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	09 f0       	breq	.+2      	; 0x1836 <glcd_draw_char_xy+0x10c>
    1834:	9c c0       	rjmp	.+312    	; 0x196e <glcd_draw_char_xy+0x244>
		
		uint8_t i;
		uint8_t var_width;
		uint8_t bytes_high;
		
		if ((font_current.height % 8) > 0){
    1836:	20 91 95 03 	lds	r18, 0x0395
    183a:	82 2f       	mov	r24, r18
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	87 70       	andi	r24, 0x07	; 7
    1840:	90 70       	andi	r25, 0x00	; 0
    1842:	26 95       	lsr	r18
    1844:	26 95       	lsr	r18
    1846:	26 95       	lsr	r18
    1848:	89 2b       	or	r24, r25
    184a:	09 f0       	breq	.+2      	; 0x184e <glcd_draw_char_xy+0x124>
			bytes_high = (font_current.height / 8) + 1;
    184c:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else{
			bytes_high = (font_current.height / 8);
    184e:	2c 83       	std	Y+4, r18	; 0x04
		}
		uint8_t bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
		
		const char *p;
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    1850:	80 91 94 03 	lds	r24, 0x0394
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	98 9f       	mul	r25, r24
    1858:	80 2d       	mov	r24, r0
    185a:	11 24       	eor	r1, r1
    185c:	8f 5f       	subi	r24, 0xFF	; 255
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	23 2f       	mov	r18, r19
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	25 1b       	sub	r18, r21
    1866:	31 09       	sbc	r19, r1
    1868:	dc 01       	movw	r26, r24
    186a:	a2 9f       	mul	r26, r18
    186c:	c0 01       	movw	r24, r0
    186e:	a3 9f       	mul	r26, r19
    1870:	90 0d       	add	r25, r0
    1872:	b2 9f       	mul	r27, r18
    1874:	90 0d       	add	r25, r0
    1876:	11 24       	eor	r1, r1
    1878:	e0 91 92 03 	lds	r30, 0x0392
    187c:	f0 91 93 03 	lds	r31, 0x0393
    1880:	e8 0f       	add	r30, r24
    1882:	f9 1f       	adc	r31, r25

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
    1884:	b4 91       	lpm	r27, Z+
    1886:	bb 83       	std	Y+3, r27	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	23 2f       	mov	r18, r19
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	3a 83       	std	Y+2, r19	; 0x02
    1890:	29 83       	std	Y+1, r18	; 0x01
    1892:	3f 01       	movw	r6, r30
    1894:	08 94       	sec
    1896:	61 1c       	adc	r6, r1
    1898:	71 1c       	adc	r7, r1
    189a:	54 2c       	mov	r5, r4
    189c:	88 24       	eor	r8, r8
    189e:	99 24       	eor	r9, r9
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    18a0:	e9 8a       	std	Y+17, r14	; 0x11
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    18a2:	44 2d       	mov	r20, r4
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	5c 87       	std	Y+12, r21	; 0x0c
    18a8:	4b 87       	std	Y+11, r20	; 0x0b
    18aa:	4f c0       	rjmp	.+158    	; 0x194a <glcd_draw_char_xy+0x220>
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
    18ac:	f5 01       	movw	r30, r10
    18ae:	84 91       	lpm	r24, Z+
    18b0:	e8 86       	std	Y+8, r14	; 0x08
    18b2:	86 01       	movw	r16, r12
    18b4:	1b 8a       	std	Y+19, r1	; 0x13
    18b6:	1a 8a       	std	Y+18, r1	; 0x12
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    18b8:	28 2e       	mov	r2, r24
    18ba:	33 24       	eor	r3, r3
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    18bc:	29 85       	ldd	r18, Y+9	; 0x09
    18be:	3a 85       	ldd	r19, Y+10	; 0x0a
    18c0:	24 35       	cpi	r18, 0x54	; 84
    18c2:	31 05       	cpc	r19, r1
    18c4:	0c f0       	brlt	.+2      	; 0x18c8 <glcd_draw_char_xy+0x19e>
    18c6:	fc c0       	rjmp	.+504    	; 0x1ac0 <glcd_draw_char_xy+0x396>
    18c8:	2a 89       	ldd	r18, Y+18	; 0x12
    18ca:	8a 89       	ldd	r24, Y+18	; 0x12
    18cc:	9b 89       	ldd	r25, Y+19	; 0x13
    18ce:	8e 0d       	add	r24, r14
    18d0:	9f 1d       	adc	r25, r15
    18d2:	c0 97       	sbiw	r24, 0x30	; 48
    18d4:	0c f0       	brlt	.+2      	; 0x18d8 <glcd_draw_char_xy+0x1ae>
    18d6:	f4 c0       	rjmp	.+488    	; 0x1ac0 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    18d8:	80 91 95 03 	lds	r24, 0x0395
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	08 17       	cp	r16, r24
    18e0:	19 07       	cpc	r17, r25
    18e2:	94 f4       	brge	.+36     	; 0x1908 <glcd_draw_char_xy+0x1de>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    18e4:	c1 01       	movw	r24, r2
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <glcd_draw_char_xy+0x1c4>
    18ea:	95 95       	asr	r25
    18ec:	87 95       	ror	r24
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <glcd_draw_char_xy+0x1c0>
    18f2:	68 85       	ldd	r22, Y+8	; 0x08
    18f4:	62 0f       	add	r22, r18
    18f6:	80 ff       	sbrs	r24, 0
    18f8:	03 c0       	rjmp	.+6      	; 0x1900 <glcd_draw_char_xy+0x1d6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    18fa:	85 2d       	mov	r24, r5
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <glcd_draw_char_xy+0x1da>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    1900:	85 2d       	mov	r24, r5
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    1908:	4a 89       	ldd	r20, Y+18	; 0x12
    190a:	5b 89       	ldd	r21, Y+19	; 0x13
    190c:	4f 5f       	subi	r20, 0xFF	; 255
    190e:	5f 4f       	sbci	r21, 0xFF	; 255
    1910:	5b 8b       	std	Y+19, r21	; 0x13
    1912:	4a 8b       	std	Y+18, r20	; 0x12
    1914:	0f 5f       	subi	r16, 0xFF	; 255
    1916:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
    1918:	48 30       	cpi	r20, 0x08	; 8
    191a:	51 05       	cpc	r21, r1
    191c:	79 f6       	brne	.-98     	; 0x18bc <glcd_draw_char_xy+0x192>
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
    191e:	43 94       	inc	r4
    1920:	68 e0       	ldi	r22, 0x08	; 8
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	e6 0e       	add	r14, r22
    1926:	f7 1e       	adc	r15, r23
    1928:	c6 0e       	add	r12, r22
    192a:	d7 1e       	adc	r13, r23
    192c:	08 94       	sec
    192e:	a1 1c       	adc	r10, r1
    1930:	b1 1c       	adc	r11, r1
    1932:	7c 81       	ldd	r23, Y+4	; 0x04
    1934:	47 16       	cp	r4, r23
    1936:	08 f4       	brcc	.+2      	; 0x193a <glcd_draw_char_xy+0x210>
    1938:	b9 cf       	rjmp	.-142    	; 0x18ac <glcd_draw_char_xy+0x182>
    193a:	08 94       	sec
    193c:	81 1c       	adc	r8, r1
    193e:	91 1c       	adc	r9, r1
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	68 0e       	add	r6, r24
    1946:	79 1e       	adc	r7, r25
    1948:	53 94       	inc	r5
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	89 16       	cp	r8, r25
    194e:	08 f0       	brcs	.+2      	; 0x1952 <glcd_draw_char_xy+0x228>
    1950:	b8 c0       	rjmp	.+368    	; 0x1ac2 <glcd_draw_char_xy+0x398>
    1952:	89 89       	ldd	r24, Y+17	; 0x11
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	7c 01       	movw	r14, r24
    1958:	53 01       	movw	r10, r6
    195a:	44 24       	eor	r4, r4
    195c:	cc 24       	eor	r12, r12
    195e:	dd 24       	eor	r13, r13
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1960:	ab 85       	ldd	r26, Y+11	; 0x0b
    1962:	bc 85       	ldd	r27, Y+12	; 0x0c
    1964:	a8 0d       	add	r26, r8
    1966:	b9 1d       	adc	r27, r9
    1968:	ba 87       	std	Y+10, r27	; 0x0a
    196a:	a9 87       	std	Y+9, r26	; 0x09
    196c:	e2 cf       	rjmp	.-60     	; 0x1932 <glcd_draw_char_xy+0x208>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
    196e:	82 30       	cpi	r24, 0x02	; 2
    1970:	09 f0       	breq	.+2      	; 0x1974 <glcd_draw_char_xy+0x24a>
    1972:	a6 c0       	rjmp	.+332    	; 0x1ac0 <glcd_draw_char_xy+0x396>
		
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;

		bytes_high = font_current.height / 8 + 1;
    1974:	b0 90 95 03 	lds	r11, 0x0395
    1978:	b6 94       	lsr	r11
    197a:	b6 94       	lsr	r11
    197c:	b6 94       	lsr	r11
    197e:	b3 94       	inc	r11
		bytes_per_char = font_current.width * bytes_high;
    1980:	40 91 94 03 	lds	r20, 0x0394
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    1984:	23 2f       	mov	r18, r19
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	25 1b       	sub	r18, r21
    198a:	31 09       	sbc	r19, r1
    198c:	b4 9e       	mul	r11, r20
    198e:	80 2d       	mov	r24, r0
    1990:	11 24       	eor	r1, r1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	fc 01       	movw	r30, r24
    1996:	2e 9f       	mul	r18, r30
    1998:	c0 01       	movw	r24, r0
    199a:	2f 9f       	mul	r18, r31
    199c:	90 0d       	add	r25, r0
    199e:	3e 9f       	mul	r19, r30
    19a0:	90 0d       	add	r25, r0
    19a2:	11 24       	eor	r1, r1
    19a4:	80 90 92 03 	lds	r8, 0x0392
    19a8:	90 90 93 03 	lds	r9, 0x0393
    19ac:	88 0e       	add	r8, r24
    19ae:	99 1e       	adc	r9, r25
    19b0:	54 2e       	mov	r5, r20
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	41 50       	subi	r20, 0x01	; 1
    19b8:	50 40       	sbci	r21, 0x00	; 0
    19ba:	64 2f       	mov	r22, r20
    19bc:	63 1b       	sub	r22, r19
    19be:	e0 e0       	ldi	r30, 0x00	; 0
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <glcd_draw_char_xy+0x2aa>
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
    19c6:	89 2f       	mov	r24, r25
    19c8:	86 1b       	sub	r24, r22
    19ca:	f4 01       	movw	r30, r8
    19cc:	e8 0f       	add	r30, r24
    19ce:	f1 1d       	adc	r31, r1
    19d0:	e0 81       	ld	r30, Z
		
		while (1) {
			uint8_t max_byte = 0;
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
    19d2:	2f 5f       	subi	r18, 0xFF	; 255
    19d4:	96 0f       	add	r25, r22
    19d6:	2b 15       	cp	r18, r11
    19d8:	b0 f3       	brcs	.-20     	; 0x19c6 <glcd_draw_char_xy+0x29c>
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
			}
			if (max_byte == 0) {
    19da:	ee 23       	and	r30, r30
    19dc:	21 f4       	brne	.+8      	; 0x19e6 <glcd_draw_char_xy+0x2bc>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
    19de:	5a 94       	dec	r5
				if (var_width == 0) {
    19e0:	11 f0       	breq	.+4      	; 0x19e6 <glcd_draw_char_xy+0x2bc>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
    19e2:	3f 5f       	subi	r19, 0xFF	; 255
    19e4:	ea cf       	rjmp	.-44     	; 0x19ba <glcd_draw_char_xy+0x290>
		}
    19e6:	ff 24       	eor	r15, r15
    19e8:	66 24       	eor	r6, r6
    19ea:	cc 24       	eor	r12, r12
    19ec:	dd 24       	eor	r13, r13
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    19ee:	24 2d       	mov	r18, r4
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	38 8b       	std	Y+16, r19	; 0x10
    19f4:	2f 87       	std	Y+15, r18	; 0x0f
    19f6:	58 c0       	rjmp	.+176    	; 0x1aa8 <glcd_draw_char_xy+0x37e>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    19f8:	8a 2d       	mov	r24, r10
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	20 91 94 03 	lds	r18, 0x0394
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	4e 81       	ldd	r20, Y+6	; 0x06
    1a04:	5f 81       	ldd	r21, Y+7	; 0x07
    1a06:	42 9f       	mul	r20, r18
    1a08:	f0 01       	movw	r30, r0
    1a0a:	43 9f       	mul	r20, r19
    1a0c:	f0 0d       	add	r31, r0
    1a0e:	52 9f       	mul	r21, r18
    1a10:	f0 0d       	add	r31, r0
    1a12:	11 24       	eor	r1, r1
    1a14:	e8 0f       	add	r30, r24
    1a16:	f9 1f       	adc	r31, r25
    1a18:	e8 0d       	add	r30, r8
    1a1a:	f9 1d       	adc	r31, r9
    1a1c:	e4 91       	lpm	r30, Z+
    1a1e:	86 01       	movw	r16, r12
    1a20:	1b 8a       	std	Y+19, r1	; 0x13
    1a22:	1a 8a       	std	Y+18, r1	; 0x12
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    1a24:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a26:	78 89       	ldd	r23, Y+16	; 0x10
    1a28:	68 0f       	add	r22, r24
    1a2a:	79 1f       	adc	r23, r25
    1a2c:	7e 87       	std	Y+14, r23	; 0x0e
    1a2e:	6d 87       	std	Y+13, r22	; 0x0d
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1a30:	2e 2e       	mov	r2, r30
    1a32:	33 24       	eor	r3, r3
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    1a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a38:	84 35       	cpi	r24, 0x54	; 84
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	0c f0       	brlt	.+2      	; 0x1a40 <glcd_draw_char_xy+0x316>
    1a3e:	40 c0       	rjmp	.+128    	; 0x1ac0 <glcd_draw_char_xy+0x396>
    1a40:	2a 89       	ldd	r18, Y+18	; 0x12
    1a42:	8a 89       	ldd	r24, Y+18	; 0x12
    1a44:	9b 89       	ldd	r25, Y+19	; 0x13
    1a46:	8e 0d       	add	r24, r14
    1a48:	9f 1d       	adc	r25, r15
    1a4a:	c0 97       	sbiw	r24, 0x30	; 48
    1a4c:	cc f5       	brge	.+114    	; 0x1ac0 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    1a4e:	80 91 95 03 	lds	r24, 0x0395
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	08 17       	cp	r16, r24
    1a56:	19 07       	cpc	r17, r25
    1a58:	94 f4       	brge	.+36     	; 0x1a7e <glcd_draw_char_xy+0x354>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1a5a:	c1 01       	movw	r24, r2
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <glcd_draw_char_xy+0x33a>
    1a60:	95 95       	asr	r25
    1a62:	87 95       	ror	r24
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <glcd_draw_char_xy+0x336>
    1a68:	6d 81       	ldd	r22, Y+5	; 0x05
    1a6a:	62 0f       	add	r22, r18
    1a6c:	80 ff       	sbrs	r24, 0
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <glcd_draw_char_xy+0x34c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    1a70:	87 2d       	mov	r24, r7
    1a72:	41 e0       	ldi	r20, 0x01	; 1
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <glcd_draw_char_xy+0x350>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    1a76:	87 2d       	mov	r24, r7
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    1a7e:	ea 89       	ldd	r30, Y+18	; 0x12
    1a80:	fb 89       	ldd	r31, Y+19	; 0x13
    1a82:	31 96       	adiw	r30, 0x01	; 1
    1a84:	fb 8b       	std	Y+19, r31	; 0x13
    1a86:	ea 8b       	std	Y+18, r30	; 0x12
    1a88:	0f 5f       	subi	r16, 0xFF	; 255
    1a8a:	1f 4f       	sbci	r17, 0xFF	; 255
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
    1a8c:	38 97       	sbiw	r30, 0x08	; 8
    1a8e:	91 f6       	brne	.-92     	; 0x1a34 <glcd_draw_char_xy+0x30a>
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
    1a90:	a3 94       	inc	r10
    1a92:	73 94       	inc	r7
    1a94:	a5 14       	cp	r10, r5
    1a96:	08 f4       	brcc	.+2      	; 0x1a9a <glcd_draw_char_xy+0x370>
    1a98:	af cf       	rjmp	.-162    	; 0x19f8 <glcd_draw_char_xy+0x2ce>
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
    1a9a:	63 94       	inc	r6
    1a9c:	28 e0       	ldi	r18, 0x08	; 8
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	e2 0e       	add	r14, r18
    1aa2:	f3 1e       	adc	r15, r19
    1aa4:	c2 0e       	add	r12, r18
    1aa6:	d3 1e       	adc	r13, r19
    1aa8:	6b 14       	cp	r6, r11
    1aaa:	10 f0       	brcs	.+4      	; 0x1ab0 <glcd_draw_char_xy+0x386>
    1aac:	95 2d       	mov	r25, r5
    1aae:	09 c0       	rjmp	.+18     	; 0x1ac2 <glcd_draw_char_xy+0x398>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    1ab0:	46 2d       	mov	r20, r6
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	5f 83       	std	Y+7, r21	; 0x07
    1ab6:	4e 83       	std	Y+6, r20	; 0x06
    1ab8:	ed 82       	std	Y+5, r14	; 0x05
    1aba:	74 2c       	mov	r7, r4
    1abc:	aa 24       	eor	r10, r10
    1abe:	ea cf       	rjmp	.-44     	; 0x1a94 <glcd_draw_char_xy+0x36a>
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
		/* Don't recognise the font table */
		return 0;
		
	}

}
    1ac2:	89 2f       	mov	r24, r25
    1ac4:	63 96       	adiw	r28, 0x13	; 19
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	ff 90       	pop	r15
    1ada:	ef 90       	pop	r14
    1adc:	df 90       	pop	r13
    1ade:	cf 90       	pop	r12
    1ae0:	bf 90       	pop	r11
    1ae2:	af 90       	pop	r10
    1ae4:	9f 90       	pop	r9
    1ae6:	8f 90       	pop	r8
    1ae8:	7f 90       	pop	r7
    1aea:	6f 90       	pop	r6
    1aec:	5f 90       	pop	r5
    1aee:	4f 90       	pop	r4
    1af0:	3f 90       	pop	r3
    1af2:	2f 90       	pop	r2
    1af4:	08 95       	ret

00001af6 <glcd_draw_string_xy_P>:
		c++;
	}		
}

void glcd_draw_string_xy_P(uint8_t x, uint8_t y, const char *str)
{
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	18 2f       	mov	r17, r24
    1b00:	06 2f       	mov	r16, r22
    1b02:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    1b04:	86 2f       	mov	r24, r22
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	40 91 95 03 	lds	r20, 0x0395
    1b0c:	2f e2       	ldi	r18, 0x2F	; 47
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	24 1b       	sub	r18, r20
    1b12:	31 09       	sbc	r19, r1
    1b14:	28 17       	cp	r18, r24
    1b16:	39 07       	cpc	r19, r25
    1b18:	64 f0       	brlt	.+24     	; 0x1b32 <glcd_draw_string_xy_P+0x3c>
		/* Character won't fit */
		return;
    1b1a:	fe 01       	movw	r30, r28
	}

	while (1) {
#if defined(GLCD_DEVICE_AVR8)		
		char c = pgm_read_byte(str++);
    1b1c:	21 96       	adiw	r28, 0x01	; 1
    1b1e:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    1b20:	44 23       	and	r20, r20
    1b22:	39 f0       	breq	.+14     	; 0x1b32 <glcd_draw_string_xy_P+0x3c>
			return;
					
		width = glcd_draw_char_xy(x,y,c);
    1b24:	81 2f       	mov	r24, r17
    1b26:	60 2f       	mov	r22, r16
    1b28:	0e 94 95 0b 	call	0x172a	; 0x172a <glcd_draw_char_xy>
		x += (width + 1);
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	18 0f       	add	r17, r24
    1b30:	f4 cf       	rjmp	.-24     	; 0x1b1a <glcd_draw_string_xy_P+0x24>
		c++;
	}		
}
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	08 95       	ret

00001b3c <glcd_draw_string_xy>:
	}

}

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	18 2f       	mov	r17, r24
    1b46:	06 2f       	mov	r16, r22
    1b48:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    1b4a:	86 2f       	mov	r24, r22
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	40 91 95 03 	lds	r20, 0x0395
    1b52:	2f e2       	ldi	r18, 0x2F	; 47
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	24 1b       	sub	r18, r20
    1b58:	31 09       	sbc	r19, r1
    1b5a:	28 17       	cp	r18, r24
    1b5c:	39 07       	cpc	r19, r25
    1b5e:	44 f4       	brge	.+16     	; 0x1b70 <glcd_draw_string_xy+0x34>
    1b60:	0a c0       	rjmp	.+20     	; 0x1b76 <glcd_draw_string_xy+0x3a>
		/* Character won't fit */
		return;
	}

	while (*c) {
		width = glcd_draw_char_xy(x,y,*c);
    1b62:	81 2f       	mov	r24, r17
    1b64:	60 2f       	mov	r22, r16
    1b66:	0e 94 95 0b 	call	0x172a	; 0x172a <glcd_draw_char_xy>
		x += (width + 1);
    1b6a:	8f 5f       	subi	r24, 0xFF	; 255
    1b6c:	18 0f       	add	r17, r24
		c++;
    1b6e:	21 96       	adiw	r28, 0x01	; 1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
		/* Character won't fit */
		return;
	}

	while (*c) {
    1b70:	48 81       	ld	r20, Y
    1b72:	44 23       	and	r20, r20
    1b74:	b1 f7       	brne	.-20     	; 0x1b62 <glcd_draw_string_xy+0x26>
		width = glcd_draw_char_xy(x,y,*c);
		x += (width + 1);
		c++;
	}		
}
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	08 95       	ret

00001b80 <glcd_get_pixel>:

	glcd_update_bbox(x,y,x,y);
}

/* Based on PCD8544 library by Limor Fried */
uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
    1b80:	48 2f       	mov	r20, r24
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    1b82:	84 35       	cpi	r24, 0x54	; 84
    1b84:	f0 f4       	brcc	.+60     	; 0x1bc2 <glcd_get_pixel+0x42>
    1b86:	60 33       	cpi	r22, 0x30	; 48
    1b88:	e0 f4       	brcc	.+56     	; 0x1bc2 <glcd_get_pixel+0x42>
    1b8a:	86 2f       	mov	r24, r22
    1b8c:	86 95       	lsr	r24
    1b8e:	86 95       	lsr	r24
    1b90:	86 95       	lsr	r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	24 e5       	ldi	r18, 0x54	; 84
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	82 9f       	mul	r24, r18
    1b9a:	f0 01       	movw	r30, r0
    1b9c:	83 9f       	mul	r24, r19
    1b9e:	f0 0d       	add	r31, r0
    1ba0:	92 9f       	mul	r25, r18
    1ba2:	f0 0d       	add	r31, r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	e4 0f       	add	r30, r20
    1ba8:	f1 1d       	adc	r31, r1
    1baa:	ea 56       	subi	r30, 0x6A	; 106
    1bac:	fe 4f       	sbci	r31, 0xFE	; 254
    1bae:	80 81       	ld	r24, Z
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	67 70       	andi	r22, 0x07	; 7
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <glcd_get_pixel+0x3a>
    1bb6:	95 95       	asr	r25
    1bb8:	87 95       	ror	r24
    1bba:	6a 95       	dec	r22
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <glcd_get_pixel+0x36>
    1bbe:	81 70       	andi	r24, 0x01	; 1
    1bc0:	08 95       	ret
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
		return 1;
	} else {
		return 0;
	}
}
    1bc4:	08 95       	ret

00001bc6 <glcd_draw_bitmap>:
		}
	}
}

void glcd_draw_bitmap(const unsigned char *data)
{
    1bc6:	bc 01       	movw	r22, r24
	glcd_select_screen(original_buffer, glcd_bbox_selected);	
#endif
	
	/* Copy bitmap data to the screen buffer */
#if defined(GLCD_DEVICE_AVR8)
	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
    1bc8:	80 91 8e 03 	lds	r24, 0x038E
    1bcc:	90 91 8f 03 	lds	r25, 0x038F
    1bd0:	48 ef       	ldi	r20, 0xF8	; 248
    1bd2:	51 e0       	ldi	r21, 0x01	; 1
    1bd4:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <memcpy_P>
#else
	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
#endif

	glcd_bbox_refresh(); 
    1bd8:	0e 94 a7 08 	call	0x114e	; 0x114e <glcd_bbox_refresh>
}
    1bdc:	08 95       	ret

00001bde <glcd_invert_pixel>:
	} else {
		return 0;
	}
}

void glcd_invert_pixel(uint8_t x, uint8_t y) {
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	08 2f       	mov	r16, r24
    1be4:	16 2f       	mov	r17, r22
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    1be6:	84 35       	cpi	r24, 0x54	; 84
    1be8:	e8 f4       	brcc	.+58     	; 0x1c24 <glcd_invert_pixel+0x46>
    1bea:	60 33       	cpi	r22, 0x30	; 48
    1bec:	d8 f4       	brcc	.+54     	; 0x1c24 <glcd_invert_pixel+0x46>
		return;
	}
	glcd_update_bbox(x,y,x,y);
    1bee:	40 2f       	mov	r20, r16
    1bf0:	21 2f       	mov	r18, r17
    1bf2:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
    1bf6:	e1 2f       	mov	r30, r17
    1bf8:	e6 95       	lsr	r30
    1bfa:	e6 95       	lsr	r30
    1bfc:	e6 95       	lsr	r30
    1bfe:	84 e5       	ldi	r24, 0x54	; 84
    1c00:	e8 9f       	mul	r30, r24
    1c02:	f0 01       	movw	r30, r0
    1c04:	11 24       	eor	r1, r1
    1c06:	e0 0f       	add	r30, r16
    1c08:	f1 1d       	adc	r31, r1
    1c0a:	ea 56       	subi	r30, 0x6A	; 106
    1c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c0e:	17 70       	andi	r17, 0x07	; 7
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <glcd_invert_pixel+0x3c>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	1a 95       	dec	r17
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <glcd_invert_pixel+0x38>
    1c1e:	20 81       	ld	r18, Z
    1c20:	28 27       	eor	r18, r24
    1c22:	20 83       	st	Z, r18
}
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	08 95       	ret

00001c2a <glcd_invert_area>:
		}    
	}
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	d6 2e       	mov	r13, r22
    1c3a:	08 2f       	mov	r16, r24
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    1c3c:	e8 2e       	mov	r14, r24
    1c3e:	ff 24       	eor	r15, r15
    1c40:	e4 0e       	add	r14, r20
    1c42:	f1 1c       	adc	r15, r1
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    1c44:	c6 2f       	mov	r28, r22
    1c46:	d0 e0       	ldi	r29, 0x00	; 0
    1c48:	c2 0f       	add	r28, r18
    1c4a:	d1 1d       	adc	r29, r1
    1c4c:	0b c0       	rjmp	.+22     	; 0x1c64 <glcd_invert_area+0x3a>
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
    1c4e:	80 2f       	mov	r24, r16
    1c50:	61 2f       	mov	r22, r17
    1c52:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <glcd_invert_pixel>
void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    1c56:	1f 5f       	subi	r17, 0xFF	; 255
    1c58:	81 2f       	mov	r24, r17
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	8c 17       	cp	r24, r28
    1c5e:	9d 07       	cpc	r25, r29
    1c60:	b4 f3       	brlt	.-20     	; 0x1c4e <glcd_invert_area+0x24>
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    1c62:	0f 5f       	subi	r16, 0xFF	; 255
    1c64:	80 2f       	mov	r24, r16
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	8e 15       	cp	r24, r14
    1c6a:	9f 05       	cpc	r25, r15
    1c6c:	14 f4       	brge	.+4      	; 0x1c72 <glcd_invert_area+0x48>
    1c6e:	1d 2d       	mov	r17, r13
    1c70:	f3 cf       	rjmp	.-26     	; 0x1c58 <glcd_invert_area+0x2e>
		for (yy = y; yy < (y+h); yy++) {
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
		}
	}
}
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	ff 90       	pop	r15
    1c7c:	ef 90       	pop	r14
    1c7e:	df 90       	pop	r13
    1c80:	08 95       	ret

00001c82 <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
    1c82:	a8 2f       	mov	r26, r24
    1c84:	76 2f       	mov	r23, r22
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
    1c86:	84 35       	cpi	r24, 0x54	; 84
    1c88:	d0 f5       	brcc	.+116    	; 0x1cfe <glcd_set_pixel+0x7c>
    1c8a:	60 33       	cpi	r22, 0x30	; 48
    1c8c:	c0 f5       	brcc	.+112    	; 0x1cfe <glcd_set_pixel+0x7c>
    1c8e:	56 2f       	mov	r21, r22
    1c90:	56 95       	lsr	r21
    1c92:	56 95       	lsr	r21
    1c94:	56 95       	lsr	r21
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	26 2f       	mov	r18, r22
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
    1c9c:	44 23       	and	r20, r20
    1c9e:	a1 f0       	breq	.+40     	; 0x1cc8 <glcd_set_pixel+0x46>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
    1ca0:	e4 e5       	ldi	r30, 0x54	; 84
    1ca2:	5e 9f       	mul	r21, r30
    1ca4:	f0 01       	movw	r30, r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	e8 0f       	add	r30, r24
    1caa:	f9 1f       	adc	r31, r25
    1cac:	ea 56       	subi	r30, 0x6A	; 106
    1cae:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb0:	27 70       	andi	r18, 0x07	; 7
    1cb2:	30 70       	andi	r19, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <glcd_set_pixel+0x3c>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	2a 95       	dec	r18
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <glcd_set_pixel+0x38>
    1cc2:	20 81       	ld	r18, Z
    1cc4:	28 2b       	or	r18, r24
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <glcd_set_pixel+0x6e>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
    1cc8:	e4 e5       	ldi	r30, 0x54	; 84
    1cca:	5e 9f       	mul	r21, r30
    1ccc:	f0 01       	movw	r30, r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	e8 0f       	add	r30, r24
    1cd2:	f9 1f       	adc	r31, r25
    1cd4:	ea 56       	subi	r30, 0x6A	; 106
    1cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd8:	27 70       	andi	r18, 0x07	; 7
    1cda:	30 70       	andi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <glcd_set_pixel+0x64>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	2a 95       	dec	r18
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <glcd_set_pixel+0x60>
    1cea:	80 95       	com	r24
    1cec:	20 81       	ld	r18, Z
    1cee:	28 23       	and	r18, r24
    1cf0:	20 83       	st	Z, r18
	}

	glcd_update_bbox(x,y,x,y);
    1cf2:	8a 2f       	mov	r24, r26
    1cf4:	67 2f       	mov	r22, r23
    1cf6:	4a 2f       	mov	r20, r26
    1cf8:	27 2f       	mov	r18, r23
    1cfa:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
    1cfe:	08 95       	ret

00001d00 <glcd_fill_circle>:
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1d00:	3f 92       	push	r3
    1d02:	4f 92       	push	r4
    1d04:	5f 92       	push	r5
    1d06:	6f 92       	push	r6
    1d08:	7f 92       	push	r7
    1d0a:	8f 92       	push	r8
    1d0c:	9f 92       	push	r9
    1d0e:	af 92       	push	r10
    1d10:	bf 92       	push	r11
    1d12:	cf 92       	push	r12
    1d14:	df 92       	push	r13
    1d16:	ef 92       	push	r14
    1d18:	ff 92       	push	r15
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <glcd_fill_circle+0x24>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <glcd_fill_circle+0x26>
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <glcd_fill_circle+0x28>
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	b8 2e       	mov	r11, r24
    1d2e:	e6 2e       	mov	r14, r22
    1d30:	f4 2e       	mov	r15, r20
    1d32:	62 2e       	mov	r6, r18
	
	int8_t f = 1 - r;
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1d34:	04 2f       	mov	r16, r20
    1d36:	10 e0       	ldi	r17, 0x00	; 0
	int8_t x = 0;
	int8_t y = r;
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1d38:	64 1b       	sub	r22, r20
    1d3a:	48 0f       	add	r20, r24
    1d3c:	2f 2d       	mov	r18, r15
    1d3e:	2e 0d       	add	r18, r14
    1d40:	8f 19       	sub	r24, r15
    1d42:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
	
	
	for (i=y0-r; i<=y0+r; i++) {
    1d46:	8e 2c       	mov	r8, r14
    1d48:	99 24       	eor	r9, r9
    1d4a:	24 01       	movw	r4, r8
    1d4c:	40 1a       	sub	r4, r16
    1d4e:	51 0a       	sbc	r5, r17
    1d50:	68 01       	movw	r12, r16
    1d52:	c8 0c       	add	r12, r8
    1d54:	d9 1c       	adc	r13, r9
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <glcd_fill_circle+0x68>
		glcd_set_pixel(x0, i, color);
    1d58:	8b 2d       	mov	r24, r11
    1d5a:	64 2d       	mov	r22, r4
    1d5c:	46 2d       	mov	r20, r6
    1d5e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
	
	
	for (i=y0-r; i<=y0+r; i++) {
    1d62:	08 94       	sec
    1d64:	41 1c       	adc	r4, r1
    1d66:	51 1c       	adc	r5, r1
    1d68:	c4 14       	cp	r12, r4
    1d6a:	d5 04       	cpc	r13, r5
    1d6c:	ac f7       	brge	.-22     	; 0x1d58 <glcd_fill_circle+0x58>
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
	
	int8_t f = 1 - r;
    1d6e:	dd 24       	eor	r13, r13
    1d70:	d3 94       	inc	r13
    1d72:	df 18       	sub	r13, r15
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1d74:	00 0f       	add	r16, r16
    1d76:	11 1f       	adc	r17, r17
    1d78:	40 2e       	mov	r4, r16
    1d7a:	41 94       	neg	r4
	int8_t x = 0;
	int8_t y = r;
    1d7c:	cf 2c       	mov	r12, r15
    1d7e:	aa 24       	eor	r10, r10
    1d80:	00 e0       	ldi	r16, 0x00	; 0
    1d82:	10 e0       	ldi	r17, 0x00	; 0
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	78 2e       	mov	r7, r24
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1d88:	8e 2d       	mov	r24, r14
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9c 01       	movw	r18, r24
    1d8e:	21 50       	subi	r18, 0x01	; 1
    1d90:	30 40       	sbci	r19, 0x00	; 0
    1d92:	3a 83       	std	Y+2, r19	; 0x02
    1d94:	29 83       	std	Y+1, r18	; 0x01
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1d96:	fc 01       	movw	r30, r24
    1d98:	31 96       	adiw	r30, 0x01	; 1
    1d9a:	fc 83       	std	Y+4, r31	; 0x04
    1d9c:	eb 83       	std	Y+3, r30	; 0x03
    1d9e:	54 c0       	rjmp	.+168    	; 0x1e48 <glcd_fill_circle+0x148>
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
		if (f >= 0) {
    1da0:	d7 fc       	sbrc	r13, 7
    1da2:	04 c0       	rjmp	.+8      	; 0x1dac <glcd_fill_circle+0xac>
			y--;
    1da4:	ca 94       	dec	r12
			ddF_y += 2;
    1da6:	f2 e0       	ldi	r31, 0x02	; 2
    1da8:	4f 0e       	add	r4, r31
			f += ddF_y;
    1daa:	d4 0c       	add	r13, r4
		}
		x++;
    1dac:	a3 94       	inc	r10
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    1dae:	8c 2d       	mov	r24, r12
    1db0:	99 27       	eor	r25, r25
    1db2:	87 fd       	sbrc	r24, 7
    1db4:	90 95       	com	r25
    1db6:	94 01       	movw	r18, r8
    1db8:	28 1b       	sub	r18, r24
    1dba:	39 0b       	sbc	r19, r25
    1dbc:	3e 83       	std	Y+6, r19	; 0x06
    1dbe:	2d 83       	std	Y+5, r18	; 0x05
    1dc0:	7c 01       	movw	r14, r24
    1dc2:	e8 0c       	add	r14, r8
    1dc4:	f9 1c       	adc	r15, r9
			glcd_set_pixel(x0+x, i, color);
    1dc6:	3a 2c       	mov	r3, r10
    1dc8:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-x, i, color);
    1dca:	5b 2c       	mov	r5, r11
    1dcc:	5a 18       	sub	r5, r10
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <glcd_fill_circle+0xee>
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
    1dd0:	83 2d       	mov	r24, r3
    1dd2:	6d 81       	ldd	r22, Y+5	; 0x05
    1dd4:	46 2d       	mov	r20, r6
    1dd6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
			glcd_set_pixel(x0-x, i, color);
    1dda:	85 2d       	mov	r24, r5
    1ddc:	6d 81       	ldd	r22, Y+5	; 0x05
    1dde:	46 2d       	mov	r20, r6
    1de0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	9e 83       	std	Y+6, r25	; 0x06
    1dec:	8d 83       	std	Y+5, r24	; 0x05
    1dee:	ed 81       	ldd	r30, Y+5	; 0x05
    1df0:	fe 81       	ldd	r31, Y+6	; 0x06
    1df2:	ee 16       	cp	r14, r30
    1df4:	ff 06       	cpc	r15, r31
    1df6:	64 f7       	brge	.-40     	; 0x1dd0 <glcd_fill_circle+0xd0>
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1df8:	29 81       	ldd	r18, Y+1	; 0x01
    1dfa:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfc:	20 1b       	sub	r18, r16
    1dfe:	31 0b       	sbc	r19, r17
    1e00:	3e 83       	std	Y+6, r19	; 0x06
    1e02:	2d 83       	std	Y+5, r18	; 0x05
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1e04:	eb 80       	ldd	r14, Y+3	; 0x03
    1e06:	fc 80       	ldd	r15, Y+4	; 0x04
    1e08:	e0 0e       	add	r14, r16
    1e0a:	f1 1e       	adc	r15, r17
			glcd_set_pixel(x0+y, i, color);
    1e0c:	3c 2c       	mov	r3, r12
    1e0e:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-y, i, color);
    1e10:	5b 2c       	mov	r5, r11
    1e12:	5c 18       	sub	r5, r12
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <glcd_fill_circle+0x134>
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
    1e16:	83 2d       	mov	r24, r3
    1e18:	6d 81       	ldd	r22, Y+5	; 0x05
    1e1a:	46 2d       	mov	r20, r6
    1e1c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
			glcd_set_pixel(x0-y, i, color);
    1e20:	85 2d       	mov	r24, r5
    1e22:	6d 81       	ldd	r22, Y+5	; 0x05
    1e24:	46 2d       	mov	r20, r6
    1e26:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	ed 81       	ldd	r30, Y+5	; 0x05
    1e36:	fe 81       	ldd	r31, Y+6	; 0x06
    1e38:	ee 16       	cp	r14, r30
    1e3a:	ff 06       	cpc	r15, r31
    1e3c:	64 f7       	brge	.-40     	; 0x1e16 <glcd_fill_circle+0x116>
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
    1e3e:	d7 0c       	add	r13, r7
    1e40:	0f 5f       	subi	r16, 0xFF	; 255
    1e42:	1f 4f       	sbci	r17, 0xFF	; 255
    1e44:	f2 e0       	ldi	r31, 0x02	; 2
    1e46:	7f 0e       	add	r7, r31
	
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
    1e48:	ac 14       	cp	r10, r12
    1e4a:	0c f4       	brge	.+2      	; 0x1e4e <glcd_fill_circle+0x14e>
    1e4c:	a9 cf       	rjmp	.-174    	; 0x1da0 <glcd_fill_circle+0xa0>
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
		}    
	}
}
    1e4e:	26 96       	adiw	r28, 0x06	; 6
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	ff 90       	pop	r15
    1e64:	ef 90       	pop	r14
    1e66:	df 90       	pop	r13
    1e68:	cf 90       	pop	r12
    1e6a:	bf 90       	pop	r11
    1e6c:	af 90       	pop	r10
    1e6e:	9f 90       	pop	r9
    1e70:	8f 90       	pop	r8
    1e72:	7f 90       	pop	r7
    1e74:	6f 90       	pop	r6
    1e76:	5f 90       	pop	r5
    1e78:	4f 90       	pop	r4
    1e7a:	3f 90       	pop	r3
    1e7c:	08 95       	ret

00001e7e <glcd_draw_circle_2>:
		
	}
}

void glcd_draw_circle_2(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1e7e:	7f 92       	push	r7
    1e80:	8f 92       	push	r8
    1e82:	9f 92       	push	r9
    1e84:	af 92       	push	r10
    1e86:	bf 92       	push	r11
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	a8 2e       	mov	r10, r24
    1e96:	b6 2e       	mov	r11, r22
    1e98:	c2 2e       	mov	r12, r18
		
		
	int8_t f = 1 - r;
    1e9a:	99 24       	eor	r9, r9
    1e9c:	93 94       	inc	r9
    1e9e:	94 1a       	sub	r9, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1ea0:	84 2f       	mov	r24, r20
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	78 2e       	mov	r7, r24
    1eaa:	71 94       	neg	r7
	int8_t x = 0;
	int8_t y = r;
    1eac:	d4 2e       	mov	r13, r20
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1eae:	ea 2c       	mov	r14, r10
    1eb0:	e4 1a       	sub	r14, r20
    1eb2:	06 2f       	mov	r16, r22
    1eb4:	04 1b       	sub	r16, r20
    1eb6:	f4 2e       	mov	r15, r20
    1eb8:	fa 0c       	add	r15, r10
    1eba:	14 2f       	mov	r17, r20
    1ebc:	16 0f       	add	r17, r22
    1ebe:	8e 2d       	mov	r24, r14
    1ec0:	60 2f       	mov	r22, r16
    1ec2:	4f 2d       	mov	r20, r15
    1ec4:	21 2f       	mov	r18, r17
    1ec6:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
	
	glcd_set_pixel(x0, y0+r, color);
    1eca:	8a 2d       	mov	r24, r10
    1ecc:	61 2f       	mov	r22, r17
    1ece:	4c 2d       	mov	r20, r12
    1ed0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
	glcd_set_pixel(x0, y0-r, color);
    1ed4:	8a 2d       	mov	r24, r10
    1ed6:	60 2f       	mov	r22, r16
    1ed8:	4c 2d       	mov	r20, r12
    1eda:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
	glcd_set_pixel(x0+r, y0, color);
    1ede:	8f 2d       	mov	r24, r15
    1ee0:	6b 2d       	mov	r22, r11
    1ee2:	4c 2d       	mov	r20, r12
    1ee4:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
	glcd_set_pixel(x0-r, y0, color);
    1ee8:	8e 2d       	mov	r24, r14
    1eea:	6b 2d       	mov	r22, r11
    1eec:	4c 2d       	mov	r20, r12
    1eee:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    1ef2:	ee 24       	eor	r14, r14
    1ef4:	23 e0       	ldi	r18, 0x03	; 3
    1ef6:	82 2e       	mov	r8, r18
    1ef8:	42 c0       	rjmp	.+132    	; 0x1f7e <glcd_draw_circle_2+0x100>
	
	while (x<y) {
		if (f >= 0) {
    1efa:	97 fc       	sbrc	r9, 7
    1efc:	04 c0       	rjmp	.+8      	; 0x1f06 <glcd_draw_circle_2+0x88>
			y--;
    1efe:	da 94       	dec	r13
			ddF_y += 2;
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	78 0e       	add	r7, r24
			f += ddF_y;
    1f04:	97 0c       	add	r9, r7
		}
		x++;
    1f06:	e3 94       	inc	r14
		ddF_x += 2;
		f += ddF_x;
    1f08:	98 0c       	add	r9, r8
		
	}
}

void glcd_draw_circle_2(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1f0a:	fe 2c       	mov	r15, r14
    1f0c:	fa 0c       	add	r15, r10
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
    1f0e:	1d 2d       	mov	r17, r13
    1f10:	1b 0d       	add	r17, r11
    1f12:	8f 2d       	mov	r24, r15
    1f14:	61 2f       	mov	r22, r17
    1f16:	4c 2d       	mov	r20, r12
    1f18:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    1f1c:	0a 2d       	mov	r16, r10
    1f1e:	0e 19       	sub	r16, r14
		glcd_set_pixel(x0 - x, y0 + y, color);
    1f20:	80 2f       	mov	r24, r16
    1f22:	61 2f       	mov	r22, r17
    1f24:	4c 2d       	mov	r20, r12
    1f26:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		glcd_set_pixel(x0 + x, y0 - y, color);
    1f2a:	1b 2d       	mov	r17, r11
    1f2c:	1d 19       	sub	r17, r13
    1f2e:	8f 2d       	mov	r24, r15
    1f30:	61 2f       	mov	r22, r17
    1f32:	4c 2d       	mov	r20, r12
    1f34:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 - y, color);
    1f38:	80 2f       	mov	r24, r16
    1f3a:	61 2f       	mov	r22, r17
    1f3c:	4c 2d       	mov	r20, r12
    1f3e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		
		glcd_set_pixel(x0 + y, y0 + x, color);
    1f42:	fd 2c       	mov	r15, r13
    1f44:	fa 0c       	add	r15, r10
    1f46:	1e 2d       	mov	r17, r14
    1f48:	1b 0d       	add	r17, r11
    1f4a:	8f 2d       	mov	r24, r15
    1f4c:	61 2f       	mov	r22, r17
    1f4e:	4c 2d       	mov	r20, r12
    1f50:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 + x, color);
    1f54:	0a 2d       	mov	r16, r10
    1f56:	0d 19       	sub	r16, r13
    1f58:	80 2f       	mov	r24, r16
    1f5a:	61 2f       	mov	r22, r17
    1f5c:	4c 2d       	mov	r20, r12
    1f5e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    1f62:	1b 2d       	mov	r17, r11
    1f64:	1e 19       	sub	r17, r14
		glcd_set_pixel(x0 + y, y0 - x, color);
    1f66:	8f 2d       	mov	r24, r15
    1f68:	61 2f       	mov	r22, r17
    1f6a:	4c 2d       	mov	r20, r12
    1f6c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 - x, color);
    1f70:	80 2f       	mov	r24, r16
    1f72:	61 2f       	mov	r22, r17
    1f74:	4c 2d       	mov	r20, r12
    1f76:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	88 0e       	add	r8, r24
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
    1f7e:	ed 14       	cp	r14, r13
    1f80:	0c f4       	brge	.+2      	; 0x1f84 <glcd_draw_circle_2+0x106>
    1f82:	bb cf       	rjmp	.-138    	; 0x1efa <glcd_draw_circle_2+0x7c>
		glcd_set_pixel(x0 - y, y0 + x, color);
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	ff 90       	pop	r15
    1f8a:	ef 90       	pop	r14
    1f8c:	df 90       	pop	r13
    1f8e:	cf 90       	pop	r12
    1f90:	bf 90       	pop	r11
    1f92:	af 90       	pop	r10
    1f94:	9f 90       	pop	r9
    1f96:	8f 90       	pop	r8
    1f98:	7f 90       	pop	r7
    1f9a:	08 95       	ret

00001f9c <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1f9c:	7f 92       	push	r7
    1f9e:	8f 92       	push	r8
    1fa0:	9f 92       	push	r9
    1fa2:	af 92       	push	r10
    1fa4:	bf 92       	push	r11
    1fa6:	cf 92       	push	r12
    1fa8:	df 92       	push	r13
    1faa:	ef 92       	push	r14
    1fac:	ff 92       	push	r15
    1fae:	0f 93       	push	r16
    1fb0:	1f 93       	push	r17
    1fb2:	a8 2e       	mov	r10, r24
    1fb4:	b6 2e       	mov	r11, r22
    1fb6:	c2 2e       	mov	r12, r18
		
		
	int8_t f = 1 - r;
    1fb8:	99 24       	eor	r9, r9
    1fba:	93 94       	inc	r9
    1fbc:	94 1a       	sub	r9, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1fbe:	84 2f       	mov	r24, r20
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	78 2e       	mov	r7, r24
    1fc8:	71 94       	neg	r7
	int8_t x = 0;
	int8_t y = r;
    1fca:	d4 2e       	mov	r13, r20
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1fcc:	ea 2c       	mov	r14, r10
    1fce:	e4 1a       	sub	r14, r20
    1fd0:	06 2f       	mov	r16, r22
    1fd2:	04 1b       	sub	r16, r20
    1fd4:	f4 2e       	mov	r15, r20
    1fd6:	fa 0c       	add	r15, r10
    1fd8:	14 2f       	mov	r17, r20
    1fda:	16 0f       	add	r17, r22
    1fdc:	8e 2d       	mov	r24, r14
    1fde:	60 2f       	mov	r22, r16
    1fe0:	4f 2d       	mov	r20, r15
    1fe2:	21 2f       	mov	r18, r17
    1fe4:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
	
	glcd_set_pixel(x0, y0+r, color);
    1fe8:	8a 2d       	mov	r24, r10
    1fea:	61 2f       	mov	r22, r17
    1fec:	4c 2d       	mov	r20, r12
    1fee:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
	glcd_set_pixel(x0, y0-r, color);
    1ff2:	8a 2d       	mov	r24, r10
    1ff4:	60 2f       	mov	r22, r16
    1ff6:	4c 2d       	mov	r20, r12
    1ff8:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
	glcd_set_pixel(x0+r, y0, color);
    1ffc:	8f 2d       	mov	r24, r15
    1ffe:	6b 2d       	mov	r22, r11
    2000:	4c 2d       	mov	r20, r12
    2002:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
	glcd_set_pixel(x0-r, y0, color);
    2006:	8e 2d       	mov	r24, r14
    2008:	6b 2d       	mov	r22, r11
    200a:	4c 2d       	mov	r20, r12
    200c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    2010:	ee 24       	eor	r14, r14
    2012:	43 e0       	ldi	r20, 0x03	; 3
    2014:	84 2e       	mov	r8, r20
    2016:	42 c0       	rjmp	.+132    	; 0x209c <glcd_draw_circle+0x100>
	
	while (x<y) {
		if (f >= 0) {
    2018:	97 fc       	sbrc	r9, 7
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <glcd_draw_circle+0x88>
			y--;
    201c:	da 94       	dec	r13
			ddF_y += 2;
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	78 0e       	add	r7, r24
			f += ddF_y;
    2022:	97 0c       	add	r9, r7
		}
		x++;
    2024:	e3 94       	inc	r14
		ddF_x += 2;
		f += ddF_x;
    2026:	98 0c       	add	r9, r8
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    2028:	fe 2c       	mov	r15, r14
    202a:	fa 0c       	add	r15, r10
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
    202c:	1d 2d       	mov	r17, r13
    202e:	1b 0d       	add	r17, r11
    2030:	8f 2d       	mov	r24, r15
    2032:	61 2f       	mov	r22, r17
    2034:	4c 2d       	mov	r20, r12
    2036:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    203a:	0a 2d       	mov	r16, r10
    203c:	0e 19       	sub	r16, r14
		glcd_set_pixel(x0 - x, y0 + y, color);
    203e:	80 2f       	mov	r24, r16
    2040:	61 2f       	mov	r22, r17
    2042:	4c 2d       	mov	r20, r12
    2044:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		glcd_set_pixel(x0 + x, y0 - y, color);
    2048:	1b 2d       	mov	r17, r11
    204a:	1d 19       	sub	r17, r13
    204c:	8f 2d       	mov	r24, r15
    204e:	61 2f       	mov	r22, r17
    2050:	4c 2d       	mov	r20, r12
    2052:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 - y, color);
    2056:	80 2f       	mov	r24, r16
    2058:	61 2f       	mov	r22, r17
    205a:	4c 2d       	mov	r20, r12
    205c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		
		glcd_set_pixel(x0 + y, y0 + x, color);
    2060:	fd 2c       	mov	r15, r13
    2062:	fa 0c       	add	r15, r10
    2064:	1e 2d       	mov	r17, r14
    2066:	1b 0d       	add	r17, r11
    2068:	8f 2d       	mov	r24, r15
    206a:	61 2f       	mov	r22, r17
    206c:	4c 2d       	mov	r20, r12
    206e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 + x, color);
    2072:	0a 2d       	mov	r16, r10
    2074:	0d 19       	sub	r16, r13
    2076:	80 2f       	mov	r24, r16
    2078:	61 2f       	mov	r22, r17
    207a:	4c 2d       	mov	r20, r12
    207c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    2080:	1b 2d       	mov	r17, r11
    2082:	1e 19       	sub	r17, r14
		glcd_set_pixel(x0 + y, y0 - x, color);
    2084:	8f 2d       	mov	r24, r15
    2086:	61 2f       	mov	r22, r17
    2088:	4c 2d       	mov	r20, r12
    208a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 - x, color);
    208e:	80 2f       	mov	r24, r16
    2090:	61 2f       	mov	r22, r17
    2092:	4c 2d       	mov	r20, r12
    2094:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	88 0e       	add	r8, r24
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
    209c:	ed 14       	cp	r14, r13
    209e:	0c f4       	brge	.+2      	; 0x20a2 <glcd_draw_circle+0x106>
    20a0:	bb cf       	rjmp	.-138    	; 0x2018 <glcd_draw_circle+0x7c>
		glcd_set_pixel(x0 - y, y0 + x, color);
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ff 90       	pop	r15
    20a8:	ef 90       	pop	r14
    20aa:	df 90       	pop	r13
    20ac:	cf 90       	pop	r12
    20ae:	bf 90       	pop	r11
    20b0:	af 90       	pop	r10
    20b2:	9f 90       	pop	r9
    20b4:	8f 90       	pop	r8
    20b6:	7f 90       	pop	r7
    20b8:	08 95       	ret

000020ba <glcd_draw_rect_thick>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8_t color)
{
    20ba:	2f 92       	push	r2
    20bc:	3f 92       	push	r3
    20be:	4f 92       	push	r4
    20c0:	5f 92       	push	r5
    20c2:	6f 92       	push	r6
    20c4:	7f 92       	push	r7
    20c6:	8f 92       	push	r8
    20c8:	9f 92       	push	r9
    20ca:	af 92       	push	r10
    20cc:	bf 92       	push	r11
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <glcd_draw_rect_thick+0x26>
    20e0:	0f 92       	push	r0
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	b8 2e       	mov	r11, r24
    20e8:	a6 2e       	mov	r10, r22
    20ea:	44 2e       	mov	r4, r20
    20ec:	29 83       	std	Y+1, r18	; 0x01
    20ee:	90 2e       	mov	r9, r16
    20f0:	8e 2d       	mov	r24, r14
    20f2:	5c 2c       	mov	r5, r12
	int16_t i, t;
	
	if (tx == 0) {
    20f4:	00 23       	and	r16, r16
    20f6:	11 f4       	brne	.+4      	; 0x20fc <glcd_draw_rect_thick+0x42>
    20f8:	99 24       	eor	r9, r9
    20fa:	93 94       	inc	r9
		tx = 1;
	}

	if (ty == 0) {
    20fc:	88 23       	and	r24, r24
    20fe:	09 f4       	brne	.+2      	; 0x2102 <glcd_draw_rect_thick+0x48>
    2100:	81 e0       	ldi	r24, 0x01	; 1
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    2102:	00 e0       	ldi	r16, 0x00	; 0
    2104:	10 e0       	ldi	r17, 0x00	; 0
    2106:	cb 2c       	mov	r12, r11
    2108:	dd 24       	eor	r13, r13
    210a:	16 01       	movw	r2, r12
    210c:	24 0c       	add	r2, r4
    210e:	31 1c       	adc	r3, r1
    2110:	89 80       	ldd	r8, Y+1	; 0x01
    2112:	8a 0c       	add	r8, r10
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    2114:	68 2e       	mov	r6, r24
    2116:	77 24       	eor	r7, r7
    2118:	18 c0       	rjmp	.+48     	; 0x214a <glcd_draw_rect_thick+0x90>
			glcd_set_pixel(i, y+t, color);
    211a:	6a 81       	ldd	r22, Y+2	; 0x02
    211c:	6a 0d       	add	r22, r10
    211e:	8e 2d       	mov	r24, r14
    2120:	45 2d       	mov	r20, r5
    2122:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
    2126:	8e 2d       	mov	r24, r14
    2128:	6f 2d       	mov	r22, r15
    212a:	45 2d       	mov	r20, r5
    212c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	9b 81       	ldd	r25, Y+3	; 0x03
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	9b 83       	std	Y+3, r25	; 0x03
    2138:	8a 83       	std	Y+2, r24	; 0x02
    213a:	fa 94       	dec	r15
    213c:	ea 81       	ldd	r30, Y+2	; 0x02
    213e:	fb 81       	ldd	r31, Y+3	; 0x03
    2140:	e6 15       	cp	r30, r6
    2142:	f7 05       	cpc	r31, r7
    2144:	54 f3       	brlt	.-44     	; 0x211a <glcd_draw_rect_thick+0x60>
    2146:	0f 5f       	subi	r16, 0xFF	; 255
    2148:	1f 4f       	sbci	r17, 0xFF	; 255

	if (ty == 0) {
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    214a:	c8 01       	movw	r24, r16
    214c:	8c 0d       	add	r24, r12
    214e:	9d 1d       	adc	r25, r13
    2150:	82 15       	cp	r24, r2
    2152:	93 05       	cpc	r25, r3
    2154:	34 f4       	brge	.+12     	; 0x2162 <glcd_draw_rect_thick+0xa8>
    2156:	f8 2c       	mov	r15, r8
    2158:	1b 82       	std	Y+3, r1	; 0x03
    215a:	1a 82       	std	Y+2, r1	; 0x02
    215c:	eb 2c       	mov	r14, r11
    215e:	e0 0e       	add	r14, r16
    2160:	ec cf       	rjmp	.-40     	; 0x213a <glcd_draw_rect_thick+0x80>
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    2162:	00 e0       	ldi	r16, 0x00	; 0
    2164:	10 e0       	ldi	r17, 0x00	; 0
    2166:	ca 2c       	mov	r12, r10
    2168:	dd 24       	eor	r13, r13
    216a:	36 01       	movw	r6, r12
    216c:	f9 81       	ldd	r31, Y+1	; 0x01
    216e:	6f 0e       	add	r6, r31
    2170:	71 1c       	adc	r7, r1
    2172:	34 2c       	mov	r3, r4
    2174:	3b 0c       	add	r3, r11
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    2176:	89 2c       	mov	r8, r9
    2178:	99 24       	eor	r9, r9
    217a:	18 c0       	rjmp	.+48     	; 0x21ac <glcd_draw_rect_thick+0xf2>
			glcd_set_pixel(x+t, i, color);
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	8b 0d       	add	r24, r11
    2180:	6f 2d       	mov	r22, r15
    2182:	45 2d       	mov	r20, r5
    2184:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
			glcd_set_pixel(x+w-1-t, i, color);
    2188:	8e 2d       	mov	r24, r14
    218a:	6f 2d       	mov	r22, r15
    218c:	45 2d       	mov	r20, r5
    218e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	9b 81       	ldd	r25, Y+3	; 0x03
    2196:	01 96       	adiw	r24, 0x01	; 1
    2198:	9b 83       	std	Y+3, r25	; 0x03
    219a:	8a 83       	std	Y+2, r24	; 0x02
    219c:	ea 94       	dec	r14
    219e:	ea 81       	ldd	r30, Y+2	; 0x02
    21a0:	fb 81       	ldd	r31, Y+3	; 0x03
    21a2:	e8 15       	cp	r30, r8
    21a4:	f9 05       	cpc	r31, r9
    21a6:	54 f3       	brlt	.-44     	; 0x217c <glcd_draw_rect_thick+0xc2>
    21a8:	0f 5f       	subi	r16, 0xFF	; 255
    21aa:	1f 4f       	sbci	r17, 0xFF	; 255
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    21ac:	c8 01       	movw	r24, r16
    21ae:	8c 0d       	add	r24, r12
    21b0:	9d 1d       	adc	r25, r13
    21b2:	86 15       	cp	r24, r6
    21b4:	97 05       	cpc	r25, r7
    21b6:	34 f4       	brge	.+12     	; 0x21c4 <glcd_draw_rect_thick+0x10a>
    21b8:	e3 2c       	mov	r14, r3
    21ba:	1b 82       	std	Y+3, r1	; 0x03
    21bc:	1a 82       	std	Y+2, r1	; 0x02
    21be:	fa 2c       	mov	r15, r10
    21c0:	f0 0e       	add	r15, r16
    21c2:	ec cf       	rjmp	.-40     	; 0x219c <glcd_draw_rect_thick+0xe2>
		for (t=0; t<(tx); t++) {
			glcd_set_pixel(x+t, i, color);
			glcd_set_pixel(x+w-1-t, i, color);
		}
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    21c4:	4b 2d       	mov	r20, r11
    21c6:	41 50       	subi	r20, 0x01	; 1
    21c8:	44 0d       	add	r20, r4
    21ca:	2a 2d       	mov	r18, r10
    21cc:	21 50       	subi	r18, 0x01	; 1
    21ce:	f9 81       	ldd	r31, Y+1	; 0x01
    21d0:	2f 0f       	add	r18, r31
    21d2:	8b 2d       	mov	r24, r11
    21d4:	6a 2d       	mov	r22, r10
    21d6:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
}
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	1f 91       	pop	r17
    21e6:	0f 91       	pop	r16
    21e8:	ff 90       	pop	r15
    21ea:	ef 90       	pop	r14
    21ec:	df 90       	pop	r13
    21ee:	cf 90       	pop	r12
    21f0:	bf 90       	pop	r11
    21f2:	af 90       	pop	r10
    21f4:	9f 90       	pop	r9
    21f6:	8f 90       	pop	r8
    21f8:	7f 90       	pop	r7
    21fa:	6f 90       	pop	r6
    21fc:	5f 90       	pop	r5
    21fe:	4f 90       	pop	r4
    2200:	3f 90       	pop	r3
    2202:	2f 90       	pop	r2
    2204:	08 95       	ret

00002206 <glcd_draw_rect>:
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    2206:	6f 92       	push	r6
    2208:	7f 92       	push	r7
    220a:	8f 92       	push	r8
    220c:	9f 92       	push	r9
    220e:	af 92       	push	r10
    2210:	bf 92       	push	r11
    2212:	cf 92       	push	r12
    2214:	df 92       	push	r13
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	e8 2e       	mov	r14, r24
    2224:	f6 2e       	mov	r15, r22
    2226:	a4 2e       	mov	r10, r20
    2228:	72 2e       	mov	r7, r18
    222a:	b0 2e       	mov	r11, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    222c:	c0 e0       	ldi	r28, 0x00	; 0
    222e:	d0 e0       	ldi	r29, 0x00	; 0
    2230:	c8 2e       	mov	r12, r24
    2232:	dd 24       	eor	r13, r13
    2234:	46 01       	movw	r8, r12
    2236:	84 0e       	add	r8, r20
    2238:	91 1c       	adc	r9, r1
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
    223a:	fa 94       	dec	r15
    223c:	0f 2d       	mov	r16, r15
    223e:	02 0f       	add	r16, r18
    2240:	f3 94       	inc	r15
    2242:	0d c0       	rjmp	.+26     	; 0x225e <glcd_draw_rect+0x58>
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    2244:	1e 2d       	mov	r17, r14
    2246:	1c 0f       	add	r17, r28
		glcd_set_pixel(i, y, color);
    2248:	81 2f       	mov	r24, r17
    224a:	6f 2d       	mov	r22, r15
    224c:	4b 2d       	mov	r20, r11
    224e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		glcd_set_pixel(i, y+h-1, color);
    2252:	81 2f       	mov	r24, r17
    2254:	60 2f       	mov	r22, r16
    2256:	4b 2d       	mov	r20, r11
    2258:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    225c:	21 96       	adiw	r28, 0x01	; 1
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    225e:	ce 01       	movw	r24, r28
    2260:	8c 0d       	add	r24, r12
    2262:	9d 1d       	adc	r25, r13
    2264:	88 15       	cp	r24, r8
    2266:	99 05       	cpc	r25, r9
    2268:	6c f3       	brlt	.-38     	; 0x2244 <glcd_draw_rect+0x3e>
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    226a:	c0 e0       	ldi	r28, 0x00	; 0
    226c:	d0 e0       	ldi	r29, 0x00	; 0
    226e:	cf 2c       	mov	r12, r15
    2270:	dd 24       	eor	r13, r13
    2272:	46 01       	movw	r8, r12
    2274:	87 0c       	add	r8, r7
    2276:	91 1c       	adc	r9, r1
    2278:	0e 2d       	mov	r16, r14
    227a:	01 50       	subi	r16, 0x01	; 1
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
    227c:	60 2e       	mov	r6, r16
    227e:	6a 0c       	add	r6, r10
    2280:	0d c0       	rjmp	.+26     	; 0x229c <glcd_draw_rect+0x96>
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    2282:	1f 2d       	mov	r17, r15
    2284:	1c 0f       	add	r17, r28
		glcd_set_pixel(x, i, color);
    2286:	8e 2d       	mov	r24, r14
    2288:	61 2f       	mov	r22, r17
    228a:	4b 2d       	mov	r20, r11
    228c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		glcd_set_pixel(x+w-1, i, color);
    2290:	86 2d       	mov	r24, r6
    2292:	61 2f       	mov	r22, r17
    2294:	4b 2d       	mov	r20, r11
    2296:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    229a:	21 96       	adiw	r28, 0x01	; 1
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    229c:	ce 01       	movw	r24, r28
    229e:	8c 0d       	add	r24, r12
    22a0:	9d 1d       	adc	r25, r13
    22a2:	88 15       	cp	r24, r8
    22a4:	99 05       	cpc	r25, r9
    22a6:	6c f3       	brlt	.-38     	; 0x2282 <glcd_draw_rect+0x7c>
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    22a8:	0a 0d       	add	r16, r10
    22aa:	2f 2d       	mov	r18, r15
    22ac:	21 50       	subi	r18, 0x01	; 1
    22ae:	27 0d       	add	r18, r7
    22b0:	8e 2d       	mov	r24, r14
    22b2:	6f 2d       	mov	r22, r15
    22b4:	40 2f       	mov	r20, r16
    22b6:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
}
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	cf 90       	pop	r12
    22ca:	bf 90       	pop	r11
    22cc:	af 90       	pop	r10
    22ce:	9f 90       	pop	r9
    22d0:	8f 90       	pop	r8
    22d2:	7f 90       	pop	r7
    22d4:	6f 90       	pop	r6
    22d6:	08 95       	ret

000022d8 <glcd_fill_rect>:
		}
	}
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    22d8:	2f 92       	push	r2
    22da:	3f 92       	push	r3
    22dc:	4f 92       	push	r4
    22de:	5f 92       	push	r5
    22e0:	6f 92       	push	r6
    22e2:	7f 92       	push	r7
    22e4:	8f 92       	push	r8
    22e6:	9f 92       	push	r9
    22e8:	af 92       	push	r10
    22ea:	bf 92       	push	r11
    22ec:	cf 92       	push	r12
    22ee:	df 92       	push	r13
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	d8 2e       	mov	r13, r24
    22fe:	c6 2e       	mov	r12, r22
    2300:	44 2e       	mov	r4, r20
    2302:	32 2e       	mov	r3, r18
    2304:	20 2e       	mov	r2, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    2306:	00 e0       	ldi	r16, 0x00	; 0
    2308:	10 e0       	ldi	r17, 0x00	; 0
    230a:	a8 2e       	mov	r10, r24
    230c:	bb 24       	eor	r11, r11
    230e:	35 01       	movw	r6, r10
    2310:	64 0e       	add	r6, r20
    2312:	71 1c       	adc	r7, r1
		int16_t j;
		for (j=y; j<y+h; j++) {
    2314:	e6 2e       	mov	r14, r22
    2316:	ff 24       	eor	r15, r15
    2318:	47 01       	movw	r8, r14
    231a:	82 0e       	add	r8, r18
    231c:	91 1c       	adc	r9, r1
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <glcd_fill_rect+0x70>
    2320:	c0 e0       	ldi	r28, 0x00	; 0
    2322:	d0 e0       	ldi	r29, 0x00	; 0
			glcd_set_pixel(i, j, color);
    2324:	5d 2c       	mov	r5, r13
    2326:	50 0e       	add	r5, r16
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <glcd_fill_rect+0x60>
    232a:	6c 2d       	mov	r22, r12
    232c:	6c 0f       	add	r22, r28
    232e:	85 2d       	mov	r24, r5
    2330:	42 2d       	mov	r20, r2
    2332:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
    2336:	21 96       	adiw	r28, 0x01	; 1
void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
		int16_t j;
		for (j=y; j<y+h; j++) {
    2338:	ce 01       	movw	r24, r28
    233a:	8e 0d       	add	r24, r14
    233c:	9f 1d       	adc	r25, r15
    233e:	88 15       	cp	r24, r8
    2340:	99 05       	cpc	r25, r9
    2342:	9c f3       	brlt	.-26     	; 0x232a <glcd_fill_rect+0x52>
    2344:	0f 5f       	subi	r16, 0xFF	; 255
    2346:	1f 4f       	sbci	r17, 0xFF	; 255
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    2348:	c8 01       	movw	r24, r16
    234a:	8a 0d       	add	r24, r10
    234c:	9b 1d       	adc	r25, r11
    234e:	86 15       	cp	r24, r6
    2350:	97 05       	cpc	r25, r7
    2352:	34 f3       	brlt	.-52     	; 0x2320 <glcd_fill_rect+0x48>
		int16_t j;
		for (j=y; j<y+h; j++) {
			glcd_set_pixel(i, j, color);
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    2354:	4d 2d       	mov	r20, r13
    2356:	41 50       	subi	r20, 0x01	; 1
    2358:	44 0d       	add	r20, r4
    235a:	2c 2d       	mov	r18, r12
    235c:	21 50       	subi	r18, 0x01	; 1
    235e:	23 0d       	add	r18, r3
    2360:	8d 2d       	mov	r24, r13
    2362:	6c 2d       	mov	r22, r12
    2364:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
}
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	df 90       	pop	r13
    2376:	cf 90       	pop	r12
    2378:	bf 90       	pop	r11
    237a:	af 90       	pop	r10
    237c:	9f 90       	pop	r9
    237e:	8f 90       	pop	r8
    2380:	7f 90       	pop	r7
    2382:	6f 90       	pop	r6
    2384:	5f 90       	pop	r5
    2386:	4f 90       	pop	r4
    2388:	3f 90       	pop	r3
    238a:	2f 90       	pop	r2
    238c:	08 95       	ret

0000238e <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
    238e:	9f 92       	push	r9
    2390:	af 92       	push	r10
    2392:	bf 92       	push	r11
    2394:	cf 92       	push	r12
    2396:	df 92       	push	r13
    2398:	ef 92       	push	r14
    239a:	ff 92       	push	r15
    239c:	0f 93       	push	r16
    239e:	1f 93       	push	r17
    23a0:	f8 2e       	mov	r15, r24
    23a2:	e6 2e       	mov	r14, r22
    23a4:	d4 2e       	mov	r13, r20
    23a6:	12 2f       	mov	r17, r18
    23a8:	90 2e       	mov	r9, r16
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    23aa:	aa 24       	eor	r10, r10
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	26 1b       	sub	r18, r22
    23b0:	31 09       	sbc	r19, r1
    23b2:	37 ff       	sbrs	r19, 7
    23b4:	03 c0       	rjmp	.+6      	; 0x23bc <glcd_draw_line+0x2e>
    23b6:	30 95       	com	r19
    23b8:	21 95       	neg	r18
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	8d 2d       	mov	r24, r13
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	8f 19       	sub	r24, r15
    23c2:	91 09       	sbc	r25, r1
    23c4:	97 ff       	sbrs	r25, 7
    23c6:	03 c0       	rjmp	.+6      	; 0x23ce <glcd_draw_line+0x40>
    23c8:	90 95       	com	r25
    23ca:	81 95       	neg	r24
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	82 17       	cp	r24, r18
    23d0:	93 07       	cpc	r25, r19
    23d2:	44 f4       	brge	.+16     	; 0x23e4 <glcd_draw_line+0x56>
    23d4:	aa 24       	eor	r10, r10
    23d6:	a3 94       	inc	r10
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
    23d8:	8e 2d       	mov	r24, r14
    23da:	ef 2c       	mov	r14, r15
    23dc:	f8 2e       	mov	r15, r24
    23de:	81 2f       	mov	r24, r17
    23e0:	1d 2d       	mov	r17, r13
    23e2:	d8 2e       	mov	r13, r24
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
    23e4:	df 14       	cp	r13, r15
    23e6:	30 f4       	brcc	.+12     	; 0x23f4 <glcd_draw_line+0x66>
    23e8:	8d 2d       	mov	r24, r13
    23ea:	df 2c       	mov	r13, r15
    23ec:	f8 2e       	mov	r15, r24
    23ee:	81 2f       	mov	r24, r17
    23f0:	1e 2d       	mov	r17, r14
    23f2:	e8 2e       	mov	r14, r24
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
    23f4:	8f 2d       	mov	r24, r15
    23f6:	6e 2d       	mov	r22, r14
    23f8:	4d 2d       	mov	r20, r13
    23fa:	21 2f       	mov	r18, r17
    23fc:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>

	dx = x1 - x0;
    2400:	cd 2c       	mov	r12, r13
    2402:	cf 18       	sub	r12, r15
	dy = abs(y1 - y0);
    2404:	81 2f       	mov	r24, r17
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	8e 19       	sub	r24, r14
    240a:	91 09       	sbc	r25, r1
    240c:	97 ff       	sbrs	r25, 7
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <glcd_draw_line+0x88>
    2410:	90 95       	com	r25
    2412:	81 95       	neg	r24
    2414:	9f 4f       	sbci	r25, 0xFF	; 255
    2416:	b8 2e       	mov	r11, r24
	
	err = dx / 2;
	
	if (y0 < y1) {
    2418:	e1 16       	cp	r14, r17
    241a:	10 f0       	brcs	.+4      	; 0x2420 <glcd_draw_line+0x92>
    241c:	0f ef       	ldi	r16, 0xFF	; 255
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <glcd_draw_line+0x94>
    2420:	01 e0       	ldi	r16, 0x01	; 1
	glcd_update_bbox( x0, y0, x1, y1 );

	dx = x1 - x0;
	dy = abs(y1 - y0);
	
	err = dx / 2;
    2422:	1c 2d       	mov	r17, r12
    2424:	16 95       	lsr	r17
    2426:	10 c0       	rjmp	.+32     	; 0x2448 <glcd_draw_line+0xba>
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
		if (steep) {
    2428:	aa 20       	and	r10, r10
    242a:	19 f0       	breq	.+6      	; 0x2432 <glcd_draw_line+0xa4>
			glcd_set_pixel(y0, x0, color);
    242c:	8e 2d       	mov	r24, r14
    242e:	6f 2d       	mov	r22, r15
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <glcd_draw_line+0xa8>
		} else {
			glcd_set_pixel(x0, y0, color);
    2432:	8f 2d       	mov	r24, r15
    2434:	6e 2d       	mov	r22, r14
    2436:	49 2d       	mov	r20, r9
    2438:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
		}
		err -= dy;
    243c:	1b 19       	sub	r17, r11
		if (err < 0) {
    243e:	17 ff       	sbrs	r17, 7
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <glcd_draw_line+0xb8>
			y0 += ystep;
    2442:	e0 0e       	add	r14, r16
			err += dx;
    2444:	1c 0d       	add	r17, r12
		ystep = 1;
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
    2446:	f3 94       	inc	r15
    2448:	df 14       	cp	r13, r15
    244a:	70 f7       	brcc	.-36     	; 0x2428 <glcd_draw_line+0x9a>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	ff 90       	pop	r15
    2452:	ef 90       	pop	r14
    2454:	df 90       	pop	r13
    2456:	cf 90       	pop	r12
    2458:	bf 90       	pop	r11
    245a:	af 90       	pop	r10
    245c:	9f 90       	pop	r9
    245e:	08 95       	ret

00002460 <glcd_draw_rect_shadow>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    2460:	cf 92       	push	r12
    2462:	df 92       	push	r13
    2464:	ef 92       	push	r14
    2466:	ff 92       	push	r15
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	e8 2e       	mov	r14, r24
    246e:	d6 2e       	mov	r13, r22
    2470:	14 2f       	mov	r17, r20
    2472:	f2 2e       	mov	r15, r18
	glcd_draw_rect(x, y, w, h, color);
    2474:	0e 94 03 11 	call	0x2206	; 0x2206 <glcd_draw_rect>
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
    2478:	1e 0d       	add	r17, r14
    247a:	fd 0c       	add	r15, r13
    247c:	8e 2d       	mov	r24, r14
    247e:	8f 5f       	subi	r24, 0xFF	; 255
    2480:	6f 2d       	mov	r22, r15
    2482:	41 2f       	mov	r20, r17
    2484:	2f 2d       	mov	r18, r15
    2486:	0e 94 c7 11 	call	0x238e	; 0x238e <glcd_draw_line>
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
    248a:	d3 94       	inc	r13
    248c:	81 2f       	mov	r24, r17
    248e:	6d 2d       	mov	r22, r13
    2490:	41 2f       	mov	r20, r17
    2492:	2f 2d       	mov	r18, r15
    2494:	0e 94 c7 11 	call	0x238e	; 0x238e <glcd_draw_line>
}
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	ff 90       	pop	r15
    249e:	ef 90       	pop	r14
    24a0:	df 90       	pop	r13
    24a2:	cf 90       	pop	r12
    24a4:	08 95       	ret

000024a6 <glcd_test_bitmap_128x64>:
}

#if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
void glcd_test_bitmap_128x64(void)
{
	glcd_draw_bitmap(bmp_oslogo);
    24a6:	88 e4       	ldi	r24, 0x48	; 72
    24a8:	92 e0       	ldi	r25, 0x02	; 2
    24aa:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <glcd_draw_bitmap>
	glcd_write();	
    24ae:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
	while (1) {
		DEMO_RETURN();
    24b2:	80 91 71 01 	lds	r24, 0x0171
    24b6:	88 23       	and	r24, r24
    24b8:	e1 f3       	breq	.-8      	; 0x24b2 <glcd_test_bitmap_128x64+0xc>
    24ba:	10 92 71 01 	sts	0x0171, r1
	}
}
    24be:	08 95       	ret

000024c0 <glcd_test_scrolling_graph>:
	}
	
}

void glcd_test_scrolling_graph(void)
{
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
	glcd_clear();
    24c8:	0e 94 00 09 	call	0x1200	; 0x1200 <glcd_clear>
	glcd_write();
    24cc:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    24d0:	40 c0       	rjmp	.+128    	; 0x2552 <glcd_test_scrolling_graph+0x92>
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,n);
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	42 e3       	ldi	r20, 0x32	; 50
    24d8:	22 e3       	ldi	r18, 0x32	; 50
    24da:	0c 2f       	mov	r16, r28
    24dc:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    24e0:	8c e3       	ldi	r24, 0x3C	; 60
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	42 e3       	ldi	r20, 0x32	; 50
    24e6:	2e e1       	ldi	r18, 0x1E	; 30
    24e8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    24ec:	8c e3       	ldi	r24, 0x3C	; 60
    24ee:	63 e2       	ldi	r22, 0x23	; 35
    24f0:	4c e3       	ldi	r20, 0x3C	; 60
    24f2:	24 e1       	ldi	r18, 0x14	; 20
    24f4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    24f8:	80 91 71 01 	lds	r24, 0x0171
    24fc:	88 23       	and	r24, r24
    24fe:	f9 f4       	brne	.+62     	; 0x253e <glcd_test_scrolling_graph+0x7e>
{
	glcd_clear();
	glcd_write();
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
    2500:	64 96       	adiw	r28, 0x14	; 20
    2502:	cf 3f       	cpi	r28, 0xFF	; 255
    2504:	d1 05       	cpc	r29, r1
    2506:	29 f3       	breq	.-54     	; 0x24d2 <glcd_test_scrolling_graph+0x12>
    2508:	20 f3       	brcs	.-56     	; 0x24d2 <glcd_test_scrolling_graph+0x12>
    250a:	10 e0       	ldi	r17, 0x00	; 0
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
    250c:	01 2f       	mov	r16, r17
    250e:	00 95       	com	r16
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	42 e3       	ldi	r20, 0x32	; 50
    2516:	22 e3       	ldi	r18, 0x32	; 50
    2518:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    251c:	8c e3       	ldi	r24, 0x3C	; 60
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	42 e3       	ldi	r20, 0x32	; 50
    2522:	2e e1       	ldi	r18, 0x1E	; 30
    2524:	01 2f       	mov	r16, r17
    2526:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    252a:	8c e3       	ldi	r24, 0x3C	; 60
    252c:	63 e2       	ldi	r22, 0x23	; 35
    252e:	4c e3       	ldi	r20, 0x3C	; 60
    2530:	24 e1       	ldi	r18, 0x14	; 20
    2532:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    2536:	80 91 71 01 	lds	r24, 0x0171
    253a:	88 23       	and	r24, r24
    253c:	39 f0       	breq	.+14     	; 0x254c <glcd_test_scrolling_graph+0x8c>
    253e:	10 92 71 01 	sts	0x0171, r1
		}
	}	
}
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	08 95       	ret
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
    254c:	1c 5e       	subi	r17, 0xEC	; 236
			glcd_scrolling_bar_graph(0,0,50,50,n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
    254e:	14 30       	cpi	r17, 0x04	; 4
    2550:	e9 f6       	brne	.-70     	; 0x250c <glcd_test_scrolling_graph+0x4c>
    2552:	c0 e0       	ldi	r28, 0x00	; 0
    2554:	d0 e0       	ldi	r29, 0x00	; 0
    2556:	d5 cf       	rjmp	.-86     	; 0x2502 <glcd_test_scrolling_graph+0x42>

00002558 <glcd_test_hello_world>:
	}

}

void glcd_test_hello_world(void)
{
    2558:	0f 93       	push	r16
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    255a:	80 eb       	ldi	r24, 0xB0	; 176
    255c:	97 e0       	ldi	r25, 0x07	; 7
    255e:	65 e0       	ldi	r22, 0x05	; 5
    2560:	47 e0       	ldi	r20, 0x07	; 7
    2562:	20 e2       	ldi	r18, 0x20	; 32
    2564:	0f e7       	ldi	r16, 0x7F	; 127
    2566:	0e 94 6f 15 	call	0x2ade	; 0x2ade <glcd_tiny_set_font>
	glcd_clear_buffer();
    256a:	0e 94 ed 08 	call	0x11da	; 0x11da <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"Hello World!");
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	46 e0       	ldi	r20, 0x06	; 6
    2574:	51 e0       	ldi	r21, 0x01	; 1
    2576:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <glcd_tiny_draw_string>
	glcd_write();
    257a:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
	while(1) {
		DEMO_RETURN();
    257e:	80 91 71 01 	lds	r24, 0x0171
    2582:	88 23       	and	r24, r24
    2584:	e1 f3       	breq	.-8      	; 0x257e <glcd_test_hello_world+0x26>
    2586:	10 92 71 01 	sts	0x0171, r1
	}
}
    258a:	0f 91       	pop	r16
    258c:	08 95       	ret

0000258e <glcd_test_rectangles>:

void glcd_test_rectangles(void)
{
    258e:	cf 92       	push	r12
    2590:	ef 92       	push	r14
    2592:	0f 93       	push	r16
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    2598:	80 eb       	ldi	r24, 0xB0	; 176
    259a:	97 e0       	ldi	r25, 0x07	; 7
    259c:	65 e0       	ldi	r22, 0x05	; 5
    259e:	47 e0       	ldi	r20, 0x07	; 7
    25a0:	20 e2       	ldi	r18, 0x20	; 32
    25a2:	0f e7       	ldi	r16, 0x7F	; 127
    25a4:	0e 94 6f 15 	call	0x2ade	; 0x2ade <glcd_tiny_set_font>
	glcd_clear_buffer();
    25a8:	0e 94 ed 08 	call	0x11da	; 0x11da <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	43 e1       	ldi	r20, 0x13	; 19
    25b2:	51 e0       	ldi	r21, 0x01	; 1
    25b4:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <glcd_tiny_draw_string>
	glcd_write();
    25b8:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    25bc:	80 ed       	ldi	r24, 0xD0	; 208
    25be:	97 e0       	ldi	r25, 0x07	; 7
    25c0:	20 e9       	ldi	r18, 0x90	; 144
    25c2:	31 e0       	ldi	r19, 0x01	; 1
    25c4:	f9 01       	movw	r30, r18
    25c6:	31 97       	sbiw	r30, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <glcd_test_rectangles+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	d9 f7       	brne	.-10     	; 0x25c4 <glcd_test_rectangles+0x36>
    25ce:	c0 e9       	ldi	r28, 0x90	; 144
    25d0:	d1 e0       	ldi	r29, 0x01	; 1
	delay_ms(200);
	
	while(1) {
		
		glcd_clear();
    25d2:	0e 94 00 09 	call	0x1200	; 0x1200 <glcd_clear>
		glcd_draw_rect(0,0,100,50,BLACK);
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	44 e6       	ldi	r20, 0x64	; 100
    25dc:	22 e3       	ldi	r18, 0x32	; 50
    25de:	01 e0       	ldi	r16, 0x01	; 1
    25e0:	0e 94 03 11 	call	0x2206	; 0x2206 <glcd_draw_rect>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	69 e0       	ldi	r22, 0x09	; 9
    25e8:	42 e2       	ldi	r20, 0x22	; 34
    25ea:	51 e0       	ldi	r21, 0x01	; 1
    25ec:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <glcd_tiny_draw_string>
		glcd_write();
    25f0:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    25f4:	88 e8       	ldi	r24, 0x88	; 136
    25f6:	93 e1       	ldi	r25, 0x13	; 19
    25f8:	fe 01       	movw	r30, r28
    25fa:	31 97       	sbiw	r30, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <glcd_test_rectangles+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2600:	d9 f7       	brne	.-10     	; 0x25f8 <glcd_test_rectangles+0x6a>
		delay_ms(500);
		DEMO_RETURN();
    2602:	80 91 71 01 	lds	r24, 0x0171
    2606:	88 23       	and	r24, r24
    2608:	09 f0       	breq	.+2      	; 0x260c <glcd_test_rectangles+0x7e>
    260a:	85 c0       	rjmp	.+266    	; 0x2716 <glcd_test_rectangles+0x188>
		
		glcd_clear();
    260c:	0e 94 00 09 	call	0x1200	; 0x1200 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	69 e0       	ldi	r22, 0x09	; 9
    2614:	41 e3       	ldi	r20, 0x31	; 49
    2616:	51 e0       	ldi	r21, 0x01	; 1
    2618:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <glcd_tiny_draw_string>
		glcd_write();
    261c:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>

		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
    2620:	85 e0       	ldi	r24, 0x05	; 5
    2622:	65 e0       	ldi	r22, 0x05	; 5
    2624:	40 e5       	ldi	r20, 0x50	; 80
    2626:	2e e1       	ldi	r18, 0x1E	; 30
    2628:	03 e0       	ldi	r16, 0x03	; 3
    262a:	56 e0       	ldi	r21, 0x06	; 6
    262c:	e5 2e       	mov	r14, r21
    262e:	cc 24       	eor	r12, r12
    2630:	c3 94       	inc	r12
    2632:	0e 94 5d 10 	call	0x20ba	; 0x20ba <glcd_draw_rect_thick>
		glcd_write();
    2636:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    263a:	88 e8       	ldi	r24, 0x88	; 136
    263c:	93 e1       	ldi	r25, 0x13	; 19
    263e:	fe 01       	movw	r30, r28
    2640:	31 97       	sbiw	r30, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <glcd_test_rectangles+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2646:	d9 f7       	brne	.-10     	; 0x263e <glcd_test_rectangles+0xb0>
		delay_ms(500);
		DEMO_RETURN();
    2648:	80 91 71 01 	lds	r24, 0x0171
    264c:	88 23       	and	r24, r24
    264e:	09 f0       	breq	.+2      	; 0x2652 <glcd_test_rectangles+0xc4>
    2650:	62 c0       	rjmp	.+196    	; 0x2716 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	44 e1       	ldi	r20, 0x14	; 20
    2658:	24 e1       	ldi	r18, 0x14	; 20
    265a:	02 e0       	ldi	r16, 0x02	; 2
    265c:	32 e0       	ldi	r19, 0x02	; 2
    265e:	e3 2e       	mov	r14, r19
    2660:	cc 24       	eor	r12, r12
    2662:	c3 94       	inc	r12
    2664:	0e 94 5d 10 	call	0x20ba	; 0x20ba <glcd_draw_rect_thick>
		glcd_write();
    2668:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    266c:	88 e8       	ldi	r24, 0x88	; 136
    266e:	93 e1       	ldi	r25, 0x13	; 19
    2670:	fe 01       	movw	r30, r28
    2672:	31 97       	sbiw	r30, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <glcd_test_rectangles+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2676:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2678:	d9 f7       	brne	.-10     	; 0x2670 <glcd_test_rectangles+0xe2>
		delay_ms(500);
		DEMO_RETURN();
    267a:	80 91 71 01 	lds	r24, 0x0171
    267e:	88 23       	and	r24, r24
    2680:	09 f0       	breq	.+2      	; 0x2684 <glcd_test_rectangles+0xf6>
    2682:	49 c0       	rjmp	.+146    	; 0x2716 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
    2684:	84 e6       	ldi	r24, 0x64	; 100
    2686:	6a e0       	ldi	r22, 0x0A	; 10
    2688:	44 e1       	ldi	r20, 0x14	; 20
    268a:	24 e1       	ldi	r18, 0x14	; 20
    268c:	05 e0       	ldi	r16, 0x05	; 5
    268e:	95 e0       	ldi	r25, 0x05	; 5
    2690:	e9 2e       	mov	r14, r25
    2692:	cc 24       	eor	r12, r12
    2694:	c3 94       	inc	r12
    2696:	0e 94 5d 10 	call	0x20ba	; 0x20ba <glcd_draw_rect_thick>
		glcd_write();
    269a:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    269e:	88 e8       	ldi	r24, 0x88	; 136
    26a0:	93 e1       	ldi	r25, 0x13	; 19
    26a2:	fe 01       	movw	r30, r28
    26a4:	31 97       	sbiw	r30, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <glcd_test_rectangles+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	d9 f7       	brne	.-10     	; 0x26a2 <glcd_test_rectangles+0x114>
		delay_ms(500);
		DEMO_RETURN();
    26ac:	80 91 71 01 	lds	r24, 0x0171
    26b0:	88 23       	and	r24, r24
    26b2:	89 f5       	brne	.+98     	; 0x2716 <glcd_test_rectangles+0x188>

		glcd_clear();
    26b4:	0e 94 00 09 	call	0x1200	; 0x1200 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	69 e0       	ldi	r22, 0x09	; 9
    26bc:	46 e4       	ldi	r20, 0x46	; 70
    26be:	51 e0       	ldi	r21, 0x01	; 1
    26c0:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <glcd_tiny_draw_string>
		glcd_draw_rect_shadow(0,0,45,30,BLACK);
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	4d e2       	ldi	r20, 0x2D	; 45
    26ca:	2e e1       	ldi	r18, 0x1E	; 30
    26cc:	01 e0       	ldi	r16, 0x01	; 1
    26ce:	0e 94 30 12 	call	0x2460	; 0x2460 <glcd_draw_rect_shadow>
		glcd_write();
    26d2:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    26d6:	88 e8       	ldi	r24, 0x88	; 136
    26d8:	93 e1       	ldi	r25, 0x13	; 19
    26da:	fe 01       	movw	r30, r28
    26dc:	31 97       	sbiw	r30, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <glcd_test_rectangles+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e2:	d9 f7       	brne	.-10     	; 0x26da <glcd_test_rectangles+0x14c>
		delay_ms(500);
		DEMO_RETURN();
    26e4:	80 91 71 01 	lds	r24, 0x0171
    26e8:	88 23       	and	r24, r24
    26ea:	a9 f4       	brne	.+42     	; 0x2716 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_shadow(95,5,30,30,BLACK);
    26ec:	8f e5       	ldi	r24, 0x5F	; 95
    26ee:	65 e0       	ldi	r22, 0x05	; 5
    26f0:	4e e1       	ldi	r20, 0x1E	; 30
    26f2:	2e e1       	ldi	r18, 0x1E	; 30
    26f4:	01 e0       	ldi	r16, 0x01	; 1
    26f6:	0e 94 30 12 	call	0x2460	; 0x2460 <glcd_draw_rect_shadow>
		glcd_write();
    26fa:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    26fe:	88 e8       	ldi	r24, 0x88	; 136
    2700:	93 e1       	ldi	r25, 0x13	; 19
    2702:	fe 01       	movw	r30, r28
    2704:	31 97       	sbiw	r30, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <glcd_test_rectangles+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	d9 f7       	brne	.-10     	; 0x2702 <glcd_test_rectangles+0x174>
		delay_ms(500);
		DEMO_RETURN();
    270c:	80 91 71 01 	lds	r24, 0x0171
    2710:	88 23       	and	r24, r24
    2712:	09 f4       	brne	.+2      	; 0x2716 <glcd_test_rectangles+0x188>
    2714:	5e cf       	rjmp	.-324    	; 0x25d2 <glcd_test_rectangles+0x44>
    2716:	10 92 71 01 	sts	0x0171, r1
		
	}
	
}
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	0f 91       	pop	r16
    2720:	ef 90       	pop	r14
    2722:	cf 90       	pop	r12
    2724:	08 95       	ret

00002726 <glcd_test_tiny_text>:
	}

}

void glcd_test_tiny_text(void)
{
    2726:	af 92       	push	r10
    2728:	bf 92       	push	r11
    272a:	cf 92       	push	r12
    272c:	df 92       	push	r13
    272e:	ef 92       	push	r14
    2730:	ff 92       	push	r15
    2732:	0f 93       	push	r16
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	2f 97       	sbiw	r28, 0x0f	; 15
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    2748:	80 eb       	ldi	r24, 0xB0	; 176
    274a:	97 e0       	ldi	r25, 0x07	; 7
    274c:	65 e0       	ldi	r22, 0x05	; 5
    274e:	47 e0       	ldi	r20, 0x07	; 7
    2750:	20 e2       	ldi	r18, 0x20	; 32
    2752:	0f e7       	ldi	r16, 0x7F	; 127
    2754:	0e 94 6f 15 	call	0x2ade	; 0x2ade <glcd_tiny_set_font>
    2758:	00 e2       	ldi	r16, 0x20	; 32
    275a:	7e 01       	movw	r14, r28
    275c:	08 94       	sec
    275e:	e1 1c       	adc	r14, r1
    2760:	f1 1c       	adc	r15, r1
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2762:	7f e0       	ldi	r23, 0x0F	; 15
    2764:	a7 2e       	mov	r10, r23
    2766:	b1 2c       	mov	r11, r1
    2768:	ac 0e       	add	r10, r28
    276a:	bd 1e       	adc	r11, r29
    276c:	60 e9       	ldi	r22, 0x90	; 144
    276e:	c6 2e       	mov	r12, r22
    2770:	61 e0       	ldi	r22, 0x01	; 1
    2772:	d6 2e       	mov	r13, r22
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    2774:	f7 01       	movw	r30, r14
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
			string[i] = c;
    2776:	00 83       	st	Z, r16
			c++;
    2778:	0f 5f       	subi	r16, 0xFF	; 255
			if (c > 127) {
    277a:	07 fd       	sbrc	r16, 7
    277c:	00 e2       	ldi	r16, 0x20	; 32
    277e:	31 96       	adiw	r30, 0x01	; 1
	GLCD_TEXT_INIT();
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2780:	ea 15       	cp	r30, r10
    2782:	fb 05       	cpc	r31, r11
    2784:	c1 f7       	brne	.-16     	; 0x2776 <glcd_test_tiny_text+0x50>
				c = 32;
			}
		}

		// write null terminator
		string[len] = '\0';
    2786:	1f 86       	std	Y+15, r1	; 0x0f

		GLCD_WRITE(string);
    2788:	c7 01       	movw	r24, r14
    278a:	0e 94 f5 16 	call	0x2dea	; 0x2dea <glcd_tiny_draw_string_ammend>
		
		DEMO_RETURN();
    278e:	80 91 71 01 	lds	r24, 0x0171
    2792:	88 23       	and	r24, r24
    2794:	91 f0       	breq	.+36     	; 0x27ba <glcd_test_tiny_text+0x94>
    2796:	10 92 71 01 	sts	0x0171, r1
		
		delay_ms(1000);
	}

}
    279a:	2f 96       	adiw	r28, 0x0f	; 15
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	0f 91       	pop	r16
    27ac:	ff 90       	pop	r15
    27ae:	ef 90       	pop	r14
    27b0:	df 90       	pop	r13
    27b2:	cf 90       	pop	r12
    27b4:	bf 90       	pop	r11
    27b6:	af 90       	pop	r10
    27b8:	08 95       	ret
		// write null terminator
		string[len] = '\0';

		GLCD_WRITE(string);
		
		DEMO_RETURN();
    27ba:	80 e1       	ldi	r24, 0x10	; 16
    27bc:	97 e2       	ldi	r25, 0x27	; 39
    27be:	f6 01       	movw	r30, r12
    27c0:	31 97       	sbiw	r30, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <glcd_test_tiny_text+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c6:	d9 f7       	brne	.-10     	; 0x27be <glcd_test_tiny_text+0x98>
    27c8:	d5 cf       	rjmp	.-86     	; 0x2774 <glcd_test_tiny_text+0x4e>

000027ca <glcd_test_text_up_down>:
		DEMO_RETURN();
	}
}

void glcd_test_text_up_down(void)
{
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29

	uint8_t y;
	uint8_t max_y;
	
	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    27d2:	80 e9       	ldi	r24, 0x90	; 144
    27d4:	99 e0       	ldi	r25, 0x09	; 9
    27d6:	6f e0       	ldi	r22, 0x0F	; 15
    27d8:	45 e1       	ldi	r20, 0x15	; 21
    27da:	2e e2       	ldi	r18, 0x2E	; 46
    27dc:	09 e3       	ldi	r16, 0x39	; 57
    27de:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <glcd_set_font>
	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
    27e2:	1e e2       	ldi	r17, 0x2E	; 46
    27e4:	80 91 95 03 	lds	r24, 0x0395
    27e8:	18 1b       	sub	r17, r24
    27ea:	00 e0       	ldi	r16, 0x00	; 0
    27ec:	c0 e9       	ldi	r28, 0x90	; 144
    27ee:	d1 e0       	ldi	r29, 0x01	; 1
    27f0:	16 c0       	rjmp	.+44     	; 0x281e <glcd_test_text_up_down+0x54>

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
			DEMO_RETURN();
    27f2:	80 91 71 01 	lds	r24, 0x0171
    27f6:	88 23       	and	r24, r24
    27f8:	d1 f4       	brne	.+52     	; 0x282e <glcd_test_text_up_down+0x64>
			glcd_clear_buffer();
    27fa:	0e 94 ed 08 	call	0x11da	; 0x11da <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"123");
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	60 2f       	mov	r22, r16
    2802:	4c e5       	ldi	r20, 0x5C	; 92
    2804:	51 e0       	ldi	r21, 0x01	; 1
    2806:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_draw_string_xy>
			glcd_write();
    280a:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    280e:	80 e2       	ldi	r24, 0x20	; 32
    2810:	93 e0       	ldi	r25, 0x03	; 3
    2812:	fe 01       	movw	r30, r28
    2814:	31 97       	sbiw	r30, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <glcd_test_text_up_down+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2818:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	d9 f7       	brne	.-10     	; 0x2812 <glcd_test_text_up_down+0x48>

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
    281c:	0f 5f       	subi	r16, 0xFF	; 255
    281e:	01 17       	cp	r16, r17
    2820:	40 f3       	brcs	.-48     	; 0x27f2 <glcd_test_text_up_down+0x28>
    2822:	01 2f       	mov	r16, r17
    2824:	1d c0       	rjmp	.+58     	; 0x2860 <glcd_test_text_up_down+0x96>
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
    2826:	80 91 71 01 	lds	r24, 0x0171
    282a:	88 23       	and	r24, r24
    282c:	39 f0       	breq	.+14     	; 0x283c <glcd_test_text_up_down+0x72>
    282e:	10 92 71 01 	sts	0x0171, r1
			delay_ms(80);
		}
		
	}

}
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	08 95       	ret
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
			glcd_clear_buffer();
    283c:	0e 94 ed 08 	call	0x11da	; 0x11da <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"456");
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	60 2f       	mov	r22, r16
    2844:	40 e6       	ldi	r20, 0x60	; 96
    2846:	51 e0       	ldi	r21, 0x01	; 1
    2848:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_draw_string_xy>
			glcd_write();
    284c:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    2850:	80 e2       	ldi	r24, 0x20	; 32
    2852:	93 e0       	ldi	r25, 0x03	; 3
    2854:	fe 01       	movw	r30, r28
    2856:	31 97       	sbiw	r30, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <glcd_test_text_up_down+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285c:	d9 f7       	brne	.-10     	; 0x2854 <glcd_test_text_up_down+0x8a>
			glcd_write();
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
    285e:	01 50       	subi	r16, 0x01	; 1
    2860:	00 23       	and	r16, r16
    2862:	09 f7       	brne	.-62     	; 0x2826 <glcd_test_text_up_down+0x5c>
    2864:	dc cf       	rjmp	.-72     	; 0x281e <glcd_test_text_up_down+0x54>

00002866 <glcd_test_glcdutils>:
}

/* Test glcd-utils font table type, increments and display a 16-bit number over and over */
#include "fonts/Earthbound_12x19_48to57.h"
void glcd_test_glcdutils(void)
{
    2866:	8f 92       	push	r8
    2868:	9f 92       	push	r9
    286a:	af 92       	push	r10
    286c:	bf 92       	push	r11
    286e:	cf 92       	push	r12
    2870:	df 92       	push	r13
    2872:	ef 92       	push	r14
    2874:	0f 93       	push	r16
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	28 97       	sbiw	r28, 0x08	; 8
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
	uint16_t count = 0;
	char string[8] = "";
    288a:	19 82       	std	Y+1, r1	; 0x01
    288c:	1a 82       	std	Y+2, r1	; 0x02
    288e:	1b 82       	std	Y+3, r1	; 0x03
    2890:	1c 82       	std	Y+4, r1	; 0x04
    2892:	1d 82       	std	Y+5, r1	; 0x05
    2894:	1e 82       	std	Y+6, r1	; 0x06
    2896:	1f 82       	std	Y+7, r1	; 0x07
    2898:	18 86       	std	Y+8, r1	; 0x08
    289a:	cc 24       	eor	r12, r12
    289c:	dd 24       	eor	r13, r13
		glcd_clear_buffer();

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);

		sprintf(string,"%d",count);
    289e:	5e 01       	movw	r10, r28
    28a0:	08 94       	sec
    28a2:	a1 1c       	adc	r10, r1
    28a4:	b1 1c       	adc	r11, r1
    28a6:	f4 e6       	ldi	r31, 0x64	; 100
    28a8:	8f 2e       	mov	r8, r31
    28aa:	f1 e0       	ldi	r31, 0x01	; 1
    28ac:	9f 2e       	mov	r9, r31
void glcd_test_glcdutils(void)
{
	uint16_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    28ae:	0e 94 ed 08 	call	0x11da	; 0x11da <glcd_clear_buffer>

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
    28b2:	88 e4       	ldi	r24, 0x48	; 72
    28b4:	96 e0       	ldi	r25, 0x06	; 6
    28b6:	6c e0       	ldi	r22, 0x0C	; 12
    28b8:	43 e1       	ldi	r20, 0x13	; 19
    28ba:	20 e3       	ldi	r18, 0x30	; 48
    28bc:	09 e3       	ldi	r16, 0x39	; 57
    28be:	e2 e0       	ldi	r30, 0x02	; 2
    28c0:	ee 2e       	mov	r14, r30
    28c2:	0e 94 82 0b 	call	0x1704	; 0x1704 <glcd_font>

		sprintf(string,"%d",count);
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <glcd_test_glcdutils+0x62>
    28c8:	00 d0       	rcall	.+0      	; 0x28ca <glcd_test_glcdutils+0x64>
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <glcd_test_glcdutils+0x66>
    28cc:	ed b7       	in	r30, 0x3d	; 61
    28ce:	fe b7       	in	r31, 0x3e	; 62
    28d0:	31 96       	adiw	r30, 0x01	; 1
    28d2:	ad b7       	in	r26, 0x3d	; 61
    28d4:	be b7       	in	r27, 0x3e	; 62
    28d6:	12 96       	adiw	r26, 0x02	; 2
    28d8:	bc 92       	st	X, r11
    28da:	ae 92       	st	-X, r10
    28dc:	11 97       	sbiw	r26, 0x01	; 1
    28de:	93 82       	std	Z+3, r9	; 0x03
    28e0:	82 82       	std	Z+2, r8	; 0x02
    28e2:	d5 82       	std	Z+5, r13	; 0x05
    28e4:	c4 82       	std	Z+4, r12	; 0x04
    28e6:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <sprintf>
		glcd_draw_string_xy(0,0,string);
    28ea:	8d b7       	in	r24, 0x3d	; 61
    28ec:	9e b7       	in	r25, 0x3e	; 62
    28ee:	06 96       	adiw	r24, 0x06	; 6
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	9e bf       	out	0x3e, r25	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	8d bf       	out	0x3d, r24	; 61
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	a5 01       	movw	r20, r10
    2900:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_draw_string_xy>
		glcd_write();
    2904:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
		
		count += 1;
    2908:	08 94       	sec
    290a:	c1 1c       	adc	r12, r1
    290c:	d1 1c       	adc	r13, r1

		DEMO_RETURN();
    290e:	80 91 71 01 	lds	r24, 0x0171
    2912:	88 23       	and	r24, r24
    2914:	61 f2       	breq	.-104    	; 0x28ae <glcd_test_glcdutils+0x48>
    2916:	10 92 71 01 	sts	0x0171, r1
	}
}
    291a:	28 96       	adiw	r28, 0x08	; 8
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	0f 91       	pop	r16
    292c:	ef 90       	pop	r14
    292e:	df 90       	pop	r13
    2930:	cf 90       	pop	r12
    2932:	bf 90       	pop	r11
    2934:	af 90       	pop	r10
    2936:	9f 90       	pop	r9
    2938:	8f 90       	pop	r8
    293a:	08 95       	ret

0000293c <glcd_test_counter_and_graph>:
		DEMO_RETURN();
	}
}

void glcd_test_counter_and_graph(void)
{
    293c:	8f 92       	push	r8
    293e:	9f 92       	push	r9
    2940:	af 92       	push	r10
    2942:	bf 92       	push	r11
    2944:	df 92       	push	r13
    2946:	ef 92       	push	r14
    2948:	ff 92       	push	r15
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	28 97       	sbiw	r28, 0x08	; 8
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
	uint8_t count = 0;
	char string[8] = "";
    2962:	19 82       	std	Y+1, r1	; 0x01
    2964:	1a 82       	std	Y+2, r1	; 0x02
    2966:	1b 82       	std	Y+3, r1	; 0x03
    2968:	1c 82       	std	Y+4, r1	; 0x04
    296a:	1d 82       	std	Y+5, r1	; 0x05
    296c:	1e 82       	std	Y+6, r1	; 0x06
    296e:	1f 82       	std	Y+7, r1	; 0x07
    2970:	18 86       	std	Y+8, r1	; 0x08
    2972:	dd 24       	eor	r13, r13
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2974:	5e 01       	movw	r10, r28
    2976:	08 94       	sec
    2978:	a1 1c       	adc	r10, r1
    297a:	b1 1c       	adc	r11, r1
    297c:	14 e6       	ldi	r17, 0x64	; 100
    297e:	81 2e       	mov	r8, r17
    2980:	11 e0       	ldi	r17, 0x01	; 1
    2982:	91 2e       	mov	r9, r17
void glcd_test_counter_and_graph(void)
{
	uint8_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    2984:	0e 94 ed 08 	call	0x11da	; 0x11da <glcd_clear_buffer>

		//glcd_tiny_set_font(Font5x7,5,7,32,127);
		//glcd_draw_string_xy(0,40,(char *)utoa(count,string,10));

		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    2988:	80 e9       	ldi	r24, 0x90	; 144
    298a:	99 e0       	ldi	r25, 0x09	; 9
    298c:	6f e0       	ldi	r22, 0x0F	; 15
    298e:	45 e1       	ldi	r20, 0x15	; 21
    2990:	2e e2       	ldi	r18, 0x2E	; 46
    2992:	09 e3       	ldi	r16, 0x39	; 57
    2994:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <glcd_set_font>
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2998:	ed 2c       	mov	r14, r13
    299a:	ff 24       	eor	r15, r15
    299c:	00 d0       	rcall	.+0      	; 0x299e <glcd_test_counter_and_graph+0x62>
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <glcd_test_counter_and_graph+0x64>
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <glcd_test_counter_and_graph+0x66>
    29a2:	ed b7       	in	r30, 0x3d	; 61
    29a4:	fe b7       	in	r31, 0x3e	; 62
    29a6:	31 96       	adiw	r30, 0x01	; 1
    29a8:	ad b7       	in	r26, 0x3d	; 61
    29aa:	be b7       	in	r27, 0x3e	; 62
    29ac:	12 96       	adiw	r26, 0x02	; 2
    29ae:	bc 92       	st	X, r11
    29b0:	ae 92       	st	-X, r10
    29b2:	11 97       	sbiw	r26, 0x01	; 1
    29b4:	93 82       	std	Z+3, r9	; 0x03
    29b6:	82 82       	std	Z+2, r8	; 0x02
    29b8:	f5 82       	std	Z+5, r15	; 0x05
    29ba:	e4 82       	std	Z+4, r14	; 0x04
    29bc:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <sprintf>
		glcd_draw_string_xy(0,0,string);
    29c0:	8d b7       	in	r24, 0x3d	; 61
    29c2:	9e b7       	in	r25, 0x3e	; 62
    29c4:	06 96       	adiw	r24, 0x06	; 6
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	9e bf       	out	0x3e, r25	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	8d bf       	out	0x3d, r24	; 61
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	a5 01       	movw	r20, r10
    29d6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_draw_string_xy>
		glcd_bar_graph_horizontal(10,38,30,6,count*4);
    29da:	87 01       	movw	r16, r14
    29dc:	00 0f       	add	r16, r16
    29de:	11 1f       	adc	r17, r17
    29e0:	00 0f       	add	r16, r16
    29e2:	11 1f       	adc	r17, r17
    29e4:	8a e0       	ldi	r24, 0x0A	; 10
    29e6:	66 e2       	ldi	r22, 0x26	; 38
    29e8:	4e e1       	ldi	r20, 0x1E	; 30
    29ea:	26 e0       	ldi	r18, 0x06	; 6
    29ec:	0e 94 47 0b 	call	0x168e	; 0x168e <glcd_bar_graph_horizontal>
		glcd_bar_graph_vertical(70,0,8,30,count*2);
    29f0:	ee 0c       	add	r14, r14
    29f2:	ff 1c       	adc	r15, r15
    29f4:	86 e4       	ldi	r24, 0x46	; 70
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	48 e0       	ldi	r20, 0x08	; 8
    29fa:	2e e1       	ldi	r18, 0x1E	; 30
    29fc:	0e 2d       	mov	r16, r14
    29fe:	0e 94 04 0b 	call	0x1608	; 0x1608 <glcd_bar_graph_vertical>

		glcd_write();
    2a02:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
		count += 1;
    2a06:	d3 94       	inc	r13

		DEMO_RETURN();
    2a08:	80 91 71 01 	lds	r24, 0x0171
    2a0c:	88 23       	and	r24, r24
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <glcd_test_counter_and_graph+0xd6>
    2a10:	b9 cf       	rjmp	.-142    	; 0x2984 <glcd_test_counter_and_graph+0x48>
    2a12:	10 92 71 01 	sts	0x0171, r1
	}

}
    2a16:	28 96       	adiw	r28, 0x08	; 8
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	1f 91       	pop	r17
    2a28:	0f 91       	pop	r16
    2a2a:	ff 90       	pop	r15
    2a2c:	ef 90       	pop	r14
    2a2e:	df 90       	pop	r13
    2a30:	bf 90       	pop	r11
    2a32:	af 90       	pop	r10
    2a34:	9f 90       	pop	r9
    2a36:	8f 90       	pop	r8
    2a38:	08 95       	ret

00002a3a <glcd_test_circles>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 
	};
#endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */

void glcd_test_circles(void)
{
    2a3a:	cf 92       	push	r12
    2a3c:	df 92       	push	r13
    2a3e:	ef 92       	push	r14
    2a40:	ff 92       	push	r15
    2a42:	0f 93       	push	r16
    2a44:	1f 93       	push	r17
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	00 e4       	ldi	r16, 0x40	; 64
    2a4c:	c0 2e       	mov	r12, r16
    2a4e:	0f e1       	ldi	r16, 0x1F	; 31
    2a50:	d0 2e       	mov	r13, r16
	uint8_t x,y,radius;

	while (1) {
		uint8_t i;
		
		glcd_clear();
    2a52:	c0 ea       	ldi	r28, 0xA0	; 160
    2a54:	df e0       	ldi	r29, 0x0F	; 15
    2a56:	0e 94 00 09 	call	0x1200	; 0x1200 <glcd_clear>

		// generate random(ish) position on display
		x = rand() % GLCD_LCD_WIDTH;
    2a5a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <rand>
    2a5e:	64 e5       	ldi	r22, 0x54	; 84
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    2a66:	e8 2e       	mov	r14, r24
		y = rand() % GLCD_LCD_HEIGHT;
    2a68:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <rand>
    2a6c:	60 e3       	ldi	r22, 0x30	; 48
    2a6e:	70 e0       	ldi	r23, 0x00	; 0
    2a70:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    2a74:	f8 2e       	mov	r15, r24
		radius = rand() % 50;
    2a76:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <rand>
    2a7a:	62 e3       	ldi	r22, 0x32	; 50
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    2a82:	08 2f       	mov	r16, r24
    2a84:	10 e0       	ldi	r17, 0x00	; 0
		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,BLACK);
    2a86:	8e 2d       	mov	r24, r14
    2a88:	6f 2d       	mov	r22, r15
    2a8a:	41 2f       	mov	r20, r17
    2a8c:	21 e0       	ldi	r18, 0x01	; 1
    2a8e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <glcd_fill_circle>
			glcd_write();
    2a92:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    2a96:	c6 01       	movw	r24, r12
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <glcd_test_circles+0x5e>

		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
    2a9c:	1f 5f       	subi	r17, 0xFF	; 255
    2a9e:	01 17       	cp	r16, r17
    2aa0:	90 f7       	brcc	.-28     	; 0x2a86 <glcd_test_circles+0x4c>
    2aa2:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,WHITE);
    2aa4:	8e 2d       	mov	r24, r14
    2aa6:	6f 2d       	mov	r22, r15
    2aa8:	41 2f       	mov	r20, r17
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <glcd_fill_circle>
			glcd_write();
    2ab0:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <glcd_test_circles+0x7c>
			glcd_write();
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
    2aba:	1f 5f       	subi	r17, 0xFF	; 255
    2abc:	01 17       	cp	r16, r17
    2abe:	90 f7       	brcc	.-28     	; 0x2aa4 <glcd_test_circles+0x6a>
			glcd_fill_circle(x,y,i,WHITE);
			glcd_write();
			delay_ms(1);
		}
		DEMO_RETURN();
    2ac0:	80 91 71 01 	lds	r24, 0x0171
    2ac4:	88 23       	and	r24, r24
    2ac6:	39 f2       	breq	.-114    	; 0x2a56 <glcd_test_circles+0x1c>
    2ac8:	10 92 71 01 	sts	0x0171, r1
	}
}
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	ff 90       	pop	r15
    2ad6:	ef 90       	pop	r14
    2ad8:	df 90       	pop	r13
    2ada:	cf 90       	pop	r12
    2adc:	08 95       	ret

00002ade <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    2ade:	0f 93       	push	r16
	font_current.font_table = font_table;
    2ae0:	90 93 93 03 	sts	0x0393, r25
    2ae4:	80 93 92 03 	sts	0x0392, r24
	font_current.width = width;
    2ae8:	60 93 94 03 	sts	0x0394, r22
	font_current.height = height;
    2aec:	40 93 95 03 	sts	0x0395, r20
	font_current.start_char = start_char;
    2af0:	20 93 96 03 	sts	0x0396, r18
	font_current.end_char = end_char;
    2af4:	00 93 97 03 	sts	0x0397, r16
	font_current.table_type = STANG;
    2af8:	10 92 98 03 	sts	0x0398, r1
}
    2afc:	0f 91       	pop	r16
    2afe:	08 95       	ret

00002b00 <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    2b00:	bf 92       	push	r11
    2b02:	cf 92       	push	r12
    2b04:	df 92       	push	r13
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	f8 2e       	mov	r15, r24
    2b14:	e6 2e       	mov	r14, r22
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
    2b16:	5f e2       	ldi	r21, 0x2F	; 47
    2b18:	56 17       	cp	r21, r22
    2b1a:	08 f4       	brcc	.+2      	; 0x2b1e <glcd_tiny_draw_char_xy+0x1e>
    2b1c:	5d c0       	rjmp	.+186    	; 0x2bd8 <glcd_tiny_draw_char_xy+0xd8>
    2b1e:	80 91 94 03 	lds	r24, 0x0394
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	8f 0d       	add	r24, r15
    2b26:	91 1d       	adc	r25, r1
    2b28:	84 35       	cpi	r24, 0x54	; 84
    2b2a:	91 05       	cpc	r25, r1
    2b2c:	0c f0       	brlt	.+2      	; 0x2b30 <glcd_tiny_draw_char_xy+0x30>
    2b2e:	54 c0       	rjmp	.+168    	; 0x2bd8 <glcd_tiny_draw_char_xy+0xd8>
    2b30:	80 91 95 03 	lds	r24, 0x0395
    2b34:	88 30       	cpi	r24, 0x08	; 8
    2b36:	08 f0       	brcs	.+2      	; 0x2b3a <glcd_tiny_draw_char_xy+0x3a>
    2b38:	4f c0       	rjmp	.+158    	; 0x2bd8 <glcd_tiny_draw_char_xy+0xd8>
    2b3a:	80 91 98 03 	lds	r24, 0x0398
    2b3e:	88 23       	and	r24, r24
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <glcd_tiny_draw_char_xy+0x44>
    2b42:	4a c0       	rjmp	.+148    	; 0x2bd8 <glcd_tiny_draw_char_xy+0xd8>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
    2b44:	80 91 96 03 	lds	r24, 0x0396
    2b48:	48 17       	cp	r20, r24
    2b4a:	20 f0       	brcs	.+8      	; 0x2b54 <glcd_tiny_draw_char_xy+0x54>
    2b4c:	80 91 97 03 	lds	r24, 0x0397
    2b50:	84 17       	cp	r24, r20
    2b52:	08 f4       	brcc	.+2      	; 0x2b56 <glcd_tiny_draw_char_xy+0x56>
    2b54:	4e e2       	ldi	r20, 0x2E	; 46
    2b56:	00 e0       	ldi	r16, 0x00	; 0
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    2b58:	c4 2e       	mov	r12, r20
    2b5a:	dd 24       	eor	r13, r13
    2b5c:	2f c0       	rjmp	.+94     	; 0x2bbc <glcd_tiny_draw_char_xy+0xbc>
    2b5e:	80 91 96 03 	lds	r24, 0x0396
    2b62:	96 01       	movw	r18, r12
    2b64:	28 1b       	sub	r18, r24
    2b66:	31 09       	sbc	r19, r1
    2b68:	84 2f       	mov	r24, r20
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	ac 01       	movw	r20, r24
    2b6e:	24 9f       	mul	r18, r20
    2b70:	c0 01       	movw	r24, r0
    2b72:	25 9f       	mul	r18, r21
    2b74:	90 0d       	add	r25, r0
    2b76:	34 9f       	mul	r19, r20
    2b78:	90 0d       	add	r25, r0
    2b7a:	11 24       	eor	r1, r1
    2b7c:	80 0f       	add	r24, r16
    2b7e:	91 1d       	adc	r25, r1
    2b80:	e0 91 92 03 	lds	r30, 0x0392
    2b84:	f0 91 93 03 	lds	r31, 0x0393
    2b88:	e8 0f       	add	r30, r24
    2b8a:	f9 1f       	adc	r31, r25
    2b8c:	e4 91       	lpm	r30, Z+
    2b8e:	10 e0       	ldi	r17, 0x00	; 0
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
    2b90:	ce 2f       	mov	r28, r30
    2b92:	d0 e0       	ldi	r29, 0x00	; 0
    2b94:	0e c0       	rjmp	.+28     	; 0x2bb2 <glcd_tiny_draw_char_xy+0xb2>
    2b96:	61 2f       	mov	r22, r17
    2b98:	6e 0d       	add	r22, r14
    2b9a:	ae 01       	movw	r20, r28
    2b9c:	01 2e       	mov	r0, r17
    2b9e:	02 c0       	rjmp	.+4      	; 0x2ba4 <glcd_tiny_draw_char_xy+0xa4>
    2ba0:	55 95       	asr	r21
    2ba2:	47 95       	ror	r20
    2ba4:	0a 94       	dec	r0
    2ba6:	e2 f7       	brpl	.-8      	; 0x2ba0 <glcd_tiny_draw_char_xy+0xa0>
    2ba8:	41 70       	andi	r20, 0x01	; 1
    2baa:	8b 2d       	mov	r24, r11
    2bac:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <glcd_set_pixel>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
    2bb0:	1f 5f       	subi	r17, 0xFF	; 255
    2bb2:	80 91 95 03 	lds	r24, 0x0395
    2bb6:	18 17       	cp	r17, r24
    2bb8:	70 f3       	brcs	.-36     	; 0x2b96 <glcd_tiny_draw_char_xy+0x96>
		c = '.';
	}
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
    2bba:	0f 5f       	subi	r16, 0xFF	; 255
    2bbc:	b0 2e       	mov	r11, r16
    2bbe:	bf 0c       	add	r11, r15
    2bc0:	40 91 94 03 	lds	r20, 0x0394
    2bc4:	04 17       	cp	r16, r20
    2bc6:	58 f2       	brcs	.-106    	; 0x2b5e <glcd_tiny_draw_char_xy+0x5e>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
		}
		xvar++;
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
    2bc8:	4f 0d       	add	r20, r15
    2bca:	20 91 95 03 	lds	r18, 0x0395
    2bce:	2e 0d       	add	r18, r14
    2bd0:	8f 2d       	mov	r24, r15
    2bd2:	6e 2d       	mov	r22, r14
    2bd4:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
	
}
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	1f 91       	pop	r17
    2bde:	0f 91       	pop	r16
    2be0:	ff 90       	pop	r15
    2be2:	ef 90       	pop	r14
    2be4:	df 90       	pop	r13
    2be6:	cf 90       	pop	r12
    2be8:	bf 90       	pop	r11
    2bea:	08 95       	ret

00002bec <glcd_tiny_draw_char>:
	font_current.end_char = end_char;
	font_current.table_type = STANG;
}

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	08 2f       	mov	r16, r24
    2bf6:	26 2f       	mov	r18, r22
    2bf8:	14 2f       	mov	r17, r20
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
    2bfa:	60 91 95 03 	lds	r22, 0x0395
    2bfe:	68 30       	cpi	r22, 0x08	; 8
    2c00:	08 f0       	brcs	.+2      	; 0x2c04 <glcd_tiny_draw_char+0x18>
    2c02:	6a c0       	rjmp	.+212    	; 0x2cd8 <glcd_tiny_draw_char+0xec>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
    2c04:	80 91 96 03 	lds	r24, 0x0396
    2c08:	48 17       	cp	r20, r24
    2c0a:	20 f0       	brcs	.+8      	; 0x2c14 <glcd_tiny_draw_char+0x28>
    2c0c:	80 91 97 03 	lds	r24, 0x0397
    2c10:	84 17       	cp	r24, r20
    2c12:	08 f4       	brcc	.+2      	; 0x2c16 <glcd_tiny_draw_char+0x2a>
    2c14:	1e e2       	ldi	r17, 0x2E	; 46
		c = '.';
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
    2c16:	c2 2f       	mov	r28, r18
    2c18:	d0 e0       	ldi	r29, 0x00	; 0
    2c1a:	e6 2f       	mov	r30, r22
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	31 96       	adiw	r30, 0x01	; 1
    2c20:	80 e3       	ldi	r24, 0x30	; 48
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	bf 01       	movw	r22, r30
    2c26:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    2c2a:	c6 17       	cp	r28, r22
    2c2c:	d7 07       	cpc	r29, r23
    2c2e:	0c f0       	brlt	.+2      	; 0x2c32 <glcd_tiny_draw_char+0x46>
    2c30:	53 c0       	rjmp	.+166    	; 0x2cd8 <glcd_tiny_draw_char+0xec>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
    2c32:	40 91 94 03 	lds	r20, 0x0394
    2c36:	84 2f       	mov	r24, r20
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	80 0f       	add	r24, r16
    2c3c:	91 1d       	adc	r25, r1
    2c3e:	84 35       	cpi	r24, 0x54	; 84
    2c40:	91 05       	cpc	r25, r1
    2c42:	0c f0       	brlt	.+2      	; 0x2c46 <glcd_tiny_draw_char+0x5a>
    2c44:	49 c0       	rjmp	.+146    	; 0x2cd8 <glcd_tiny_draw_char+0xec>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
    2c46:	ce 9f       	mul	r28, r30
    2c48:	b0 01       	movw	r22, r0
    2c4a:	cf 9f       	mul	r28, r31
    2c4c:	70 0d       	add	r23, r0
    2c4e:	de 9f       	mul	r29, r30
    2c50:	70 0d       	add	r23, r0
    2c52:	11 24       	eor	r1, r1
    2c54:	40 0f       	add	r20, r16
    2c56:	21 96       	adiw	r28, 0x01	; 1
    2c58:	ce 9f       	mul	r28, r30
    2c5a:	90 01       	movw	r18, r0
    2c5c:	cf 9f       	mul	r28, r31
    2c5e:	30 0d       	add	r19, r0
    2c60:	de 9f       	mul	r29, r30
    2c62:	30 0d       	add	r19, r0
    2c64:	11 24       	eor	r1, r1
    2c66:	21 97       	sbiw	r28, 0x01	; 1
    2c68:	80 2f       	mov	r24, r16
    2c6a:	0e 94 6f 08 	call	0x10de	; 0x10de <glcd_update_bbox>
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    2c6e:	84 e5       	ldi	r24, 0x54	; 84
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	c8 9f       	mul	r28, r24
    2c74:	d0 01       	movw	r26, r0
    2c76:	c9 9f       	mul	r28, r25
    2c78:	b0 0d       	add	r27, r0
    2c7a:	d8 9f       	mul	r29, r24
    2c7c:	b0 0d       	add	r27, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	61 2f       	mov	r22, r17
    2c84:	70 e0       	ldi	r23, 0x00	; 0
    2c86:	22 c0       	rjmp	.+68     	; 0x2ccc <glcd_tiny_draw_char+0xe0>
    2c88:	80 91 96 03 	lds	r24, 0x0396
    2c8c:	9b 01       	movw	r18, r22
    2c8e:	28 1b       	sub	r18, r24
    2c90:	31 09       	sbc	r19, r1
    2c92:	89 2f       	mov	r24, r25
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	fc 01       	movw	r30, r24
    2c98:	2e 9f       	mul	r18, r30
    2c9a:	c0 01       	movw	r24, r0
    2c9c:	2f 9f       	mul	r18, r31
    2c9e:	90 0d       	add	r25, r0
    2ca0:	3e 9f       	mul	r19, r30
    2ca2:	90 0d       	add	r25, r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	85 0f       	add	r24, r21
    2ca8:	91 1d       	adc	r25, r1
    2caa:	e0 91 92 03 	lds	r30, 0x0392
    2cae:	f0 91 93 03 	lds	r31, 0x0393
    2cb2:	e8 0f       	add	r30, r24
    2cb4:	f9 1f       	adc	r31, r25
    2cb6:	84 91       	lpm	r24, Z+
    2cb8:	e0 91 8e 03 	lds	r30, 0x038E
    2cbc:	f0 91 8f 03 	lds	r31, 0x038F
    2cc0:	ea 0f       	add	r30, r26
    2cc2:	fb 1f       	adc	r31, r27
    2cc4:	e4 0f       	add	r30, r20
    2cc6:	f1 1d       	adc	r31, r1
    2cc8:	80 83       	st	Z, r24
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
	
	for ( i = 0; i < font_current.width; i++ ) {
    2cca:	5f 5f       	subi	r21, 0xFF	; 255
    2ccc:	45 2f       	mov	r20, r21
    2cce:	40 0f       	add	r20, r16
    2cd0:	90 91 94 03 	lds	r25, 0x0394
    2cd4:	59 17       	cp	r21, r25
    2cd6:	c0 f2       	brcs	.-80     	; 0x2c88 <glcd_tiny_draw_char+0x9c>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	08 95       	ret

00002ce2 <glcd_tiny_draw_string_P>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, PGM_P str)
#else
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, const char *str)
#endif
{
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	18 2f       	mov	r17, r24
    2cec:	06 2f       	mov	r16, r22
    2cee:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    2cf0:	80 91 95 03 	lds	r24, 0x0395
    2cf4:	88 30       	cpi	r24, 0x08	; 8
    2cf6:	20 f5       	brcc	.+72     	; 0x2d40 <glcd_tiny_draw_string_P+0x5e>
		return;
    2cf8:	fe 01       	movw	r30, r28
	}
	while (1) {
#if defined(GLCD_DEVICE_AVR8)
		char c = pgm_read_byte(str++);
    2cfa:	21 96       	adiw	r28, 0x01	; 1
    2cfc:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    2cfe:	44 23       	and	r20, r20
    2d00:	f9 f0       	breq	.+62     	; 0x2d40 <glcd_tiny_draw_string_P+0x5e>
			return;	
				
		glcd_tiny_draw_char(x, line, c);
    2d02:	81 2f       	mov	r24, r17
    2d04:	60 2f       	mov	r22, r16
    2d06:	0e 94 f6 15 	call	0x2bec	; 0x2bec <glcd_tiny_draw_char>
		
		x += (font_current.width + 1);
    2d0a:	80 91 94 03 	lds	r24, 0x0394
    2d0e:	8f 5f       	subi	r24, 0xFF	; 255
    2d10:	18 0f       	add	r17, r24
    2d12:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	81 0f       	add	r24, r17
    2d18:	91 1d       	adc	r25, r1
    2d1a:	84 35       	cpi	r24, 0x54	; 84
    2d1c:	91 05       	cpc	r25, r1
    2d1e:	14 f0       	brlt	.+4      	; 0x2d24 <glcd_tiny_draw_string_P+0x42>
			x = 0; /* Ran out of this line */
			line++;
    2d20:	0f 5f       	subi	r16, 0xFF	; 255
    2d22:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    2d24:	20 2f       	mov	r18, r16
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	60 91 95 03 	lds	r22, 0x0395
    2d2c:	70 e0       	ldi	r23, 0x00	; 0
    2d2e:	6f 5f       	subi	r22, 0xFF	; 255
    2d30:	7f 4f       	sbci	r23, 0xFF	; 255
    2d32:	80 e3       	ldi	r24, 0x30	; 48
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    2d3a:	26 17       	cp	r18, r22
    2d3c:	37 07       	cpc	r19, r23
    2d3e:	e4 f2       	brlt	.-72     	; 0x2cf8 <glcd_tiny_draw_string_P+0x16>
			return; /* Ran out of space :( */
	}	
}
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	1f 91       	pop	r17
    2d46:	0f 91       	pop	r16
    2d48:	08 95       	ret

00002d4a <glcd_tiny_draw_string>:
		x++;
	}
}

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	18 2f       	mov	r17, r24
    2d54:	06 2f       	mov	r16, r22
    2d56:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    2d58:	80 91 95 03 	lds	r24, 0x0395
    2d5c:	88 30       	cpi	r24, 0x08	; 8
    2d5e:	08 f1       	brcs	.+66     	; 0x2da2 <glcd_tiny_draw_string+0x58>
    2d60:	23 c0       	rjmp	.+70     	; 0x2da8 <glcd_tiny_draw_string+0x5e>
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    2d62:	81 2f       	mov	r24, r17
    2d64:	60 2f       	mov	r22, r16
    2d66:	0e 94 f6 15 	call	0x2bec	; 0x2bec <glcd_tiny_draw_char>
		x += (font_current.width + 1);
    2d6a:	80 91 94 03 	lds	r24, 0x0394
    2d6e:	8f 5f       	subi	r24, 0xFF	; 255
    2d70:	18 0f       	add	r17, r24
    2d72:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	81 0f       	add	r24, r17
    2d78:	91 1d       	adc	r25, r1
    2d7a:	84 35       	cpi	r24, 0x54	; 84
    2d7c:	91 05       	cpc	r25, r1
    2d7e:	14 f0       	brlt	.+4      	; 0x2d84 <glcd_tiny_draw_string+0x3a>
			x = 0; /* Ran out of this line */
			line++;
    2d80:	0f 5f       	subi	r16, 0xFF	; 255
    2d82:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    2d84:	20 2f       	mov	r18, r16
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	60 91 95 03 	lds	r22, 0x0395
    2d8c:	70 e0       	ldi	r23, 0x00	; 0
    2d8e:	6f 5f       	subi	r22, 0xFF	; 255
    2d90:	7f 4f       	sbci	r23, 0xFF	; 255
    2d92:	80 e3       	ldi	r24, 0x30	; 48
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    2d9a:	26 17       	cp	r18, r22
    2d9c:	37 07       	cpc	r19, r23
    2d9e:	24 f4       	brge	.+8      	; 0x2da8 <glcd_tiny_draw_string+0x5e>
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    2da0:	21 96       	adiw	r28, 0x01	; 1
void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
    2da2:	48 81       	ld	r20, Y
    2da4:	44 23       	and	r20, r20
    2da6:	e9 f6       	brne	.-70     	; 0x2d62 <glcd_tiny_draw_string+0x18>
			line++;
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}
}
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	08 95       	ret

00002db2 <glcd_tiny_invert_line>:
	glcd_write();
}

void glcd_tiny_invert_line(uint8_t line)
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
    2db2:	68 2f       	mov	r22, r24
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	83 e0       	ldi	r24, 0x03	; 3
    2db8:	66 0f       	add	r22, r22
    2dba:	77 1f       	adc	r23, r23
    2dbc:	8a 95       	dec	r24
    2dbe:	e1 f7       	brne	.-8      	; 0x2db8 <glcd_tiny_invert_line+0x6>
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	43 e5       	ldi	r20, 0x53	; 83
    2dc4:	28 e0       	ldi	r18, 0x08	; 8
    2dc6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <glcd_invert_area>
}
    2dca:	08 95       	ret

00002dcc <glcd_tiny_draw_string_ammend_P>:
	glcd_scroll_line();
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
	glcd_write();
}

void glcd_tiny_draw_string_ammend_P(const char *str) {
    2dcc:	0f 93       	push	r16
    2dce:	1f 93       	push	r17
    2dd0:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    2dd2:	0e 94 bc 08 	call	0x1178	; 0x1178 <glcd_scroll_line>
	glcd_tiny_draw_string_P(0, (GLCD_LCD_HEIGHT/8-1), str);
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	65 e0       	ldi	r22, 0x05	; 5
    2dda:	a8 01       	movw	r20, r16
    2ddc:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <glcd_tiny_draw_string_P>
	glcd_write();
    2de0:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
}
    2de4:	1f 91       	pop	r17
    2de6:	0f 91       	pop	r16
    2de8:	08 95       	ret

00002dea <glcd_tiny_draw_string_ammend>:
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}	
}

void glcd_tiny_draw_string_ammend(char *str) {
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    2df0:	0e 94 bc 08 	call	0x1178	; 0x1178 <glcd_scroll_line>
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	65 e0       	ldi	r22, 0x05	; 5
    2df8:	a8 01       	movw	r20, r16
    2dfa:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <glcd_tiny_draw_string>
	glcd_write();
    2dfe:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_write>
}
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	08 95       	ret

00002e08 <__cmpsf2>:
    2e08:	6c d0       	rcall	.+216    	; 0x2ee2 <__fp_cmp>
    2e0a:	08 f4       	brcc	.+2      	; 0x2e0e <__cmpsf2+0x6>
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	08 95       	ret

00002e10 <__fixunssfsi>:
    2e10:	94 d0       	rcall	.+296    	; 0x2f3a <__fp_splitA>
    2e12:	88 f0       	brcs	.+34     	; 0x2e36 <__fixunssfsi+0x26>
    2e14:	9f 57       	subi	r25, 0x7F	; 127
    2e16:	90 f0       	brcs	.+36     	; 0x2e3c <__fixunssfsi+0x2c>
    2e18:	b9 2f       	mov	r27, r25
    2e1a:	99 27       	eor	r25, r25
    2e1c:	b7 51       	subi	r27, 0x17	; 23
    2e1e:	a0 f0       	brcs	.+40     	; 0x2e48 <__fixunssfsi+0x38>
    2e20:	d1 f0       	breq	.+52     	; 0x2e56 <__fixunssfsi+0x46>
    2e22:	66 0f       	add	r22, r22
    2e24:	77 1f       	adc	r23, r23
    2e26:	88 1f       	adc	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	1a f0       	brmi	.+6      	; 0x2e32 <__fixunssfsi+0x22>
    2e2c:	ba 95       	dec	r27
    2e2e:	c9 f7       	brne	.-14     	; 0x2e22 <__fixunssfsi+0x12>
    2e30:	12 c0       	rjmp	.+36     	; 0x2e56 <__fixunssfsi+0x46>
    2e32:	b1 30       	cpi	r27, 0x01	; 1
    2e34:	81 f0       	breq	.+32     	; 0x2e56 <__fixunssfsi+0x46>
    2e36:	9b d0       	rcall	.+310    	; 0x2f6e <__fp_zero>
    2e38:	b1 e0       	ldi	r27, 0x01	; 1
    2e3a:	08 95       	ret
    2e3c:	98 c0       	rjmp	.+304    	; 0x2f6e <__fp_zero>
    2e3e:	67 2f       	mov	r22, r23
    2e40:	78 2f       	mov	r23, r24
    2e42:	88 27       	eor	r24, r24
    2e44:	b8 5f       	subi	r27, 0xF8	; 248
    2e46:	39 f0       	breq	.+14     	; 0x2e56 <__fixunssfsi+0x46>
    2e48:	b9 3f       	cpi	r27, 0xF9	; 249
    2e4a:	cc f3       	brlt	.-14     	; 0x2e3e <__fixunssfsi+0x2e>
    2e4c:	86 95       	lsr	r24
    2e4e:	77 95       	ror	r23
    2e50:	67 95       	ror	r22
    2e52:	b3 95       	inc	r27
    2e54:	d9 f7       	brne	.-10     	; 0x2e4c <__fixunssfsi+0x3c>
    2e56:	3e f4       	brtc	.+14     	; 0x2e66 <__fixunssfsi+0x56>
    2e58:	90 95       	com	r25
    2e5a:	80 95       	com	r24
    2e5c:	70 95       	com	r23
    2e5e:	61 95       	neg	r22
    2e60:	7f 4f       	sbci	r23, 0xFF	; 255
    2e62:	8f 4f       	sbci	r24, 0xFF	; 255
    2e64:	9f 4f       	sbci	r25, 0xFF	; 255
    2e66:	08 95       	ret

00002e68 <__floatunsisf>:
    2e68:	e8 94       	clt
    2e6a:	09 c0       	rjmp	.+18     	; 0x2e7e <__floatsisf+0x12>

00002e6c <__floatsisf>:
    2e6c:	97 fb       	bst	r25, 7
    2e6e:	3e f4       	brtc	.+14     	; 0x2e7e <__floatsisf+0x12>
    2e70:	90 95       	com	r25
    2e72:	80 95       	com	r24
    2e74:	70 95       	com	r23
    2e76:	61 95       	neg	r22
    2e78:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7e:	99 23       	and	r25, r25
    2e80:	a9 f0       	breq	.+42     	; 0x2eac <__floatsisf+0x40>
    2e82:	f9 2f       	mov	r31, r25
    2e84:	96 e9       	ldi	r25, 0x96	; 150
    2e86:	bb 27       	eor	r27, r27
    2e88:	93 95       	inc	r25
    2e8a:	f6 95       	lsr	r31
    2e8c:	87 95       	ror	r24
    2e8e:	77 95       	ror	r23
    2e90:	67 95       	ror	r22
    2e92:	b7 95       	ror	r27
    2e94:	f1 11       	cpse	r31, r1
    2e96:	f8 cf       	rjmp	.-16     	; 0x2e88 <__floatsisf+0x1c>
    2e98:	fa f4       	brpl	.+62     	; 0x2ed8 <__floatsisf+0x6c>
    2e9a:	bb 0f       	add	r27, r27
    2e9c:	11 f4       	brne	.+4      	; 0x2ea2 <__floatsisf+0x36>
    2e9e:	60 ff       	sbrs	r22, 0
    2ea0:	1b c0       	rjmp	.+54     	; 0x2ed8 <__floatsisf+0x6c>
    2ea2:	6f 5f       	subi	r22, 0xFF	; 255
    2ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eaa:	16 c0       	rjmp	.+44     	; 0x2ed8 <__floatsisf+0x6c>
    2eac:	88 23       	and	r24, r24
    2eae:	11 f0       	breq	.+4      	; 0x2eb4 <__floatsisf+0x48>
    2eb0:	96 e9       	ldi	r25, 0x96	; 150
    2eb2:	11 c0       	rjmp	.+34     	; 0x2ed6 <__floatsisf+0x6a>
    2eb4:	77 23       	and	r23, r23
    2eb6:	21 f0       	breq	.+8      	; 0x2ec0 <__floatsisf+0x54>
    2eb8:	9e e8       	ldi	r25, 0x8E	; 142
    2eba:	87 2f       	mov	r24, r23
    2ebc:	76 2f       	mov	r23, r22
    2ebe:	05 c0       	rjmp	.+10     	; 0x2eca <__floatsisf+0x5e>
    2ec0:	66 23       	and	r22, r22
    2ec2:	71 f0       	breq	.+28     	; 0x2ee0 <__floatsisf+0x74>
    2ec4:	96 e8       	ldi	r25, 0x86	; 134
    2ec6:	86 2f       	mov	r24, r22
    2ec8:	70 e0       	ldi	r23, 0x00	; 0
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	2a f0       	brmi	.+10     	; 0x2ed8 <__floatsisf+0x6c>
    2ece:	9a 95       	dec	r25
    2ed0:	66 0f       	add	r22, r22
    2ed2:	77 1f       	adc	r23, r23
    2ed4:	88 1f       	adc	r24, r24
    2ed6:	da f7       	brpl	.-10     	; 0x2ece <__floatsisf+0x62>
    2ed8:	88 0f       	add	r24, r24
    2eda:	96 95       	lsr	r25
    2edc:	87 95       	ror	r24
    2ede:	97 f9       	bld	r25, 7
    2ee0:	08 95       	ret

00002ee2 <__fp_cmp>:
    2ee2:	99 0f       	add	r25, r25
    2ee4:	00 08       	sbc	r0, r0
    2ee6:	55 0f       	add	r21, r21
    2ee8:	aa 0b       	sbc	r26, r26
    2eea:	e0 e8       	ldi	r30, 0x80	; 128
    2eec:	fe ef       	ldi	r31, 0xFE	; 254
    2eee:	16 16       	cp	r1, r22
    2ef0:	17 06       	cpc	r1, r23
    2ef2:	e8 07       	cpc	r30, r24
    2ef4:	f9 07       	cpc	r31, r25
    2ef6:	c0 f0       	brcs	.+48     	; 0x2f28 <__fp_cmp+0x46>
    2ef8:	12 16       	cp	r1, r18
    2efa:	13 06       	cpc	r1, r19
    2efc:	e4 07       	cpc	r30, r20
    2efe:	f5 07       	cpc	r31, r21
    2f00:	98 f0       	brcs	.+38     	; 0x2f28 <__fp_cmp+0x46>
    2f02:	62 1b       	sub	r22, r18
    2f04:	73 0b       	sbc	r23, r19
    2f06:	84 0b       	sbc	r24, r20
    2f08:	95 0b       	sbc	r25, r21
    2f0a:	39 f4       	brne	.+14     	; 0x2f1a <__fp_cmp+0x38>
    2f0c:	0a 26       	eor	r0, r26
    2f0e:	61 f0       	breq	.+24     	; 0x2f28 <__fp_cmp+0x46>
    2f10:	23 2b       	or	r18, r19
    2f12:	24 2b       	or	r18, r20
    2f14:	25 2b       	or	r18, r21
    2f16:	21 f4       	brne	.+8      	; 0x2f20 <__fp_cmp+0x3e>
    2f18:	08 95       	ret
    2f1a:	0a 26       	eor	r0, r26
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <__fp_cmp+0x3e>
    2f1e:	a1 40       	sbci	r26, 0x01	; 1
    2f20:	a6 95       	lsr	r26
    2f22:	8f ef       	ldi	r24, 0xFF	; 255
    2f24:	81 1d       	adc	r24, r1
    2f26:	81 1d       	adc	r24, r1
    2f28:	08 95       	ret

00002f2a <__fp_split3>:
    2f2a:	57 fd       	sbrc	r21, 7
    2f2c:	90 58       	subi	r25, 0x80	; 128
    2f2e:	44 0f       	add	r20, r20
    2f30:	55 1f       	adc	r21, r21
    2f32:	59 f0       	breq	.+22     	; 0x2f4a <__fp_splitA+0x10>
    2f34:	5f 3f       	cpi	r21, 0xFF	; 255
    2f36:	71 f0       	breq	.+28     	; 0x2f54 <__fp_splitA+0x1a>
    2f38:	47 95       	ror	r20

00002f3a <__fp_splitA>:
    2f3a:	88 0f       	add	r24, r24
    2f3c:	97 fb       	bst	r25, 7
    2f3e:	99 1f       	adc	r25, r25
    2f40:	61 f0       	breq	.+24     	; 0x2f5a <__fp_splitA+0x20>
    2f42:	9f 3f       	cpi	r25, 0xFF	; 255
    2f44:	79 f0       	breq	.+30     	; 0x2f64 <__fp_splitA+0x2a>
    2f46:	87 95       	ror	r24
    2f48:	08 95       	ret
    2f4a:	12 16       	cp	r1, r18
    2f4c:	13 06       	cpc	r1, r19
    2f4e:	14 06       	cpc	r1, r20
    2f50:	55 1f       	adc	r21, r21
    2f52:	f2 cf       	rjmp	.-28     	; 0x2f38 <__fp_split3+0xe>
    2f54:	46 95       	lsr	r20
    2f56:	f1 df       	rcall	.-30     	; 0x2f3a <__fp_splitA>
    2f58:	08 c0       	rjmp	.+16     	; 0x2f6a <__fp_splitA+0x30>
    2f5a:	16 16       	cp	r1, r22
    2f5c:	17 06       	cpc	r1, r23
    2f5e:	18 06       	cpc	r1, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	f1 cf       	rjmp	.-30     	; 0x2f46 <__fp_splitA+0xc>
    2f64:	86 95       	lsr	r24
    2f66:	71 05       	cpc	r23, r1
    2f68:	61 05       	cpc	r22, r1
    2f6a:	08 94       	sec
    2f6c:	08 95       	ret

00002f6e <__fp_zero>:
    2f6e:	e8 94       	clt

00002f70 <__fp_szero>:
    2f70:	bb 27       	eor	r27, r27
    2f72:	66 27       	eor	r22, r22
    2f74:	77 27       	eor	r23, r23
    2f76:	cb 01       	movw	r24, r22
    2f78:	97 f9       	bld	r25, 7
    2f7a:	08 95       	ret

00002f7c <__gesf2>:
    2f7c:	b2 df       	rcall	.-156    	; 0x2ee2 <__fp_cmp>
    2f7e:	08 f4       	brcc	.+2      	; 0x2f82 <__gesf2+0x6>
    2f80:	8f ef       	ldi	r24, 0xFF	; 255
    2f82:	08 95       	ret

00002f84 <__mulsf3>:
    2f84:	0b d0       	rcall	.+22     	; 0x2f9c <__mulsf3x>
    2f86:	78 c0       	rjmp	.+240    	; 0x3078 <__fp_round>
    2f88:	69 d0       	rcall	.+210    	; 0x305c <__fp_pscA>
    2f8a:	28 f0       	brcs	.+10     	; 0x2f96 <__mulsf3+0x12>
    2f8c:	6e d0       	rcall	.+220    	; 0x306a <__fp_pscB>
    2f8e:	18 f0       	brcs	.+6      	; 0x2f96 <__mulsf3+0x12>
    2f90:	95 23       	and	r25, r21
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <__mulsf3+0x12>
    2f94:	5a c0       	rjmp	.+180    	; 0x304a <__fp_inf>
    2f96:	5f c0       	rjmp	.+190    	; 0x3056 <__fp_nan>
    2f98:	11 24       	eor	r1, r1
    2f9a:	ea cf       	rjmp	.-44     	; 0x2f70 <__fp_szero>

00002f9c <__mulsf3x>:
    2f9c:	c6 df       	rcall	.-116    	; 0x2f2a <__fp_split3>
    2f9e:	a0 f3       	brcs	.-24     	; 0x2f88 <__mulsf3+0x4>

00002fa0 <__mulsf3_pse>:
    2fa0:	95 9f       	mul	r25, r21
    2fa2:	d1 f3       	breq	.-12     	; 0x2f98 <__mulsf3+0x14>
    2fa4:	95 0f       	add	r25, r21
    2fa6:	50 e0       	ldi	r21, 0x00	; 0
    2fa8:	55 1f       	adc	r21, r21
    2faa:	62 9f       	mul	r22, r18
    2fac:	f0 01       	movw	r30, r0
    2fae:	72 9f       	mul	r23, r18
    2fb0:	bb 27       	eor	r27, r27
    2fb2:	f0 0d       	add	r31, r0
    2fb4:	b1 1d       	adc	r27, r1
    2fb6:	63 9f       	mul	r22, r19
    2fb8:	aa 27       	eor	r26, r26
    2fba:	f0 0d       	add	r31, r0
    2fbc:	b1 1d       	adc	r27, r1
    2fbe:	aa 1f       	adc	r26, r26
    2fc0:	64 9f       	mul	r22, r20
    2fc2:	66 27       	eor	r22, r22
    2fc4:	b0 0d       	add	r27, r0
    2fc6:	a1 1d       	adc	r26, r1
    2fc8:	66 1f       	adc	r22, r22
    2fca:	82 9f       	mul	r24, r18
    2fcc:	22 27       	eor	r18, r18
    2fce:	b0 0d       	add	r27, r0
    2fd0:	a1 1d       	adc	r26, r1
    2fd2:	62 1f       	adc	r22, r18
    2fd4:	73 9f       	mul	r23, r19
    2fd6:	b0 0d       	add	r27, r0
    2fd8:	a1 1d       	adc	r26, r1
    2fda:	62 1f       	adc	r22, r18
    2fdc:	83 9f       	mul	r24, r19
    2fde:	a0 0d       	add	r26, r0
    2fe0:	61 1d       	adc	r22, r1
    2fe2:	22 1f       	adc	r18, r18
    2fe4:	74 9f       	mul	r23, r20
    2fe6:	33 27       	eor	r19, r19
    2fe8:	a0 0d       	add	r26, r0
    2fea:	61 1d       	adc	r22, r1
    2fec:	23 1f       	adc	r18, r19
    2fee:	84 9f       	mul	r24, r20
    2ff0:	60 0d       	add	r22, r0
    2ff2:	21 1d       	adc	r18, r1
    2ff4:	82 2f       	mov	r24, r18
    2ff6:	76 2f       	mov	r23, r22
    2ff8:	6a 2f       	mov	r22, r26
    2ffa:	11 24       	eor	r1, r1
    2ffc:	9f 57       	subi	r25, 0x7F	; 127
    2ffe:	50 40       	sbci	r21, 0x00	; 0
    3000:	8a f0       	brmi	.+34     	; 0x3024 <__mulsf3_pse+0x84>
    3002:	e1 f0       	breq	.+56     	; 0x303c <__mulsf3_pse+0x9c>
    3004:	88 23       	and	r24, r24
    3006:	4a f0       	brmi	.+18     	; 0x301a <__mulsf3_pse+0x7a>
    3008:	ee 0f       	add	r30, r30
    300a:	ff 1f       	adc	r31, r31
    300c:	bb 1f       	adc	r27, r27
    300e:	66 1f       	adc	r22, r22
    3010:	77 1f       	adc	r23, r23
    3012:	88 1f       	adc	r24, r24
    3014:	91 50       	subi	r25, 0x01	; 1
    3016:	50 40       	sbci	r21, 0x00	; 0
    3018:	a9 f7       	brne	.-22     	; 0x3004 <__mulsf3_pse+0x64>
    301a:	9e 3f       	cpi	r25, 0xFE	; 254
    301c:	51 05       	cpc	r21, r1
    301e:	70 f0       	brcs	.+28     	; 0x303c <__mulsf3_pse+0x9c>
    3020:	14 c0       	rjmp	.+40     	; 0x304a <__fp_inf>
    3022:	a6 cf       	rjmp	.-180    	; 0x2f70 <__fp_szero>
    3024:	5f 3f       	cpi	r21, 0xFF	; 255
    3026:	ec f3       	brlt	.-6      	; 0x3022 <__mulsf3_pse+0x82>
    3028:	98 3e       	cpi	r25, 0xE8	; 232
    302a:	dc f3       	brlt	.-10     	; 0x3022 <__mulsf3_pse+0x82>
    302c:	86 95       	lsr	r24
    302e:	77 95       	ror	r23
    3030:	67 95       	ror	r22
    3032:	b7 95       	ror	r27
    3034:	f7 95       	ror	r31
    3036:	e7 95       	ror	r30
    3038:	9f 5f       	subi	r25, 0xFF	; 255
    303a:	c1 f7       	brne	.-16     	; 0x302c <__mulsf3_pse+0x8c>
    303c:	fe 2b       	or	r31, r30
    303e:	88 0f       	add	r24, r24
    3040:	91 1d       	adc	r25, r1
    3042:	96 95       	lsr	r25
    3044:	87 95       	ror	r24
    3046:	97 f9       	bld	r25, 7
    3048:	08 95       	ret

0000304a <__fp_inf>:
    304a:	97 f9       	bld	r25, 7
    304c:	9f 67       	ori	r25, 0x7F	; 127
    304e:	80 e8       	ldi	r24, 0x80	; 128
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	08 95       	ret

00003056 <__fp_nan>:
    3056:	9f ef       	ldi	r25, 0xFF	; 255
    3058:	80 ec       	ldi	r24, 0xC0	; 192
    305a:	08 95       	ret

0000305c <__fp_pscA>:
    305c:	00 24       	eor	r0, r0
    305e:	0a 94       	dec	r0
    3060:	16 16       	cp	r1, r22
    3062:	17 06       	cpc	r1, r23
    3064:	18 06       	cpc	r1, r24
    3066:	09 06       	cpc	r0, r25
    3068:	08 95       	ret

0000306a <__fp_pscB>:
    306a:	00 24       	eor	r0, r0
    306c:	0a 94       	dec	r0
    306e:	12 16       	cp	r1, r18
    3070:	13 06       	cpc	r1, r19
    3072:	14 06       	cpc	r1, r20
    3074:	05 06       	cpc	r0, r21
    3076:	08 95       	ret

00003078 <__fp_round>:
    3078:	09 2e       	mov	r0, r25
    307a:	03 94       	inc	r0
    307c:	00 0c       	add	r0, r0
    307e:	11 f4       	brne	.+4      	; 0x3084 <__fp_round+0xc>
    3080:	88 23       	and	r24, r24
    3082:	52 f0       	brmi	.+20     	; 0x3098 <__fp_round+0x20>
    3084:	bb 0f       	add	r27, r27
    3086:	40 f4       	brcc	.+16     	; 0x3098 <__fp_round+0x20>
    3088:	bf 2b       	or	r27, r31
    308a:	11 f4       	brne	.+4      	; 0x3090 <__fp_round+0x18>
    308c:	60 ff       	sbrs	r22, 0
    308e:	04 c0       	rjmp	.+8      	; 0x3098 <__fp_round+0x20>
    3090:	6f 5f       	subi	r22, 0xFF	; 255
    3092:	7f 4f       	sbci	r23, 0xFF	; 255
    3094:	8f 4f       	sbci	r24, 0xFF	; 255
    3096:	9f 4f       	sbci	r25, 0xFF	; 255
    3098:	08 95       	ret

0000309a <__udivmodqi4>:
    309a:	99 1b       	sub	r25, r25
    309c:	79 e0       	ldi	r23, 0x09	; 9
    309e:	04 c0       	rjmp	.+8      	; 0x30a8 <__udivmodqi4_ep>

000030a0 <__udivmodqi4_loop>:
    30a0:	99 1f       	adc	r25, r25
    30a2:	96 17       	cp	r25, r22
    30a4:	08 f0       	brcs	.+2      	; 0x30a8 <__udivmodqi4_ep>
    30a6:	96 1b       	sub	r25, r22

000030a8 <__udivmodqi4_ep>:
    30a8:	88 1f       	adc	r24, r24
    30aa:	7a 95       	dec	r23
    30ac:	c9 f7       	brne	.-14     	; 0x30a0 <__udivmodqi4_loop>
    30ae:	80 95       	com	r24
    30b0:	08 95       	ret

000030b2 <__divmodhi4>:
    30b2:	97 fb       	bst	r25, 7
    30b4:	09 2e       	mov	r0, r25
    30b6:	07 26       	eor	r0, r23
    30b8:	0a d0       	rcall	.+20     	; 0x30ce <__divmodhi4_neg1>
    30ba:	77 fd       	sbrc	r23, 7
    30bc:	04 d0       	rcall	.+8      	; 0x30c6 <__divmodhi4_neg2>
    30be:	0c d0       	rcall	.+24     	; 0x30d8 <__udivmodhi4>
    30c0:	06 d0       	rcall	.+12     	; 0x30ce <__divmodhi4_neg1>
    30c2:	00 20       	and	r0, r0
    30c4:	1a f4       	brpl	.+6      	; 0x30cc <__divmodhi4_exit>

000030c6 <__divmodhi4_neg2>:
    30c6:	70 95       	com	r23
    30c8:	61 95       	neg	r22
    30ca:	7f 4f       	sbci	r23, 0xFF	; 255

000030cc <__divmodhi4_exit>:
    30cc:	08 95       	ret

000030ce <__divmodhi4_neg1>:
    30ce:	f6 f7       	brtc	.-4      	; 0x30cc <__divmodhi4_exit>
    30d0:	90 95       	com	r25
    30d2:	81 95       	neg	r24
    30d4:	9f 4f       	sbci	r25, 0xFF	; 255
    30d6:	08 95       	ret

000030d8 <__udivmodhi4>:
    30d8:	aa 1b       	sub	r26, r26
    30da:	bb 1b       	sub	r27, r27
    30dc:	51 e1       	ldi	r21, 0x11	; 17
    30de:	07 c0       	rjmp	.+14     	; 0x30ee <__udivmodhi4_ep>

000030e0 <__udivmodhi4_loop>:
    30e0:	aa 1f       	adc	r26, r26
    30e2:	bb 1f       	adc	r27, r27
    30e4:	a6 17       	cp	r26, r22
    30e6:	b7 07       	cpc	r27, r23
    30e8:	10 f0       	brcs	.+4      	; 0x30ee <__udivmodhi4_ep>
    30ea:	a6 1b       	sub	r26, r22
    30ec:	b7 0b       	sbc	r27, r23

000030ee <__udivmodhi4_ep>:
    30ee:	88 1f       	adc	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	5a 95       	dec	r21
    30f4:	a9 f7       	brne	.-22     	; 0x30e0 <__udivmodhi4_loop>
    30f6:	80 95       	com	r24
    30f8:	90 95       	com	r25
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	08 95       	ret

00003100 <do_rand>:
    3100:	a0 e0       	ldi	r26, 0x00	; 0
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e6 e8       	ldi	r30, 0x86	; 134
    3106:	f8 e1       	ldi	r31, 0x18	; 24
    3108:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <__prologue_saves__+0x10>
    310c:	ec 01       	movw	r28, r24
    310e:	a8 80       	ld	r10, Y
    3110:	b9 80       	ldd	r11, Y+1	; 0x01
    3112:	ca 80       	ldd	r12, Y+2	; 0x02
    3114:	db 80       	ldd	r13, Y+3	; 0x03
    3116:	a1 14       	cp	r10, r1
    3118:	b1 04       	cpc	r11, r1
    311a:	c1 04       	cpc	r12, r1
    311c:	d1 04       	cpc	r13, r1
    311e:	41 f4       	brne	.+16     	; 0x3130 <do_rand+0x30>
    3120:	84 e2       	ldi	r24, 0x24	; 36
    3122:	a8 2e       	mov	r10, r24
    3124:	89 ed       	ldi	r24, 0xD9	; 217
    3126:	b8 2e       	mov	r11, r24
    3128:	8b e5       	ldi	r24, 0x5B	; 91
    312a:	c8 2e       	mov	r12, r24
    312c:	87 e0       	ldi	r24, 0x07	; 7
    312e:	d8 2e       	mov	r13, r24
    3130:	c6 01       	movw	r24, r12
    3132:	b5 01       	movw	r22, r10
    3134:	2d e1       	ldi	r18, 0x1D	; 29
    3136:	33 ef       	ldi	r19, 0xF3	; 243
    3138:	41 e0       	ldi	r20, 0x01	; 1
    313a:	50 e0       	ldi	r21, 0x00	; 0
    313c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__divmodsi4>
    3140:	27 ea       	ldi	r18, 0xA7	; 167
    3142:	31 e4       	ldi	r19, 0x41	; 65
    3144:	40 e0       	ldi	r20, 0x00	; 0
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	0e 94 8b 1b 	call	0x3716	; 0x3716 <__mulsi3>
    314c:	7b 01       	movw	r14, r22
    314e:	8c 01       	movw	r16, r24
    3150:	c6 01       	movw	r24, r12
    3152:	b5 01       	movw	r22, r10
    3154:	2d e1       	ldi	r18, 0x1D	; 29
    3156:	33 ef       	ldi	r19, 0xF3	; 243
    3158:	41 e0       	ldi	r20, 0x01	; 1
    315a:	50 e0       	ldi	r21, 0x00	; 0
    315c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__divmodsi4>
    3160:	ca 01       	movw	r24, r20
    3162:	b9 01       	movw	r22, r18
    3164:	2c ee       	ldi	r18, 0xEC	; 236
    3166:	34 ef       	ldi	r19, 0xF4	; 244
    3168:	4f ef       	ldi	r20, 0xFF	; 255
    316a:	5f ef       	ldi	r21, 0xFF	; 255
    316c:	0e 94 8b 1b 	call	0x3716	; 0x3716 <__mulsi3>
    3170:	6e 0d       	add	r22, r14
    3172:	7f 1d       	adc	r23, r15
    3174:	80 1f       	adc	r24, r16
    3176:	91 1f       	adc	r25, r17
    3178:	97 ff       	sbrs	r25, 7
    317a:	04 c0       	rjmp	.+8      	; 0x3184 <do_rand+0x84>
    317c:	61 50       	subi	r22, 0x01	; 1
    317e:	70 40       	sbci	r23, 0x00	; 0
    3180:	80 40       	sbci	r24, 0x00	; 0
    3182:	90 48       	sbci	r25, 0x80	; 128
    3184:	68 83       	st	Y, r22
    3186:	79 83       	std	Y+1, r23	; 0x01
    3188:	8a 83       	std	Y+2, r24	; 0x02
    318a:	9b 83       	std	Y+3, r25	; 0x03
    318c:	9b 01       	movw	r18, r22
    318e:	3f 77       	andi	r19, 0x7F	; 127
    3190:	c9 01       	movw	r24, r18
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	ea e0       	ldi	r30, 0x0A	; 10
    3198:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__epilogue_restores__+0x10>

0000319c <rand_r>:
    319c:	0e 94 80 18 	call	0x3100	; 0x3100 <do_rand>
    31a0:	08 95       	ret

000031a2 <rand>:
    31a2:	87 e6       	ldi	r24, 0x67	; 103
    31a4:	91 e0       	ldi	r25, 0x01	; 1
    31a6:	0e 94 80 18 	call	0x3100	; 0x3100 <do_rand>
    31aa:	08 95       	ret

000031ac <srand>:
    31ac:	a0 e0       	ldi	r26, 0x00	; 0
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	80 93 67 01 	sts	0x0167, r24
    31b4:	90 93 68 01 	sts	0x0168, r25
    31b8:	a0 93 69 01 	sts	0x0169, r26
    31bc:	b0 93 6a 01 	sts	0x016A, r27
    31c0:	08 95       	ret

000031c2 <memcpy_P>:
    31c2:	fb 01       	movw	r30, r22
    31c4:	dc 01       	movw	r26, r24
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <memcpy_P+0xa>
    31c8:	05 90       	lpm	r0, Z+
    31ca:	0d 92       	st	X+, r0
    31cc:	41 50       	subi	r20, 0x01	; 1
    31ce:	50 40       	sbci	r21, 0x00	; 0
    31d0:	d8 f7       	brcc	.-10     	; 0x31c8 <memcpy_P+0x6>
    31d2:	08 95       	ret

000031d4 <sprintf>:
    31d4:	ae e0       	ldi	r26, 0x0E	; 14
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e0 ef       	ldi	r30, 0xF0	; 240
    31da:	f8 e1       	ldi	r31, 0x18	; 24
    31dc:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__prologue_saves__+0x1c>
    31e0:	0d 89       	ldd	r16, Y+21	; 0x15
    31e2:	1e 89       	ldd	r17, Y+22	; 0x16
    31e4:	86 e0       	ldi	r24, 0x06	; 6
    31e6:	8c 83       	std	Y+4, r24	; 0x04
    31e8:	1a 83       	std	Y+2, r17	; 0x02
    31ea:	09 83       	std	Y+1, r16	; 0x01
    31ec:	8f ef       	ldi	r24, 0xFF	; 255
    31ee:	9f e7       	ldi	r25, 0x7F	; 127
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	8d 83       	std	Y+5, r24	; 0x05
    31f4:	9e 01       	movw	r18, r28
    31f6:	27 5e       	subi	r18, 0xE7	; 231
    31f8:	3f 4f       	sbci	r19, 0xFF	; 255
    31fa:	ce 01       	movw	r24, r28
    31fc:	01 96       	adiw	r24, 0x01	; 1
    31fe:	6f 89       	ldd	r22, Y+23	; 0x17
    3200:	78 8d       	ldd	r23, Y+24	; 0x18
    3202:	a9 01       	movw	r20, r18
    3204:	0e 94 0e 19 	call	0x321c	; 0x321c <vfprintf>
    3208:	2f 81       	ldd	r18, Y+7	; 0x07
    320a:	38 85       	ldd	r19, Y+8	; 0x08
    320c:	02 0f       	add	r16, r18
    320e:	13 1f       	adc	r17, r19
    3210:	f8 01       	movw	r30, r16
    3212:	10 82       	st	Z, r1
    3214:	2e 96       	adiw	r28, 0x0e	; 14
    3216:	e4 e0       	ldi	r30, 0x04	; 4
    3218:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <__epilogue_restores__+0x1c>

0000321c <vfprintf>:
    321c:	ab e0       	ldi	r26, 0x0B	; 11
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	e4 e1       	ldi	r30, 0x14	; 20
    3222:	f9 e1       	ldi	r31, 0x19	; 25
    3224:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__prologue_saves__>
    3228:	3c 01       	movw	r6, r24
    322a:	2b 01       	movw	r4, r22
    322c:	5a 01       	movw	r10, r20
    322e:	fc 01       	movw	r30, r24
    3230:	17 82       	std	Z+7, r1	; 0x07
    3232:	16 82       	std	Z+6, r1	; 0x06
    3234:	83 81       	ldd	r24, Z+3	; 0x03
    3236:	81 fd       	sbrc	r24, 1
    3238:	03 c0       	rjmp	.+6      	; 0x3240 <vfprintf+0x24>
    323a:	6f ef       	ldi	r22, 0xFF	; 255
    323c:	7f ef       	ldi	r23, 0xFF	; 255
    323e:	c6 c1       	rjmp	.+908    	; 0x35cc <vfprintf+0x3b0>
    3240:	9a e0       	ldi	r25, 0x0A	; 10
    3242:	89 2e       	mov	r8, r25
    3244:	1e 01       	movw	r2, r28
    3246:	08 94       	sec
    3248:	21 1c       	adc	r2, r1
    324a:	31 1c       	adc	r3, r1
    324c:	f3 01       	movw	r30, r6
    324e:	23 81       	ldd	r18, Z+3	; 0x03
    3250:	f2 01       	movw	r30, r4
    3252:	23 fd       	sbrc	r18, 3
    3254:	85 91       	lpm	r24, Z+
    3256:	23 ff       	sbrs	r18, 3
    3258:	81 91       	ld	r24, Z+
    325a:	2f 01       	movw	r4, r30
    325c:	88 23       	and	r24, r24
    325e:	09 f4       	brne	.+2      	; 0x3262 <vfprintf+0x46>
    3260:	b2 c1       	rjmp	.+868    	; 0x35c6 <vfprintf+0x3aa>
    3262:	85 32       	cpi	r24, 0x25	; 37
    3264:	39 f4       	brne	.+14     	; 0x3274 <vfprintf+0x58>
    3266:	23 fd       	sbrc	r18, 3
    3268:	85 91       	lpm	r24, Z+
    326a:	23 ff       	sbrs	r18, 3
    326c:	81 91       	ld	r24, Z+
    326e:	2f 01       	movw	r4, r30
    3270:	85 32       	cpi	r24, 0x25	; 37
    3272:	29 f4       	brne	.+10     	; 0x327e <vfprintf+0x62>
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	b3 01       	movw	r22, r6
    3278:	0e 94 01 1b 	call	0x3602	; 0x3602 <fputc>
    327c:	e7 cf       	rjmp	.-50     	; 0x324c <vfprintf+0x30>
    327e:	98 2f       	mov	r25, r24
    3280:	ff 24       	eor	r15, r15
    3282:	ee 24       	eor	r14, r14
    3284:	99 24       	eor	r9, r9
    3286:	ff e1       	ldi	r31, 0x1F	; 31
    3288:	ff 15       	cp	r31, r15
    328a:	d0 f0       	brcs	.+52     	; 0x32c0 <vfprintf+0xa4>
    328c:	9b 32       	cpi	r25, 0x2B	; 43
    328e:	69 f0       	breq	.+26     	; 0x32aa <vfprintf+0x8e>
    3290:	9c 32       	cpi	r25, 0x2C	; 44
    3292:	28 f4       	brcc	.+10     	; 0x329e <vfprintf+0x82>
    3294:	90 32       	cpi	r25, 0x20	; 32
    3296:	59 f0       	breq	.+22     	; 0x32ae <vfprintf+0x92>
    3298:	93 32       	cpi	r25, 0x23	; 35
    329a:	91 f4       	brne	.+36     	; 0x32c0 <vfprintf+0xa4>
    329c:	0e c0       	rjmp	.+28     	; 0x32ba <vfprintf+0x9e>
    329e:	9d 32       	cpi	r25, 0x2D	; 45
    32a0:	49 f0       	breq	.+18     	; 0x32b4 <vfprintf+0x98>
    32a2:	90 33       	cpi	r25, 0x30	; 48
    32a4:	69 f4       	brne	.+26     	; 0x32c0 <vfprintf+0xa4>
    32a6:	41 e0       	ldi	r20, 0x01	; 1
    32a8:	24 c0       	rjmp	.+72     	; 0x32f2 <vfprintf+0xd6>
    32aa:	52 e0       	ldi	r21, 0x02	; 2
    32ac:	f5 2a       	or	r15, r21
    32ae:	84 e0       	ldi	r24, 0x04	; 4
    32b0:	f8 2a       	or	r15, r24
    32b2:	28 c0       	rjmp	.+80     	; 0x3304 <vfprintf+0xe8>
    32b4:	98 e0       	ldi	r25, 0x08	; 8
    32b6:	f9 2a       	or	r15, r25
    32b8:	25 c0       	rjmp	.+74     	; 0x3304 <vfprintf+0xe8>
    32ba:	e0 e1       	ldi	r30, 0x10	; 16
    32bc:	fe 2a       	or	r15, r30
    32be:	22 c0       	rjmp	.+68     	; 0x3304 <vfprintf+0xe8>
    32c0:	f7 fc       	sbrc	r15, 7
    32c2:	29 c0       	rjmp	.+82     	; 0x3316 <vfprintf+0xfa>
    32c4:	89 2f       	mov	r24, r25
    32c6:	80 53       	subi	r24, 0x30	; 48
    32c8:	8a 30       	cpi	r24, 0x0A	; 10
    32ca:	70 f4       	brcc	.+28     	; 0x32e8 <vfprintf+0xcc>
    32cc:	f6 fe       	sbrs	r15, 6
    32ce:	05 c0       	rjmp	.+10     	; 0x32da <vfprintf+0xbe>
    32d0:	98 9c       	mul	r9, r8
    32d2:	90 2c       	mov	r9, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	98 0e       	add	r9, r24
    32d8:	15 c0       	rjmp	.+42     	; 0x3304 <vfprintf+0xe8>
    32da:	e8 9c       	mul	r14, r8
    32dc:	e0 2c       	mov	r14, r0
    32de:	11 24       	eor	r1, r1
    32e0:	e8 0e       	add	r14, r24
    32e2:	f0 e2       	ldi	r31, 0x20	; 32
    32e4:	ff 2a       	or	r15, r31
    32e6:	0e c0       	rjmp	.+28     	; 0x3304 <vfprintf+0xe8>
    32e8:	9e 32       	cpi	r25, 0x2E	; 46
    32ea:	29 f4       	brne	.+10     	; 0x32f6 <vfprintf+0xda>
    32ec:	f6 fc       	sbrc	r15, 6
    32ee:	6b c1       	rjmp	.+726    	; 0x35c6 <vfprintf+0x3aa>
    32f0:	40 e4       	ldi	r20, 0x40	; 64
    32f2:	f4 2a       	or	r15, r20
    32f4:	07 c0       	rjmp	.+14     	; 0x3304 <vfprintf+0xe8>
    32f6:	9c 36       	cpi	r25, 0x6C	; 108
    32f8:	19 f4       	brne	.+6      	; 0x3300 <vfprintf+0xe4>
    32fa:	50 e8       	ldi	r21, 0x80	; 128
    32fc:	f5 2a       	or	r15, r21
    32fe:	02 c0       	rjmp	.+4      	; 0x3304 <vfprintf+0xe8>
    3300:	98 36       	cpi	r25, 0x68	; 104
    3302:	49 f4       	brne	.+18     	; 0x3316 <vfprintf+0xfa>
    3304:	f2 01       	movw	r30, r4
    3306:	23 fd       	sbrc	r18, 3
    3308:	95 91       	lpm	r25, Z+
    330a:	23 ff       	sbrs	r18, 3
    330c:	91 91       	ld	r25, Z+
    330e:	2f 01       	movw	r4, r30
    3310:	99 23       	and	r25, r25
    3312:	09 f0       	breq	.+2      	; 0x3316 <vfprintf+0xfa>
    3314:	b8 cf       	rjmp	.-144    	; 0x3286 <vfprintf+0x6a>
    3316:	89 2f       	mov	r24, r25
    3318:	85 54       	subi	r24, 0x45	; 69
    331a:	83 30       	cpi	r24, 0x03	; 3
    331c:	18 f0       	brcs	.+6      	; 0x3324 <vfprintf+0x108>
    331e:	80 52       	subi	r24, 0x20	; 32
    3320:	83 30       	cpi	r24, 0x03	; 3
    3322:	38 f4       	brcc	.+14     	; 0x3332 <vfprintf+0x116>
    3324:	44 e0       	ldi	r20, 0x04	; 4
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	a4 0e       	add	r10, r20
    332a:	b5 1e       	adc	r11, r21
    332c:	5f e3       	ldi	r21, 0x3F	; 63
    332e:	59 83       	std	Y+1, r21	; 0x01
    3330:	0f c0       	rjmp	.+30     	; 0x3350 <vfprintf+0x134>
    3332:	93 36       	cpi	r25, 0x63	; 99
    3334:	31 f0       	breq	.+12     	; 0x3342 <vfprintf+0x126>
    3336:	93 37       	cpi	r25, 0x73	; 115
    3338:	79 f0       	breq	.+30     	; 0x3358 <vfprintf+0x13c>
    333a:	93 35       	cpi	r25, 0x53	; 83
    333c:	09 f0       	breq	.+2      	; 0x3340 <vfprintf+0x124>
    333e:	56 c0       	rjmp	.+172    	; 0x33ec <vfprintf+0x1d0>
    3340:	20 c0       	rjmp	.+64     	; 0x3382 <vfprintf+0x166>
    3342:	f5 01       	movw	r30, r10
    3344:	80 81       	ld	r24, Z
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	42 e0       	ldi	r20, 0x02	; 2
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	a4 0e       	add	r10, r20
    334e:	b5 1e       	adc	r11, r21
    3350:	61 01       	movw	r12, r2
    3352:	01 e0       	ldi	r16, 0x01	; 1
    3354:	10 e0       	ldi	r17, 0x00	; 0
    3356:	12 c0       	rjmp	.+36     	; 0x337c <vfprintf+0x160>
    3358:	f5 01       	movw	r30, r10
    335a:	c0 80       	ld	r12, Z
    335c:	d1 80       	ldd	r13, Z+1	; 0x01
    335e:	f6 fc       	sbrc	r15, 6
    3360:	03 c0       	rjmp	.+6      	; 0x3368 <vfprintf+0x14c>
    3362:	6f ef       	ldi	r22, 0xFF	; 255
    3364:	7f ef       	ldi	r23, 0xFF	; 255
    3366:	02 c0       	rjmp	.+4      	; 0x336c <vfprintf+0x150>
    3368:	69 2d       	mov	r22, r9
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	42 e0       	ldi	r20, 0x02	; 2
    336e:	50 e0       	ldi	r21, 0x00	; 0
    3370:	a4 0e       	add	r10, r20
    3372:	b5 1e       	adc	r11, r21
    3374:	c6 01       	movw	r24, r12
    3376:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <strnlen>
    337a:	8c 01       	movw	r16, r24
    337c:	5f e7       	ldi	r21, 0x7F	; 127
    337e:	f5 22       	and	r15, r21
    3380:	14 c0       	rjmp	.+40     	; 0x33aa <vfprintf+0x18e>
    3382:	f5 01       	movw	r30, r10
    3384:	c0 80       	ld	r12, Z
    3386:	d1 80       	ldd	r13, Z+1	; 0x01
    3388:	f6 fc       	sbrc	r15, 6
    338a:	03 c0       	rjmp	.+6      	; 0x3392 <vfprintf+0x176>
    338c:	6f ef       	ldi	r22, 0xFF	; 255
    338e:	7f ef       	ldi	r23, 0xFF	; 255
    3390:	02 c0       	rjmp	.+4      	; 0x3396 <vfprintf+0x17a>
    3392:	69 2d       	mov	r22, r9
    3394:	70 e0       	ldi	r23, 0x00	; 0
    3396:	42 e0       	ldi	r20, 0x02	; 2
    3398:	50 e0       	ldi	r21, 0x00	; 0
    339a:	a4 0e       	add	r10, r20
    339c:	b5 1e       	adc	r11, r21
    339e:	c6 01       	movw	r24, r12
    33a0:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <strnlen_P>
    33a4:	8c 01       	movw	r16, r24
    33a6:	50 e8       	ldi	r21, 0x80	; 128
    33a8:	f5 2a       	or	r15, r21
    33aa:	f3 fe       	sbrs	r15, 3
    33ac:	07 c0       	rjmp	.+14     	; 0x33bc <vfprintf+0x1a0>
    33ae:	1a c0       	rjmp	.+52     	; 0x33e4 <vfprintf+0x1c8>
    33b0:	80 e2       	ldi	r24, 0x20	; 32
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	b3 01       	movw	r22, r6
    33b6:	0e 94 01 1b 	call	0x3602	; 0x3602 <fputc>
    33ba:	ea 94       	dec	r14
    33bc:	8e 2d       	mov	r24, r14
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	08 17       	cp	r16, r24
    33c2:	19 07       	cpc	r17, r25
    33c4:	a8 f3       	brcs	.-22     	; 0x33b0 <vfprintf+0x194>
    33c6:	0e c0       	rjmp	.+28     	; 0x33e4 <vfprintf+0x1c8>
    33c8:	f6 01       	movw	r30, r12
    33ca:	f7 fc       	sbrc	r15, 7
    33cc:	85 91       	lpm	r24, Z+
    33ce:	f7 fe       	sbrs	r15, 7
    33d0:	81 91       	ld	r24, Z+
    33d2:	6f 01       	movw	r12, r30
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	b3 01       	movw	r22, r6
    33d8:	0e 94 01 1b 	call	0x3602	; 0x3602 <fputc>
    33dc:	e1 10       	cpse	r14, r1
    33de:	ea 94       	dec	r14
    33e0:	01 50       	subi	r16, 0x01	; 1
    33e2:	10 40       	sbci	r17, 0x00	; 0
    33e4:	01 15       	cp	r16, r1
    33e6:	11 05       	cpc	r17, r1
    33e8:	79 f7       	brne	.-34     	; 0x33c8 <vfprintf+0x1ac>
    33ea:	ea c0       	rjmp	.+468    	; 0x35c0 <vfprintf+0x3a4>
    33ec:	94 36       	cpi	r25, 0x64	; 100
    33ee:	11 f0       	breq	.+4      	; 0x33f4 <vfprintf+0x1d8>
    33f0:	99 36       	cpi	r25, 0x69	; 105
    33f2:	69 f5       	brne	.+90     	; 0x344e <vfprintf+0x232>
    33f4:	f7 fe       	sbrs	r15, 7
    33f6:	08 c0       	rjmp	.+16     	; 0x3408 <vfprintf+0x1ec>
    33f8:	f5 01       	movw	r30, r10
    33fa:	20 81       	ld	r18, Z
    33fc:	31 81       	ldd	r19, Z+1	; 0x01
    33fe:	42 81       	ldd	r20, Z+2	; 0x02
    3400:	53 81       	ldd	r21, Z+3	; 0x03
    3402:	84 e0       	ldi	r24, 0x04	; 4
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	0a c0       	rjmp	.+20     	; 0x341c <vfprintf+0x200>
    3408:	f5 01       	movw	r30, r10
    340a:	80 81       	ld	r24, Z
    340c:	91 81       	ldd	r25, Z+1	; 0x01
    340e:	9c 01       	movw	r18, r24
    3410:	44 27       	eor	r20, r20
    3412:	37 fd       	sbrc	r19, 7
    3414:	40 95       	com	r20
    3416:	54 2f       	mov	r21, r20
    3418:	82 e0       	ldi	r24, 0x02	; 2
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	a8 0e       	add	r10, r24
    341e:	b9 1e       	adc	r11, r25
    3420:	9f e6       	ldi	r25, 0x6F	; 111
    3422:	f9 22       	and	r15, r25
    3424:	57 ff       	sbrs	r21, 7
    3426:	09 c0       	rjmp	.+18     	; 0x343a <vfprintf+0x21e>
    3428:	50 95       	com	r21
    342a:	40 95       	com	r20
    342c:	30 95       	com	r19
    342e:	21 95       	neg	r18
    3430:	3f 4f       	sbci	r19, 0xFF	; 255
    3432:	4f 4f       	sbci	r20, 0xFF	; 255
    3434:	5f 4f       	sbci	r21, 0xFF	; 255
    3436:	e0 e8       	ldi	r30, 0x80	; 128
    3438:	fe 2a       	or	r15, r30
    343a:	ca 01       	movw	r24, r20
    343c:	b9 01       	movw	r22, r18
    343e:	a1 01       	movw	r20, r2
    3440:	2a e0       	ldi	r18, 0x0A	; 10
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	0e 94 2d 1b 	call	0x365a	; 0x365a <__ultoa_invert>
    3448:	d8 2e       	mov	r13, r24
    344a:	d2 18       	sub	r13, r2
    344c:	40 c0       	rjmp	.+128    	; 0x34ce <vfprintf+0x2b2>
    344e:	95 37       	cpi	r25, 0x75	; 117
    3450:	29 f4       	brne	.+10     	; 0x345c <vfprintf+0x240>
    3452:	1f 2d       	mov	r17, r15
    3454:	1f 7e       	andi	r17, 0xEF	; 239
    3456:	2a e0       	ldi	r18, 0x0A	; 10
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	1d c0       	rjmp	.+58     	; 0x3496 <vfprintf+0x27a>
    345c:	1f 2d       	mov	r17, r15
    345e:	19 7f       	andi	r17, 0xF9	; 249
    3460:	9f 36       	cpi	r25, 0x6F	; 111
    3462:	61 f0       	breq	.+24     	; 0x347c <vfprintf+0x260>
    3464:	90 37       	cpi	r25, 0x70	; 112
    3466:	20 f4       	brcc	.+8      	; 0x3470 <vfprintf+0x254>
    3468:	98 35       	cpi	r25, 0x58	; 88
    346a:	09 f0       	breq	.+2      	; 0x346e <vfprintf+0x252>
    346c:	ac c0       	rjmp	.+344    	; 0x35c6 <vfprintf+0x3aa>
    346e:	0f c0       	rjmp	.+30     	; 0x348e <vfprintf+0x272>
    3470:	90 37       	cpi	r25, 0x70	; 112
    3472:	39 f0       	breq	.+14     	; 0x3482 <vfprintf+0x266>
    3474:	98 37       	cpi	r25, 0x78	; 120
    3476:	09 f0       	breq	.+2      	; 0x347a <vfprintf+0x25e>
    3478:	a6 c0       	rjmp	.+332    	; 0x35c6 <vfprintf+0x3aa>
    347a:	04 c0       	rjmp	.+8      	; 0x3484 <vfprintf+0x268>
    347c:	28 e0       	ldi	r18, 0x08	; 8
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	0a c0       	rjmp	.+20     	; 0x3496 <vfprintf+0x27a>
    3482:	10 61       	ori	r17, 0x10	; 16
    3484:	14 fd       	sbrc	r17, 4
    3486:	14 60       	ori	r17, 0x04	; 4
    3488:	20 e1       	ldi	r18, 0x10	; 16
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	04 c0       	rjmp	.+8      	; 0x3496 <vfprintf+0x27a>
    348e:	14 fd       	sbrc	r17, 4
    3490:	16 60       	ori	r17, 0x06	; 6
    3492:	20 e1       	ldi	r18, 0x10	; 16
    3494:	32 e0       	ldi	r19, 0x02	; 2
    3496:	17 ff       	sbrs	r17, 7
    3498:	08 c0       	rjmp	.+16     	; 0x34aa <vfprintf+0x28e>
    349a:	f5 01       	movw	r30, r10
    349c:	60 81       	ld	r22, Z
    349e:	71 81       	ldd	r23, Z+1	; 0x01
    34a0:	82 81       	ldd	r24, Z+2	; 0x02
    34a2:	93 81       	ldd	r25, Z+3	; 0x03
    34a4:	44 e0       	ldi	r20, 0x04	; 4
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	08 c0       	rjmp	.+16     	; 0x34ba <vfprintf+0x29e>
    34aa:	f5 01       	movw	r30, r10
    34ac:	80 81       	ld	r24, Z
    34ae:	91 81       	ldd	r25, Z+1	; 0x01
    34b0:	bc 01       	movw	r22, r24
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	42 e0       	ldi	r20, 0x02	; 2
    34b8:	50 e0       	ldi	r21, 0x00	; 0
    34ba:	a4 0e       	add	r10, r20
    34bc:	b5 1e       	adc	r11, r21
    34be:	a1 01       	movw	r20, r2
    34c0:	0e 94 2d 1b 	call	0x365a	; 0x365a <__ultoa_invert>
    34c4:	d8 2e       	mov	r13, r24
    34c6:	d2 18       	sub	r13, r2
    34c8:	8f e7       	ldi	r24, 0x7F	; 127
    34ca:	f8 2e       	mov	r15, r24
    34cc:	f1 22       	and	r15, r17
    34ce:	f6 fe       	sbrs	r15, 6
    34d0:	0b c0       	rjmp	.+22     	; 0x34e8 <vfprintf+0x2cc>
    34d2:	5e ef       	ldi	r21, 0xFE	; 254
    34d4:	f5 22       	and	r15, r21
    34d6:	d9 14       	cp	r13, r9
    34d8:	38 f4       	brcc	.+14     	; 0x34e8 <vfprintf+0x2cc>
    34da:	f4 fe       	sbrs	r15, 4
    34dc:	07 c0       	rjmp	.+14     	; 0x34ec <vfprintf+0x2d0>
    34de:	f2 fc       	sbrc	r15, 2
    34e0:	05 c0       	rjmp	.+10     	; 0x34ec <vfprintf+0x2d0>
    34e2:	8f ee       	ldi	r24, 0xEF	; 239
    34e4:	f8 22       	and	r15, r24
    34e6:	02 c0       	rjmp	.+4      	; 0x34ec <vfprintf+0x2d0>
    34e8:	1d 2d       	mov	r17, r13
    34ea:	01 c0       	rjmp	.+2      	; 0x34ee <vfprintf+0x2d2>
    34ec:	19 2d       	mov	r17, r9
    34ee:	f4 fe       	sbrs	r15, 4
    34f0:	0d c0       	rjmp	.+26     	; 0x350c <vfprintf+0x2f0>
    34f2:	fe 01       	movw	r30, r28
    34f4:	ed 0d       	add	r30, r13
    34f6:	f1 1d       	adc	r31, r1
    34f8:	80 81       	ld	r24, Z
    34fa:	80 33       	cpi	r24, 0x30	; 48
    34fc:	19 f4       	brne	.+6      	; 0x3504 <vfprintf+0x2e8>
    34fe:	99 ee       	ldi	r25, 0xE9	; 233
    3500:	f9 22       	and	r15, r25
    3502:	08 c0       	rjmp	.+16     	; 0x3514 <vfprintf+0x2f8>
    3504:	1f 5f       	subi	r17, 0xFF	; 255
    3506:	f2 fe       	sbrs	r15, 2
    3508:	05 c0       	rjmp	.+10     	; 0x3514 <vfprintf+0x2f8>
    350a:	03 c0       	rjmp	.+6      	; 0x3512 <vfprintf+0x2f6>
    350c:	8f 2d       	mov	r24, r15
    350e:	86 78       	andi	r24, 0x86	; 134
    3510:	09 f0       	breq	.+2      	; 0x3514 <vfprintf+0x2f8>
    3512:	1f 5f       	subi	r17, 0xFF	; 255
    3514:	0f 2d       	mov	r16, r15
    3516:	f3 fc       	sbrc	r15, 3
    3518:	14 c0       	rjmp	.+40     	; 0x3542 <vfprintf+0x326>
    351a:	f0 fe       	sbrs	r15, 0
    351c:	0f c0       	rjmp	.+30     	; 0x353c <vfprintf+0x320>
    351e:	1e 15       	cp	r17, r14
    3520:	10 f0       	brcs	.+4      	; 0x3526 <vfprintf+0x30a>
    3522:	9d 2c       	mov	r9, r13
    3524:	0b c0       	rjmp	.+22     	; 0x353c <vfprintf+0x320>
    3526:	9d 2c       	mov	r9, r13
    3528:	9e 0c       	add	r9, r14
    352a:	91 1a       	sub	r9, r17
    352c:	1e 2d       	mov	r17, r14
    352e:	06 c0       	rjmp	.+12     	; 0x353c <vfprintf+0x320>
    3530:	80 e2       	ldi	r24, 0x20	; 32
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	b3 01       	movw	r22, r6
    3536:	0e 94 01 1b 	call	0x3602	; 0x3602 <fputc>
    353a:	1f 5f       	subi	r17, 0xFF	; 255
    353c:	1e 15       	cp	r17, r14
    353e:	c0 f3       	brcs	.-16     	; 0x3530 <vfprintf+0x314>
    3540:	04 c0       	rjmp	.+8      	; 0x354a <vfprintf+0x32e>
    3542:	1e 15       	cp	r17, r14
    3544:	10 f4       	brcc	.+4      	; 0x354a <vfprintf+0x32e>
    3546:	e1 1a       	sub	r14, r17
    3548:	01 c0       	rjmp	.+2      	; 0x354c <vfprintf+0x330>
    354a:	ee 24       	eor	r14, r14
    354c:	04 ff       	sbrs	r16, 4
    354e:	0f c0       	rjmp	.+30     	; 0x356e <vfprintf+0x352>
    3550:	80 e3       	ldi	r24, 0x30	; 48
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	b3 01       	movw	r22, r6
    3556:	0e 94 01 1b 	call	0x3602	; 0x3602 <fputc>
    355a:	02 ff       	sbrs	r16, 2
    355c:	1d c0       	rjmp	.+58     	; 0x3598 <vfprintf+0x37c>
    355e:	01 fd       	sbrc	r16, 1
    3560:	03 c0       	rjmp	.+6      	; 0x3568 <vfprintf+0x34c>
    3562:	88 e7       	ldi	r24, 0x78	; 120
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e c0       	rjmp	.+28     	; 0x3584 <vfprintf+0x368>
    3568:	88 e5       	ldi	r24, 0x58	; 88
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	0b c0       	rjmp	.+22     	; 0x3584 <vfprintf+0x368>
    356e:	80 2f       	mov	r24, r16
    3570:	86 78       	andi	r24, 0x86	; 134
    3572:	91 f0       	breq	.+36     	; 0x3598 <vfprintf+0x37c>
    3574:	01 ff       	sbrs	r16, 1
    3576:	02 c0       	rjmp	.+4      	; 0x357c <vfprintf+0x360>
    3578:	8b e2       	ldi	r24, 0x2B	; 43
    357a:	01 c0       	rjmp	.+2      	; 0x357e <vfprintf+0x362>
    357c:	80 e2       	ldi	r24, 0x20	; 32
    357e:	f7 fc       	sbrc	r15, 7
    3580:	8d e2       	ldi	r24, 0x2D	; 45
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	b3 01       	movw	r22, r6
    3586:	0e 94 01 1b 	call	0x3602	; 0x3602 <fputc>
    358a:	06 c0       	rjmp	.+12     	; 0x3598 <vfprintf+0x37c>
    358c:	80 e3       	ldi	r24, 0x30	; 48
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	b3 01       	movw	r22, r6
    3592:	0e 94 01 1b 	call	0x3602	; 0x3602 <fputc>
    3596:	9a 94       	dec	r9
    3598:	d9 14       	cp	r13, r9
    359a:	c0 f3       	brcs	.-16     	; 0x358c <vfprintf+0x370>
    359c:	da 94       	dec	r13
    359e:	f1 01       	movw	r30, r2
    35a0:	ed 0d       	add	r30, r13
    35a2:	f1 1d       	adc	r31, r1
    35a4:	80 81       	ld	r24, Z
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	b3 01       	movw	r22, r6
    35aa:	0e 94 01 1b 	call	0x3602	; 0x3602 <fputc>
    35ae:	dd 20       	and	r13, r13
    35b0:	a9 f7       	brne	.-22     	; 0x359c <vfprintf+0x380>
    35b2:	06 c0       	rjmp	.+12     	; 0x35c0 <vfprintf+0x3a4>
    35b4:	80 e2       	ldi	r24, 0x20	; 32
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	b3 01       	movw	r22, r6
    35ba:	0e 94 01 1b 	call	0x3602	; 0x3602 <fputc>
    35be:	ea 94       	dec	r14
    35c0:	ee 20       	and	r14, r14
    35c2:	c1 f7       	brne	.-16     	; 0x35b4 <vfprintf+0x398>
    35c4:	43 ce       	rjmp	.-890    	; 0x324c <vfprintf+0x30>
    35c6:	f3 01       	movw	r30, r6
    35c8:	66 81       	ldd	r22, Z+6	; 0x06
    35ca:	77 81       	ldd	r23, Z+7	; 0x07
    35cc:	cb 01       	movw	r24, r22
    35ce:	2b 96       	adiw	r28, 0x0b	; 11
    35d0:	e2 e1       	ldi	r30, 0x12	; 18
    35d2:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__epilogue_restores__>

000035d6 <strnlen_P>:
    35d6:	fc 01       	movw	r30, r24
    35d8:	05 90       	lpm	r0, Z+
    35da:	61 50       	subi	r22, 0x01	; 1
    35dc:	70 40       	sbci	r23, 0x00	; 0
    35de:	01 10       	cpse	r0, r1
    35e0:	d8 f7       	brcc	.-10     	; 0x35d8 <strnlen_P+0x2>
    35e2:	80 95       	com	r24
    35e4:	90 95       	com	r25
    35e6:	8e 0f       	add	r24, r30
    35e8:	9f 1f       	adc	r25, r31
    35ea:	08 95       	ret

000035ec <strnlen>:
    35ec:	fc 01       	movw	r30, r24
    35ee:	61 50       	subi	r22, 0x01	; 1
    35f0:	70 40       	sbci	r23, 0x00	; 0
    35f2:	01 90       	ld	r0, Z+
    35f4:	01 10       	cpse	r0, r1
    35f6:	d8 f7       	brcc	.-10     	; 0x35ee <strnlen+0x2>
    35f8:	80 95       	com	r24
    35fa:	90 95       	com	r25
    35fc:	8e 0f       	add	r24, r30
    35fe:	9f 1f       	adc	r25, r31
    3600:	08 95       	ret

00003602 <fputc>:
    3602:	0f 93       	push	r16
    3604:	1f 93       	push	r17
    3606:	cf 93       	push	r28
    3608:	df 93       	push	r29
    360a:	8c 01       	movw	r16, r24
    360c:	eb 01       	movw	r28, r22
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	81 ff       	sbrs	r24, 1
    3612:	1b c0       	rjmp	.+54     	; 0x364a <fputc+0x48>
    3614:	82 ff       	sbrs	r24, 2
    3616:	0d c0       	rjmp	.+26     	; 0x3632 <fputc+0x30>
    3618:	2e 81       	ldd	r18, Y+6	; 0x06
    361a:	3f 81       	ldd	r19, Y+7	; 0x07
    361c:	8c 81       	ldd	r24, Y+4	; 0x04
    361e:	9d 81       	ldd	r25, Y+5	; 0x05
    3620:	28 17       	cp	r18, r24
    3622:	39 07       	cpc	r19, r25
    3624:	64 f4       	brge	.+24     	; 0x363e <fputc+0x3c>
    3626:	e8 81       	ld	r30, Y
    3628:	f9 81       	ldd	r31, Y+1	; 0x01
    362a:	01 93       	st	Z+, r16
    362c:	f9 83       	std	Y+1, r31	; 0x01
    362e:	e8 83       	st	Y, r30
    3630:	06 c0       	rjmp	.+12     	; 0x363e <fputc+0x3c>
    3632:	e8 85       	ldd	r30, Y+8	; 0x08
    3634:	f9 85       	ldd	r31, Y+9	; 0x09
    3636:	80 2f       	mov	r24, r16
    3638:	09 95       	icall
    363a:	89 2b       	or	r24, r25
    363c:	31 f4       	brne	.+12     	; 0x364a <fputc+0x48>
    363e:	8e 81       	ldd	r24, Y+6	; 0x06
    3640:	9f 81       	ldd	r25, Y+7	; 0x07
    3642:	01 96       	adiw	r24, 0x01	; 1
    3644:	9f 83       	std	Y+7, r25	; 0x07
    3646:	8e 83       	std	Y+6, r24	; 0x06
    3648:	02 c0       	rjmp	.+4      	; 0x364e <fputc+0x4c>
    364a:	0f ef       	ldi	r16, 0xFF	; 255
    364c:	1f ef       	ldi	r17, 0xFF	; 255
    364e:	c8 01       	movw	r24, r16
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	1f 91       	pop	r17
    3656:	0f 91       	pop	r16
    3658:	08 95       	ret

0000365a <__ultoa_invert>:
    365a:	fa 01       	movw	r30, r20
    365c:	aa 27       	eor	r26, r26
    365e:	28 30       	cpi	r18, 0x08	; 8
    3660:	51 f1       	breq	.+84     	; 0x36b6 <__ultoa_invert+0x5c>
    3662:	20 31       	cpi	r18, 0x10	; 16
    3664:	81 f1       	breq	.+96     	; 0x36c6 <__ultoa_invert+0x6c>
    3666:	e8 94       	clt
    3668:	6f 93       	push	r22
    366a:	6e 7f       	andi	r22, 0xFE	; 254
    366c:	6e 5f       	subi	r22, 0xFE	; 254
    366e:	7f 4f       	sbci	r23, 0xFF	; 255
    3670:	8f 4f       	sbci	r24, 0xFF	; 255
    3672:	9f 4f       	sbci	r25, 0xFF	; 255
    3674:	af 4f       	sbci	r26, 0xFF	; 255
    3676:	b1 e0       	ldi	r27, 0x01	; 1
    3678:	3e d0       	rcall	.+124    	; 0x36f6 <__ultoa_invert+0x9c>
    367a:	b4 e0       	ldi	r27, 0x04	; 4
    367c:	3c d0       	rcall	.+120    	; 0x36f6 <__ultoa_invert+0x9c>
    367e:	67 0f       	add	r22, r23
    3680:	78 1f       	adc	r23, r24
    3682:	89 1f       	adc	r24, r25
    3684:	9a 1f       	adc	r25, r26
    3686:	a1 1d       	adc	r26, r1
    3688:	68 0f       	add	r22, r24
    368a:	79 1f       	adc	r23, r25
    368c:	8a 1f       	adc	r24, r26
    368e:	91 1d       	adc	r25, r1
    3690:	a1 1d       	adc	r26, r1
    3692:	6a 0f       	add	r22, r26
    3694:	71 1d       	adc	r23, r1
    3696:	81 1d       	adc	r24, r1
    3698:	91 1d       	adc	r25, r1
    369a:	a1 1d       	adc	r26, r1
    369c:	20 d0       	rcall	.+64     	; 0x36de <__ultoa_invert+0x84>
    369e:	09 f4       	brne	.+2      	; 0x36a2 <__ultoa_invert+0x48>
    36a0:	68 94       	set
    36a2:	3f 91       	pop	r19
    36a4:	2a e0       	ldi	r18, 0x0A	; 10
    36a6:	26 9f       	mul	r18, r22
    36a8:	11 24       	eor	r1, r1
    36aa:	30 19       	sub	r19, r0
    36ac:	30 5d       	subi	r19, 0xD0	; 208
    36ae:	31 93       	st	Z+, r19
    36b0:	de f6       	brtc	.-74     	; 0x3668 <__ultoa_invert+0xe>
    36b2:	cf 01       	movw	r24, r30
    36b4:	08 95       	ret
    36b6:	46 2f       	mov	r20, r22
    36b8:	47 70       	andi	r20, 0x07	; 7
    36ba:	40 5d       	subi	r20, 0xD0	; 208
    36bc:	41 93       	st	Z+, r20
    36be:	b3 e0       	ldi	r27, 0x03	; 3
    36c0:	0f d0       	rcall	.+30     	; 0x36e0 <__ultoa_invert+0x86>
    36c2:	c9 f7       	brne	.-14     	; 0x36b6 <__ultoa_invert+0x5c>
    36c4:	f6 cf       	rjmp	.-20     	; 0x36b2 <__ultoa_invert+0x58>
    36c6:	46 2f       	mov	r20, r22
    36c8:	4f 70       	andi	r20, 0x0F	; 15
    36ca:	40 5d       	subi	r20, 0xD0	; 208
    36cc:	4a 33       	cpi	r20, 0x3A	; 58
    36ce:	18 f0       	brcs	.+6      	; 0x36d6 <__ultoa_invert+0x7c>
    36d0:	49 5d       	subi	r20, 0xD9	; 217
    36d2:	31 fd       	sbrc	r19, 1
    36d4:	40 52       	subi	r20, 0x20	; 32
    36d6:	41 93       	st	Z+, r20
    36d8:	02 d0       	rcall	.+4      	; 0x36de <__ultoa_invert+0x84>
    36da:	a9 f7       	brne	.-22     	; 0x36c6 <__ultoa_invert+0x6c>
    36dc:	ea cf       	rjmp	.-44     	; 0x36b2 <__ultoa_invert+0x58>
    36de:	b4 e0       	ldi	r27, 0x04	; 4
    36e0:	a6 95       	lsr	r26
    36e2:	97 95       	ror	r25
    36e4:	87 95       	ror	r24
    36e6:	77 95       	ror	r23
    36e8:	67 95       	ror	r22
    36ea:	ba 95       	dec	r27
    36ec:	c9 f7       	brne	.-14     	; 0x36e0 <__ultoa_invert+0x86>
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	61 05       	cpc	r22, r1
    36f2:	71 05       	cpc	r23, r1
    36f4:	08 95       	ret
    36f6:	9b 01       	movw	r18, r22
    36f8:	ac 01       	movw	r20, r24
    36fa:	0a 2e       	mov	r0, r26
    36fc:	06 94       	lsr	r0
    36fe:	57 95       	ror	r21
    3700:	47 95       	ror	r20
    3702:	37 95       	ror	r19
    3704:	27 95       	ror	r18
    3706:	ba 95       	dec	r27
    3708:	c9 f7       	brne	.-14     	; 0x36fc <__ultoa_invert+0xa2>
    370a:	62 0f       	add	r22, r18
    370c:	73 1f       	adc	r23, r19
    370e:	84 1f       	adc	r24, r20
    3710:	95 1f       	adc	r25, r21
    3712:	a0 1d       	adc	r26, r0
    3714:	08 95       	ret

00003716 <__mulsi3>:
    3716:	62 9f       	mul	r22, r18
    3718:	d0 01       	movw	r26, r0
    371a:	73 9f       	mul	r23, r19
    371c:	f0 01       	movw	r30, r0
    371e:	82 9f       	mul	r24, r18
    3720:	e0 0d       	add	r30, r0
    3722:	f1 1d       	adc	r31, r1
    3724:	64 9f       	mul	r22, r20
    3726:	e0 0d       	add	r30, r0
    3728:	f1 1d       	adc	r31, r1
    372a:	92 9f       	mul	r25, r18
    372c:	f0 0d       	add	r31, r0
    372e:	83 9f       	mul	r24, r19
    3730:	f0 0d       	add	r31, r0
    3732:	74 9f       	mul	r23, r20
    3734:	f0 0d       	add	r31, r0
    3736:	65 9f       	mul	r22, r21
    3738:	f0 0d       	add	r31, r0
    373a:	99 27       	eor	r25, r25
    373c:	72 9f       	mul	r23, r18
    373e:	b0 0d       	add	r27, r0
    3740:	e1 1d       	adc	r30, r1
    3742:	f9 1f       	adc	r31, r25
    3744:	63 9f       	mul	r22, r19
    3746:	b0 0d       	add	r27, r0
    3748:	e1 1d       	adc	r30, r1
    374a:	f9 1f       	adc	r31, r25
    374c:	bd 01       	movw	r22, r26
    374e:	cf 01       	movw	r24, r30
    3750:	11 24       	eor	r1, r1
    3752:	08 95       	ret

00003754 <__divmodsi4>:
    3754:	97 fb       	bst	r25, 7
    3756:	09 2e       	mov	r0, r25
    3758:	05 26       	eor	r0, r21
    375a:	0e d0       	rcall	.+28     	; 0x3778 <__divmodsi4_neg1>
    375c:	57 fd       	sbrc	r21, 7
    375e:	04 d0       	rcall	.+8      	; 0x3768 <__divmodsi4_neg2>
    3760:	4b d0       	rcall	.+150    	; 0x37f8 <__udivmodsi4>
    3762:	0a d0       	rcall	.+20     	; 0x3778 <__divmodsi4_neg1>
    3764:	00 1c       	adc	r0, r0
    3766:	38 f4       	brcc	.+14     	; 0x3776 <__divmodsi4_exit>

00003768 <__divmodsi4_neg2>:
    3768:	50 95       	com	r21
    376a:	40 95       	com	r20
    376c:	30 95       	com	r19
    376e:	21 95       	neg	r18
    3770:	3f 4f       	sbci	r19, 0xFF	; 255
    3772:	4f 4f       	sbci	r20, 0xFF	; 255
    3774:	5f 4f       	sbci	r21, 0xFF	; 255

00003776 <__divmodsi4_exit>:
    3776:	08 95       	ret

00003778 <__divmodsi4_neg1>:
    3778:	f6 f7       	brtc	.-4      	; 0x3776 <__divmodsi4_exit>
    377a:	90 95       	com	r25
    377c:	80 95       	com	r24
    377e:	70 95       	com	r23
    3780:	61 95       	neg	r22
    3782:	7f 4f       	sbci	r23, 0xFF	; 255
    3784:	8f 4f       	sbci	r24, 0xFF	; 255
    3786:	9f 4f       	sbci	r25, 0xFF	; 255
    3788:	08 95       	ret

0000378a <__prologue_saves__>:
    378a:	2f 92       	push	r2
    378c:	3f 92       	push	r3
    378e:	4f 92       	push	r4
    3790:	5f 92       	push	r5
    3792:	6f 92       	push	r6
    3794:	7f 92       	push	r7
    3796:	8f 92       	push	r8
    3798:	9f 92       	push	r9
    379a:	af 92       	push	r10
    379c:	bf 92       	push	r11
    379e:	cf 92       	push	r12
    37a0:	df 92       	push	r13
    37a2:	ef 92       	push	r14
    37a4:	ff 92       	push	r15
    37a6:	0f 93       	push	r16
    37a8:	1f 93       	push	r17
    37aa:	cf 93       	push	r28
    37ac:	df 93       	push	r29
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	ca 1b       	sub	r28, r26
    37b4:	db 0b       	sbc	r29, r27
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
    37c0:	09 94       	ijmp

000037c2 <__epilogue_restores__>:
    37c2:	2a 88       	ldd	r2, Y+18	; 0x12
    37c4:	39 88       	ldd	r3, Y+17	; 0x11
    37c6:	48 88       	ldd	r4, Y+16	; 0x10
    37c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    37ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    37cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    37ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    37d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    37d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    37d4:	b9 84       	ldd	r11, Y+9	; 0x09
    37d6:	c8 84       	ldd	r12, Y+8	; 0x08
    37d8:	df 80       	ldd	r13, Y+7	; 0x07
    37da:	ee 80       	ldd	r14, Y+6	; 0x06
    37dc:	fd 80       	ldd	r15, Y+5	; 0x05
    37de:	0c 81       	ldd	r16, Y+4	; 0x04
    37e0:	1b 81       	ldd	r17, Y+3	; 0x03
    37e2:	aa 81       	ldd	r26, Y+2	; 0x02
    37e4:	b9 81       	ldd	r27, Y+1	; 0x01
    37e6:	ce 0f       	add	r28, r30
    37e8:	d1 1d       	adc	r29, r1
    37ea:	0f b6       	in	r0, 0x3f	; 63
    37ec:	f8 94       	cli
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	cd bf       	out	0x3d, r28	; 61
    37f4:	ed 01       	movw	r28, r26
    37f6:	08 95       	ret

000037f8 <__udivmodsi4>:
    37f8:	a1 e2       	ldi	r26, 0x21	; 33
    37fa:	1a 2e       	mov	r1, r26
    37fc:	aa 1b       	sub	r26, r26
    37fe:	bb 1b       	sub	r27, r27
    3800:	fd 01       	movw	r30, r26
    3802:	0d c0       	rjmp	.+26     	; 0x381e <__udivmodsi4_ep>

00003804 <__udivmodsi4_loop>:
    3804:	aa 1f       	adc	r26, r26
    3806:	bb 1f       	adc	r27, r27
    3808:	ee 1f       	adc	r30, r30
    380a:	ff 1f       	adc	r31, r31
    380c:	a2 17       	cp	r26, r18
    380e:	b3 07       	cpc	r27, r19
    3810:	e4 07       	cpc	r30, r20
    3812:	f5 07       	cpc	r31, r21
    3814:	20 f0       	brcs	.+8      	; 0x381e <__udivmodsi4_ep>
    3816:	a2 1b       	sub	r26, r18
    3818:	b3 0b       	sbc	r27, r19
    381a:	e4 0b       	sbc	r30, r20
    381c:	f5 0b       	sbc	r31, r21

0000381e <__udivmodsi4_ep>:
    381e:	66 1f       	adc	r22, r22
    3820:	77 1f       	adc	r23, r23
    3822:	88 1f       	adc	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	1a 94       	dec	r1
    3828:	69 f7       	brne	.-38     	; 0x3804 <__udivmodsi4_loop>
    382a:	60 95       	com	r22
    382c:	70 95       	com	r23
    382e:	80 95       	com	r24
    3830:	90 95       	com	r25
    3832:	9b 01       	movw	r18, r22
    3834:	ac 01       	movw	r20, r24
    3836:	bd 01       	movw	r22, r26
    3838:	cf 01       	movw	r24, r30
    383a:	08 95       	ret

0000383c <_exit>:
    383c:	f8 94       	cli

0000383e <__stop_program>:
    383e:	ff cf       	rjmp	.-2      	; 0x383e <__stop_program>
